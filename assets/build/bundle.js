(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
"use strict";function getLens(o){var r=o.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=o.indexOf("=");return-1===e&&(e=r),[e,e===r?0:4-e%4]}function byteLength(o){var r=getLens(o),e=r[0],t=r[1];return 3*(e+t)/4-t}function _byteLength(o,r,e){return 3*(r+e)/4-e}function toByteArray(o){var r,e,t=getLens(o),n=t[0],u=t[1],p=new Arr(_byteLength(o,n,u)),a=0,h=u>0?n-4:n;for(e=0;e<h;e+=4)r=revLookup[o.charCodeAt(e)]<<18|revLookup[o.charCodeAt(e+1)]<<12|revLookup[o.charCodeAt(e+2)]<<6|revLookup[o.charCodeAt(e+3)],p[a++]=r>>16&255,p[a++]=r>>8&255,p[a++]=255&r;return 2===u&&(r=revLookup[o.charCodeAt(e)]<<2|revLookup[o.charCodeAt(e+1)]>>4,p[a++]=255&r),1===u&&(r=revLookup[o.charCodeAt(e)]<<10|revLookup[o.charCodeAt(e+1)]<<4|revLookup[o.charCodeAt(e+2)]>>2,p[a++]=r>>8&255,p[a++]=255&r),p}function tripletToBase64(o){return lookup[o>>18&63]+lookup[o>>12&63]+lookup[o>>6&63]+lookup[63&o]}function encodeChunk(o,r,e){for(var t,n=[],u=r;u<e;u+=3)t=(o[u]<<16&16711680)+(o[u+1]<<8&65280)+(255&o[u+2]),n.push(tripletToBase64(t));return n.join("")}function fromByteArray(o){for(var r,e=o.length,t=e%3,n=[],u=0,p=e-t;u<p;u+=16383)n.push(encodeChunk(o,u,u+16383>p?p:u+16383));return 1===t?(r=o[e-1],n.push(lookup[r>>2]+lookup[r<<4&63]+"==")):2===t&&(r=(o[e-2]<<8)+o[e-1],n.push(lookup[r>>10]+lookup[r>>4&63]+lookup[r<<2&63]+"=")),n.join("")}exports.byteLength=byteLength,exports.toByteArray=toByteArray,exports.fromByteArray=fromByteArray;for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;

},{}],3:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";function typedArraySupport(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}function createBuffer(e){if(e>K_MAX_LENGTH)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return t.__proto__=Buffer.prototype,t}function Buffer(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return allocUnsafe(e)}return from(e,t,r)}function from(e,t,r){if("string"==typeof e)return fromString(e,t);if(ArrayBuffer.isView(e))return fromArrayLike(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(isInstance(e,ArrayBuffer)||e&&isInstance(e.buffer,ArrayBuffer))return fromArrayBuffer(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return Buffer.from(n,t,r);var f=fromObject(e);if(f)return f;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Buffer.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function alloc(e,t,r){return assertSize(e),e<=0?createBuffer(e):void 0!==t?"string"==typeof r?createBuffer(e).fill(t,r):createBuffer(e).fill(t):createBuffer(e)}function allocUnsafe(e){return assertSize(e),createBuffer(e<0?0:0|checked(e))}function fromString(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|byteLength(e,t),n=createBuffer(r),f=n.write(e,t);return f!==r&&(n=n.slice(0,f)),n}function fromArrayLike(e){for(var t=e.length<0?0:0|checked(e.length),r=createBuffer(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function fromArrayBuffer(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),n.__proto__=Buffer.prototype,n}function fromObject(e){if(Buffer.isBuffer(e)){var t=0|checked(e.length),r=createBuffer(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}return void 0!==e.length?"number"!=typeof e.length||numberIsNaN(e.length)?createBuffer(0):fromArrayLike(e):"Buffer"===e.type&&Array.isArray(e.data)?fromArrayLike(e.data):void 0}function checked(e){if(e>=K_MAX_LENGTH)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes");return 0|e}function SlowBuffer(e){return+e!=e&&(e=0),Buffer.alloc(+e)}function byteLength(e,t){if(Buffer.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||isInstance(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var f=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(f)return n?-1:utf8ToBytes(e).length;t=(""+t).toLowerCase(),f=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if(r>>>=0,t>>>=0,r<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,f){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,numberIsNaN(r)&&(r=f?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(f)return-1;r=e.length-1}else if(r<0){if(!f)return-1;r=0}if("string"==typeof t&&(t=Buffer.from(t,n)),Buffer.isBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,f);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?f?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,f);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,f){function i(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}var o=1,u=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,u/=2,s/=2,r/=2}var a;if(f){var h=-1;for(a=r;a<u;a++)if(i(e,a)===i(t,-1===h?0:a-h)){if(-1===h&&(h=a),a-h+1===s)return h*o}else-1!==h&&(a-=a-h),h=-1}else for(r+s>u&&(r=u-s),a=r;a>=0;a--){for(var c=!0,l=0;l<s;l++)if(i(e,a+l)!==i(t,l)){c=!1;break}if(c)return a}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var f=e.length-r;n?(n=Number(n))>f&&(n=f):n=f;var i=t.length;n>i/2&&(n=i/2);for(var o=0;o<n;++o){var u=parseInt(t.substr(2*o,2),16);if(numberIsNaN(u))return o;e[r+o]=u}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?base64.fromByteArray(e):base64.fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],f=t;f<r;){var i=e[f],o=null,u=i>239?4:i>223?3:i>191?2:1;if(f+u<=r){var s,a,h,c;switch(u){case 1:i<128&&(o=i);break;case 2:s=e[f+1],128==(192&s)&&(c=(31&i)<<6|63&s)>127&&(o=c);break;case 3:s=e[f+1],a=e[f+2],128==(192&s)&&128==(192&a)&&(c=(15&i)<<12|(63&s)<<6|63&a)>2047&&(c<55296||c>57343)&&(o=c);break;case 4:s=e[f+1],a=e[f+2],h=e[f+3],128==(192&s)&&128==(192&a)&&128==(192&h)&&(c=(15&i)<<18|(63&s)<<12|(63&a)<<6|63&h)>65535&&c<1114112&&(o=c)}}null===o?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),f+=u}return decodeCodePointsArray(n)}function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(127&e[f]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(e[f]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var f="",i=t;i<r;++i)f+=toHex(e[i]);return f}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),f="",i=0;i<n.length;i+=2)f+=String.fromCharCode(n[i]+256*n[i+1]);return f}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,f,i){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>f||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function checkIEEE754(e,t,r,n,f,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(e,t,r,n,52,8),r+8}function base64clean(e){if(e=e.split("=")[0],e=e.trim().replace(INVALID_BASE64_RE,""),e.length<2)return"";for(;e.length%4!=0;)e+="=";return e}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){t=t||1/0;for(var r,n=e.length,f=null,i=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!f){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}f=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),f=r;continue}r=65536+(f-55296<<10|r-56320)}else f&&(t-=3)>-1&&i.push(239,191,189);if(f=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,f,i=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,f=r%256,i.push(f),i.push(n);return i}function base64ToBytes(e){return base64.toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var f=0;f<n&&!(f+r>=t.length||f>=e.length);++f)t[f+r]=e[f];return f}function isInstance(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function numberIsNaN(e){return e!==e}var base64=require("base64-js"),ieee754=require("ieee754");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports.kMaxLength=K_MAX_LENGTH,Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport(),Buffer.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Buffer.prototype,"parent",{enumerable:!0,get:function(){if(Buffer.isBuffer(this))return this.buffer}}),Object.defineProperty(Buffer.prototype,"offset",{enumerable:!0,get:function(){if(Buffer.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),Buffer.poolSize=8192,Buffer.from=function(e,t,r){return from(e,t,r)},Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,Buffer.alloc=function(e,t,r){return alloc(e,t,r)},Buffer.allocUnsafe=function(e){return allocUnsafe(e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)},Buffer.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Buffer.prototype},Buffer.compare=function(e,t){if(isInstance(e,Uint8Array)&&(e=Buffer.from(e,e.offset,e.byteLength)),isInstance(t,Uint8Array)&&(t=Buffer.from(t,t.offset,t.byteLength)),!Buffer.isBuffer(e)||!Buffer.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var r=e.length,n=t.length,f=0,i=Math.min(r,n);f<i;++f)if(e[f]!==t[f]){r=e[f],n=t[f];break}return r<n?-1:n<r?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer.allocUnsafe(t),f=0;for(r=0;r<e.length;++r){var i=e[r];if(isInstance(i,Uint8Array)&&(i=Buffer.from(i)),!Buffer.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,f),f+=i.length}return n},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.toLocaleString=Buffer.prototype.toString,Buffer.prototype.equals=function(e){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=exports.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,r,n,f){if(isInstance(e,Uint8Array)&&(e=Buffer.from(e,e.offset,e.byteLength)),!Buffer.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===f&&(f=this.length),t<0||r>e.length||n<0||f>this.length)throw new RangeError("out of range index");if(n>=f&&t>=r)return 0;if(n>=f)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,f>>>=0,this===e)return 0;for(var i=f-n,o=r-t,u=Math.min(i,o),s=this.slice(n,f),a=e.slice(t,r),h=0;h<u;++h)if(s[h]!==a[h]){i=s[h],o=a[h];break}return i<o?-1:o<i?1:0},Buffer.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},Buffer.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function(e,t){var r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=Buffer.prototype,n},Buffer.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return n},Buffer.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],f=1;t>0&&(f*=256);)n+=this[e+--t]*f;return n},Buffer.prototype.readUInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return f*=128,n>=f&&(n-=Math.pow(2,8*t)),n},Buffer.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=t,f=1,i=this[e+--n];n>0&&(f*=256);)i+=this[e+--n]*f;return f*=128,i>=f&&(i-=Math.pow(2,8*t)),i},Buffer.prototype.readInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer.prototype.readInt16LE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=1,i=0;for(this[t]=255&e;++i<r&&(f*=256);)this[t+i]=e/f&255;return t+r},Buffer.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=r-1,i=1;for(this[t+f]=255&e;--f>=0&&(i*=256);)this[t+f]=e/i&255;return t+r},Buffer.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,255,0),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Buffer.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=0,o=1,u=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===u&&0!==this[t+i-1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=r-1,o=1,u=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===u&&0!==this[t+i+1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Buffer.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer.prototype.copy=function(e,t,r,n){if(!Buffer.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var f=n-r;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,r,n);else if(this===e&&r<t&&t<n)for(var i=f-1;i>=0;--i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,n),t);return f},Buffer.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var f=e.charCodeAt(0);("utf8"===n&&f<128||"latin1"===n)&&(e=f)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var i;if("number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var o=Buffer.isBuffer(e)?e:Buffer.from(e,n),u=o.length;if(0===u)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%u]}return this};var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;

}).call(this)}).call(this,require("buffer").Buffer)

},{"base64-js":2,"buffer":3,"ieee754":5}],4:[function(require,module,exports){
"use strict";function ProcessEmitWarning(e){console&&console.warn&&console.warn(e)}function EventEmitter(){EventEmitter.init.call(this)}function checkListener(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function _getMaxListeners(e){return void 0===e._maxListeners?EventEmitter.defaultMaxListeners:e._maxListeners}function _addListener(e,t,n,r){var i,o,s;if(checkListener(n),o=e._events,void 0===o?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=_getMaxListeners(e))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,ProcessEmitWarning(u)}return e}function onceWrapper(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _onceWrap(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=onceWrapper.bind(r);return i.listener=n,r.wrapFn=i,i}function _listeners(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?unwrapListeners(i):arrayClone(i,i.length)}function listenerCount(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function arrayClone(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function spliceOne(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function unwrapListeners(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}function once(e,t){return new Promise(function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}eventTargetAgnosticAddListener(e,t,o,{once:!0}),"error"!==t&&addErrorHandlerIfEventEmitter(e,i,{once:!0})})}function addErrorHandlerIfEventEmitter(e,t,n){"function"==typeof e.on&&eventTargetAgnosticAddListener(e,"error",t,n)}function eventTargetAgnosticAddListener(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,function i(o){r.once&&e.removeEventListener(t,i),n(o)})}}var R="object"==typeof Reflect?Reflect:null,ReflectApply=R&&"function"==typeof R.apply?R.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)},ReflectOwnKeys;ReflectOwnKeys=R&&"function"==typeof R.ownKeys?R.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var NumberIsNaN=Number.isNaN||function(e){return e!==e};module.exports=EventEmitter,module.exports.once=once,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._eventsCount=0,EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(e){if("number"!=typeof e||e<0||NumberIsNaN(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");defaultMaxListeners=e}}),EventEmitter.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||NumberIsNaN(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},EventEmitter.prototype.getMaxListeners=function(){return _getMaxListeners(this)},EventEmitter.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)ReflectApply(u,this,t);else for(var f=u.length,v=arrayClone(u,f),n=0;n<f;++n)ReflectApply(v[n],this,t);return!0},EventEmitter.prototype.addListener=function(e,t){return _addListener(this,e,t,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function(e,t){return _addListener(this,e,t,!0)},EventEmitter.prototype.once=function(e,t){return checkListener(t),this.on(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.prependOnceListener=function(e,t){return checkListener(t),this.prependListener(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.removeListener=function(e,t){var n,r,i,o,s;if(checkListener(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():spliceOne(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},EventEmitter.prototype.listeners=function(e){return _listeners(this,e,!0)},EventEmitter.prototype.rawListeners=function(e){return _listeners(this,e,!1)},EventEmitter.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):listenerCount.call(e,t)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]};

},{}],5:[function(require,module,exports){
exports.read=function(a,o,t,r,h){var M,p,w=8*h-r-1,f=(1<<w)-1,e=f>>1,i=-7,N=t?h-1:0,n=t?-1:1,s=a[o+N];for(N+=n,M=s&(1<<-i)-1,s>>=-i,i+=w;i>0;M=256*M+a[o+N],N+=n,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+a[o+N],N+=n,i-=8);if(0===M)M=1-e;else{if(M===f)return p?NaN:1/0*(s?-1:1);p+=Math.pow(2,r),M-=e}return(s?-1:1)*p*Math.pow(2,M-r)},exports.write=function(a,o,t,r,h,M){var p,w,f,e=8*M-h-1,i=(1<<e)-1,N=i>>1,n=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,s=r?0:M-1,u=r?1:-1,l=o<0||0===o&&1/o<0?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(w=isNaN(o)?1:0,p=i):(p=Math.floor(Math.log(o)/Math.LN2),o*(f=Math.pow(2,-p))<1&&(p--,f*=2),o+=p+N>=1?n/f:n*Math.pow(2,1-N),o*f>=2&&(p++,f/=2),p+N>=i?(w=0,p=i):p+N>=1?(w=(o*f-1)*Math.pow(2,h),p+=N):(w=o*Math.pow(2,N-1)*Math.pow(2,h),p=0));h>=8;a[t+s]=255&w,s+=u,w/=256,h-=8);for(p=p<<h|w,e+=h;e>0;a[t+s]=255&p,s+=u,p/=256,e-=8);a[t+s-u]|=128*l};

},{}],6:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(e){return[]},process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],7:[function(require,module,exports){
"use strict";function hasOwnProperty(r,e){return Object.prototype.hasOwnProperty.call(r,e)}module.exports=function(r,e,t,n){e=e||"&",t=t||"=";var o={};if("string"!=typeof r||0===r.length)return o;var a=/\+/g;r=r.split(e);var s=1e3;n&&"number"==typeof n.maxKeys&&(s=n.maxKeys);var p=r.length;s>0&&p>s&&(p=s);for(var y=0;y<p;++y){var u,c,i,l,f=r[y].replace(a,"%20"),v=f.indexOf(t);v>=0?(u=f.substr(0,v),c=f.substr(v+1)):(u=f,c=""),i=decodeURIComponent(u),l=decodeURIComponent(c),hasOwnProperty(o,i)?isArray(o[i])?o[i].push(l):o[i]=[o[i],l]:o[i]=l}return o};var isArray=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)};

},{}],8:[function(require,module,exports){
"use strict";function map(r,e){if(r.map)return r.map(e);for(var t=[],n=0;n<r.length;n++)t.push(e(r[n],n));return t}var stringifyPrimitive=function(r){switch(typeof r){case"string":return r;case"boolean":return r?"true":"false";case"number":return isFinite(r)?r:"";default:return""}};module.exports=function(r,e,t,n){return e=e||"&",t=t||"=",null===r&&(r=void 0),"object"==typeof r?map(objectKeys(r),function(n){var i=encodeURIComponent(stringifyPrimitive(n))+t;return isArray(r[n])?map(r[n],function(r){return i+encodeURIComponent(stringifyPrimitive(r))}).join(e):i+encodeURIComponent(stringifyPrimitive(r[n]))}).join(e):n?encodeURIComponent(stringifyPrimitive(n))+t+encodeURIComponent(stringifyPrimitive(r)):""};var isArray=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)},objectKeys=Object.keys||function(r){var e=[];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&e.push(t);return e};

},{}],9:[function(require,module,exports){
"use strict";exports.decode=exports.parse=require("./decode"),exports.encode=exports.stringify=require("./encode");

},{"./decode":7,"./encode":8}],10:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
function Timeout(e,t){this._id=e,this._clearFn=t}var nextTick=require("process/browser.js").nextTick,apply=Function.prototype.apply,slice=Array.prototype.slice,immediateIds={},nextImmediateId=0;exports.setTimeout=function(){return new Timeout(apply.call(setTimeout,window,arguments),clearTimeout)},exports.setInterval=function(){return new Timeout(apply.call(setInterval,window,arguments),clearInterval)},exports.clearTimeout=exports.clearInterval=function(e){e.close()},Timeout.prototype.unref=Timeout.prototype.ref=function(){},Timeout.prototype.close=function(){this._clearFn.call(window,this._id)},exports.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},exports.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},exports._unrefActive=exports.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},exports.setImmediate="function"==typeof setImmediate?setImmediate:function(e){var t=nextImmediateId++,i=!(arguments.length<2)&&slice.call(arguments,1);return immediateIds[t]=!0,nextTick(function(){immediateIds[t]&&(i?e.apply(null,i):e.call(null),exports.clearImmediate(t))}),t},exports.clearImmediate="function"==typeof clearImmediate?clearImmediate:function(e){delete immediateIds[e]};

}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":6,"timers":10}],11:[function(require,module,exports){
"use strict";var Info=function(t,e){var i=document.title,s=$(e.appendCredits);e.appendCredits&&$(".credits").append(s),e.title&&$("#info-title").text(e.title),e.subtitle&&$("#info-subtitle").text(e.subtitle),e.titleCss&&$("#info-title").css(e.titleCss),e.subtitleCss&&$("#info-subtitle").css(e.subtitleCss),e.documentTitle&&(document.title=e.documentTitle),e.showArrowNext&&$(".arrow-next").show(),$("#info").show(),t.emitter.on("destroy",function(){document.title=i,$("#info-title").text(""),$("#info-subtitle").text(""),$("#info-title").attr("style",""),$("#info-subtitle").attr("style",""),$(".arrow-next").hide(),$("#info").hide(),s.remove()})};module.exports=Info;

},{}],12:[function(require,module,exports){
"use strict";var Stars=function(t){this.poem=t,this.object=null,this.count=3e4,this.depth=5e3,this.minDepth=700,this.color=11184810,this.addObject()};module.exports=Stars,Stars.prototype={generateGeometry:function(){var t,e,o,i,h,s;s=new THREE.Geometry;for(var r=0;r<this.count;r++)t=Math.random()*this.depth+this.minDepth,e=2*Math.random()*Math.PI,o=Math.cos(e)*t,h=Math.sin(e)*t,i=(.5-Math.random())*this.depth,s.vertices.push(new THREE.Vector3(o,i,h));return s},addObject:function(){var t;t=this.generateGeometry(),this.object=new THREE.PointCloud(t,new THREE.PointCloudMaterial({size:3*this.poem.ratio,color:this.color,fog:!1})),this.poem.scene.add(this.object)}};

},{}],13:[function(require,module,exports){
"use strict";function setupTexture(e,t,n){var o=new Image,i=new THREE.Texture(o);return o.src="assets/images/cloud1024.png",$("body").append(o),i.wrapS=THREE.RepeatWrapping,i.wrapT=THREE.RepeatWrapping,$(o).on("load",function(){n.needsUpdate=!0,i.needsUpdate=!0}),t.add(e),i}var Clouds=function(e,t){var n=_.extend({width:500,offset:new THREE.Vector2(1,1),color:new THREE.Vector4(.5,1,.7,1),height:-200,rotation:Math.PI/2},t),o=new THREE.PlaneGeometry(n.width,n.width),i=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvUv = uv;\n\t\n\tgl_Position = projectionMatrix *\n\t\tmodelViewMatrix *\n\t\tvec4( position, 1.0);\n\t\t\n}",fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform vec4 color;\nuniform vec2 offset;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvoid main() {\n\t\n\tvec4 texel = \n\t\ttexture2D( texture, vUv * 0.1 + ( offset + time * 0.00001) * offset ) +\n\t\ttexture2D( texture, vUv * 0.22 + ( offset + time * 0.0000055) * offset );\n\t\n\tfloat edges = 0.5 - length(vUv - 0.5);\n\t\n  gl_FragColor = color * edges * vec4( 1.0, 1.0, 1.0, texel.w * texel.w * 2.5 );\n\t\n}",transparent:!0,blending:THREE.AdditiveBlending,side:THREE.DoubleSide,depthTest:!1,uniforms:{time:{type:"f",value:0},texture:{type:"t",value:null},offset:{type:"v2",value:n.offset},color:{type:"v4",value:n.color}},attributes:{}}),r=new THREE.Mesh(o,i);r.rotation.x=n.rotation,r.position.y=n.height,r.scale.multiplyScalar(10),i.uniforms.texture.value=setupTexture(r,e.scene,i),e.emitter.on("update",function(t){var n=e.camera.object.position;i.uniforms.time.value=t.elapsed,r.position.set(n.x,r.position.y,n.z)})};module.exports=Clouds;

},{}],14:[function(require,module,exports){
"use strict";var Sky=function(n,e){var t=_.extend({width:5e3},e),i=new THREE.SphereGeometry(t.width,64,30),o=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform float time;\nvarying vec4 vColor;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289_1_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289_1_0(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute_1_1(vec4 x) {\n     return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nfloat permute_1_1(float x) {\n     return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_2(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt_1_2(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4_1_3(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise_1_4(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289_1_0(i);\n  float j0 = permute_1_1( permute_1_1( permute_1_1( permute_1_1(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute_1_1( permute_1_1( permute_1_1( permute_1_1 (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0_1_5 = grad4_1_3(j0,   ip);\n  vec4 p1 = grad4_1_3(j1.x, ip);\n  vec4 p2 = grad4_1_3(j1.y, ip);\n  vec4 p3 = grad4_1_3(j1.z, ip);\n  vec4 p4 = grad4_1_3(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt_1_2(vec4(dot(p0_1_5,p0_1_5), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_5 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt_1_2(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0_1_5, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n\n\nvec3 hsv2rgb_2_6(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\nfloat inRange( in float value, in float start, in float stop ) {\n\t\n\treturn min( 1.0, max( 0.0,\n\t\t(value - start) / (stop - start)\n\t));\n\t\n}\n\nvec4 calculateColor( in vec2 uv, in vec3 position ) {\n\t\n\tfloat gradient =\n\t\tinRange( uv.y, 0.55, 0.7 ) +\n\t\tinRange( uv.y, 0.45, 0.3 ) ;\n\t\n\tfloat noise = snoise_1_4( vec4( position * 0.03, time * 0.0001 ) );\n\t\n\tvec3 color = hsv2rgb_2_6(vec3(\n\t\tmax(0.0, noise) * 0.2 + 0.4,\n\t\t1.0,\n\t\t1.0\n\t));\n\t\n\treturn vec4(\n\t\tcolor,\n\t\tnoise * gradient\n\t);\n\t\n}\n\nvoid main() {\n\t\n\tvColor = calculateColor( uv, position );\n\t\n\tgl_Position = projectionMatrix *\n\t\tmodelViewMatrix *\n\t\tvec4( position, 1.0);\n\t\t\n}",fragmentShader:"#define GLSLIFY 1\nvarying vec4 vColor;\n\n// float remap( in float value, in float start, in float stop ) {\n// \treturn start + value * ( stop - start );\n// }\n\nvoid main() {\n\t\n\tgl_FragColor = vColor;\n\t\n}",side:THREE.BackSide,transparent:!0,depthTest:!1,uniforms:{time:{type:"f",value:0}},attributes:{}}),r=new THREE.Mesh(i,o);n.scene.add(r),n.emitter.on("update",function(e){o.uniforms.time.value=e.elapsed,r.position.copy(n.camera.object.position)})};module.exports=Sky;

},{}],15:[function(require,module,exports){
"use strict";function _createMaterial(n,e){return new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform float elapsed;\nuniform float uRange;\nattribute float size;\nattribute float aOffset;\n\nvarying float vOffset;\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1_1(vec4 x) {\n     return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_2(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1_3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_1_4 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_1_5 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_1_5;\n  vec3 i1 = min( g_1_5.xyz, l.zxy );\n  vec3 i2 = max( g_1_5.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_1_4.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1_0(i);\n  vec4 p = permute_1_1( permute_1_1( permute_1_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_1_4.wyz - D_1_4.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_1_6 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_1_7 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_1_6.xy,h.z);\n  vec3 p3 = vec3(a1_1_6.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_1_2(vec4(dot(p0_1_7,p0_1_7), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_7 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_1_7,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvoid main() {\n\n\t// vec3 movement = vec3(0.0, elapsed * 0.001, 0.0);\n\tvec3 movement = vec3(\n\t\tsin( elapsed * 0.002 * aOffset) * uRange * 0.003,\n\t\telapsed * (-uRange / 100000.0 - uRange / 100000.0 * aOffset),\n\t\tcos( elapsed * 0.002 * aOffset ) * uRange * 0.003\n\t);\n\t\n\tvec3 range = vec3(uRange, uRange * 0.3, uRange);\n\t\n\tvec3 cameraOffset = cameraPosition - range;\n\t\n\tvec3 moduloPosition = mod( position + movement - cameraOffset, range * 2.0 ) + cameraOffset;\n\tvec4 mvPosition = modelViewMatrix * vec4( moduloPosition, 1.0 );\n\t\n\tvOffset = aOffset;\n\t\n\tgl_PointSize = size * ( uRange / (length( mvPosition.xyz ) + 1.0) );\n\tgl_Position = projectionMatrix * mvPosition;\n\n}",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform float elapsed;\nvarying float vOffset;\n\nvec2 doModel(vec3 p);\n\n// Originally sourced from https://www.shadertoy.com/view/ldfSWs\n// Thank you Iñigo :)\n\nvec2 calcRayIntersection_3_0(vec3 rayOrigin, vec3 rayDir, float maxd, float precis) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 30; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection_3_0(vec3 rayOrigin, vec3 rayDir) {\n  return calcRayIntersection_3_0(rayOrigin, rayDir, 20.0, 0.001);\n}\n\n\n\n// Originally sourced from https://www.shadertoy.com/view/ldfSWs\n// Thank you Iñigo :)\n\nvec3 calcNormal_5_1(vec3 pos, float eps) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps ).x +\n                    v2 * doModel( pos + v2*eps ).x +\n                    v3 * doModel( pos + v3*eps ).x +\n                    v4 * doModel( pos + v4*eps ).x );\n}\n\nvec3 calcNormal_5_1(vec3 pos) {\n  return calcNormal_5_1(pos, 0.002);\n}\n\n\n\nvec2 squareFrame_6_2(vec2 screenSize) {\n  vec2 position = 2.0 * (gl_FragCoord.xy / screenSize.xy) - 1.0;\n  position.x *= screenSize.x / screenSize.y;\n  return position;\n}\n\nvec2 squareFrame_6_2(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy / screenSize.xy) - 1.0;\n  position.x *= screenSize.x / screenSize.y;\n  return position;\n}\n\n\n\nmat3 calcLookAtMatrix_7_3(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\n\n\n\nvec3 getRay_4_4(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay_4_4(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix_7_3(origin, target, 0.0);\n  return getRay_4_4(camMat, screenPos, lensLength);\n}\n\n\n\n\nvoid orbitCamera_2_5(\n  in float camAngle,\n  in float camHeight,\n  in float camDistance,\n  in vec2 screenResolution,\n  out vec3 rayOrigin,\n  out vec3 rayDirection\n) {\n  vec2 screenPos = squareFrame_6_2(screenResolution);\n  vec3 rayTarget = vec3(0.0);\n\n  rayOrigin = vec3(\n    camDistance * sin(camAngle),\n    camHeight,\n    camDistance * cos(camAngle)\n  );\n\n  rayDirection = getRay_4_4(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289_1_6(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289_1_6(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute_1_7(vec4 x) {\n     return mod289_1_6(((x*34.0)+1.0)*x);\n}\n\nfloat permute_1_7(float x) {\n     return mod289_1_6(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_8(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt_1_8(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4_1_9(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise_1_10(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289_1_6(i);\n  float j0 = permute_1_7( permute_1_7( permute_1_7( permute_1_7(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute_1_7( permute_1_7( permute_1_7( permute_1_7 (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0_1_11 = grad4_1_9(j0,   ip);\n  vec4 p1 = grad4_1_9(j1.x, ip);\n  vec4 p2 = grad4_1_9(j1.y, ip);\n  vec4 p3 = grad4_1_9(j1.z, ip);\n  vec4 p4 = grad4_1_9(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt_1_8(vec4(dot(p0_1_11,p0_1_11), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_11 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt_1_8(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0_1_11, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n\n\n\n\nvec2 doModel(vec3 p) {\n\tfloat r  = 1.0 + snoise_1_10(vec4(p, elapsed / 1000.0)) * 0.25;\n\tfloat d  = length(p) - r;\n\tfloat id = 0.0;\n\n\treturn vec2(d, id);\n}\n\nvec2 squareFrame(vec2 screenSize, vec2 screenPosition) {\n\tvec2 position = 2.0 * (screenPosition.xy / screenSize.xy) - 1.0;\n\tposition.x *= screenSize.x / screenSize.y;\n\treturn position;\n}\n\n\nvoid orbitCamera(\n\tin float camAngle,\n\tin float camHeight,\n\tin float camDistance,\n\tin vec2 screenResolution,\n\tin vec2 screenPosition,\n\tout vec3 rayOrigin,\n\tout vec3 rayDirection\n) {\n\tvec2 screenPos = squareFrame(screenResolution, screenPosition);\n\tvec3 rayTarget = vec3(0.0);\n \n\trayOrigin = vec3(\n\t\tcamDistance * sin(camAngle),\n\t\tcamHeight,\n\t\tcamDistance * cos(camAngle)\n\t);\n \n\trayDirection = getRay_4_4(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\n\nvoid main() {\n\tvec3 color = vec3(0.0);\n\tvec3 rayOrigin, rayDirection;\n\n\tfloat rotation = elapsed / 1000.0;\n\tfloat height   = 0.0;\n\tfloat dist     = 3.0;\n\tvec2 iResolution = vec2( 1.0, 1.0 );\n\t\n\torbitCamera(rotation + vOffset * 100.0, height, dist, iResolution, gl_PointCoord, rayOrigin, rayDirection);\n\n\tvec2 t = calcRayIntersection_3_0(rayOrigin, rayDirection);\n\tif (t.x > -0.5) {\n\t\tvec3 pos = rayOrigin + rayDirection * t.x;\n\t\tvec3 nor = calcNormal_5_1(pos);\n\n\t\tcolor = nor * 0.5 + 0.5;\n\t}\n\n\tgl_FragColor.rgb = color;\n\tgl_FragColor.a\t = length(color) * 10.0;\n}\n\n// Old shader:\n//\n// uniform vec3 color;\n// uniform sampler2D texture;\n// uniform float elapsed;\n//\n// varying float vAlpha;\n//\n// void main() {\n//\n// \tgl_FragColor = vec4(color, 1.0);\n//\n// }\n// ",depthTest:!1,blending:THREE.AdditiveBlending,transparent:!0,uniforms:{elapsed:{type:"f",value:n},uRange:{type:"f",value:e}},attributes:{size:{type:"f",value:[]},aOffset:{type:"f",value:[]}}})}function _createGeometry(n,e,t,r,o){for(var i=new THREE.BufferGeometry,a=new Float32Array(3*e),c=new Float32Array(e),s=new Float32Array(e),v=0;v<e;v++)a[3*v+0]=Random.range(-t,t),a[3*v+1]=.3*Random.range(-t,t),a[3*v+2]=Random.range(-t,t),c[v]=Random.range(r[0],r[1])*o,s[v]=Random.range(0,1);return i.addAttribute("position",new THREE.BufferAttribute(a,3)),i.addAttribute("size",new THREE.BufferAttribute(c,1)),i.addAttribute("aOffset",new THREE.BufferAttribute(s,1)),i}function _createMeshAndStart(n,e,t){var r=new THREE.PointCloud(e,t);r.frustumCulled=!1;LoadTexture("assets/images/bokeh.png",t.uniforms.texture,"value").then(function(){n.scene.add(r),n.emitter.on("update",_updateFn(n,r))});return r}function _updateFn(n,e){return function(n){e.material.uniforms.elapsed.value=n.elapsed}}var LoadTexture=require("../../../utils/loadTexture"),Random=require("../../../utils/random");module.exports=function(n,e){var t=_.extend({count:1e3,color:new THREE.Color(7864319),range:300,sizeRange:[10,20]},e),r=_createMaterial(t.color,t.range),o=_createGeometry(r,t.count,t.range,t.sizeRange,n.ratio);_createMeshAndStart(n,o,r);return{}};

},{"../../../utils/loadTexture":77,"../../../utils/random":78}],16:[function(require,module,exports){
"use strict";function _createMaterial(e){return new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform float elapsed;\n\nattribute float size;\nattribute float opacity;\n\nvarying float vAlpha;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1_1(vec4 x) {\n     return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_2(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1_3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_1_4 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_1_5 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_1_5;\n  vec3 i1 = min( g_1_5.xyz, l.zxy );\n  vec3 i2 = max( g_1_5.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_1_4.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1_0(i);\n  vec4 p = permute_1_1( permute_1_1( permute_1_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_1_4.wyz - D_1_4.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_1_6 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_1_7 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_1_6.xy,h.z);\n  vec3 p3 = vec3(a1_1_6.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_1_2(vec4(dot(p0_1_7,p0_1_7), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_7 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_1_7,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvoid main() {\n\n\tvAlpha = opacity;\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\n\tgl_PointSize = 100.0 * size / length( mvPosition.xyz );\n\t\n\tgl_Position = projectionMatrix * mvPosition;\n}",fragmentShader:"#define GLSLIFY 1\nuniform vec3 color;\nuniform sampler2D texture;\n// uniform float elapsed;\n\nvarying float vAlpha;\n\nvoid main() {\n\n\tgl_FragColor = vec4(color, vAlpha) * texture2D( texture, gl_PointCoord );\n\t\n}",depthTest:!1,blending:THREE.AdditiveBlending,transparent:!0,uniforms:{elapsed:{type:"f"},texture:{type:"t"},color:{type:"c",value:new THREE.Color(e)}},attributes:{size:{type:"f",value:[]},opacity:{type:"f",value:[]}}})}function _createGeometry(e,n){for(var t=new THREE.BufferGeometry,r=new Float32Array(3*e.segmentsCount),o=new Float32Array(e.segmentsCount),i=new Float32Array(e.segmentsCount),a=0;a<e.segmentsCount;a++){var s=a/e.segmentsCount;r[3*a+0]=0,r[3*a+1]=s*e.lightLength,r[3*a+2]=0,o[a]=10*n,i[a]=e.brightness*Math.pow(1-s,e.falloff)}return t.addAttribute("position",new THREE.BufferAttribute(r,3)),t.addAttribute("size",new THREE.BufferAttribute(o,1)),t.addAttribute("opacity",new THREE.BufferAttribute(i,1)),t}function _createMeshPromise(e,n,t,r){var o="assets/images/bokeh.png";return LoadTexture(o,r.uniforms.texture,"value").then(function(){var o=new THREE.PointCloud(t,r);return o.position.fromArray(n.position),o.frustumCulled=!1,o.name="lightBeam",e.scene.add(o),o}).then(null,function(){console.log("Could not load the texture for the lightbeam",o)})}function _sizeLightbeamFn(e,n){var t;return function(){if(n.sizeRange!==t){for(var r=0;r<e.array.length;r++){var o=r/e.array.length;e.array[r]=Lerp(n.sizeRange[0],n.sizeRange[1],o)}t=n.sizeRange,e.needsUpdate=!0}}}function _updateFn(e,n,t,r){var o=_sizeLightbeamFn(n.geometry.attributes.size,r),i=_undulateFn(n,t);return function(e){o(e),i(e),n.material.uniforms.elapsed.value=e.elapsed}}function _undulateFn(e,n){var t=n.undulation,r=Random.range(0,2*Math.PI),o=Random.range(0,2*Math.PI);return t?function(n){var i=t.xAmount*Math.sin(r+n.elapsed*t.xSpeed),a=t.zAmount*Math.sin(o+n.elapsed*t.zSpeed);e.rotation.set(i,0,a)}:function(){}}var LoadTexture=require("../../../utils/loadTexture"),Random=require("../../../utils/random"),Lerp=require("lerp");module.exports=function(e,n){var t=_.extend({position:[0,-100,0],segmentsCount:150,lightLength:200,brightness:2,color:13386769,sizeRange:[50,500],falloff:3,undulation:{xAmount:.1*Math.PI,zAmount:.1*Math.PI,xSpeed:8e-4,zSpeed:6e-4}},n),r={sizeRange:_.clone(t.sizeRange)},o=_createMaterial(t.color),i=_createGeometry(t,e.ratio);return _createMeshPromise(e,t,i,o).then(function(n){return e.emitter.on("update",_updateFn(e,n,t,r)),{mesh:n}})};

},{"../../../utils/loadTexture":77,"../../../utils/random":78,"lerp":138}],17:[function(require,module,exports){
"use strict";var LoadTexture=require("../../../utils/loadTexture"),Random=require("../../../utils/random"),internals={createMaterial:function(e,n){return new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform float elapsed;\nuniform float uRange;\nattribute float size;\nattribute float aOffset;\nvarying float vAlpha;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1_1(vec4 x) {\n     return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_2(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1_3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_1_4 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_1_5 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_1_5;\n  vec3 i1 = min( g_1_5.xyz, l.zxy );\n  vec3 i2 = max( g_1_5.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_1_4.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1_0(i);\n  vec4 p = permute_1_1( permute_1_1( permute_1_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_1_4.wyz - D_1_4.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_1_6 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_1_7 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_1_6.xy,h.z);\n  vec3 p3 = vec3(a1_1_6.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_1_2(vec4(dot(p0_1_7,p0_1_7), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_7 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_1_7,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvoid main() {\n\n\t// vec3 movement = vec3(0.0, elapsed * 0.001, 0.0);\n\tvec3 movement = vec3(\n\t\tsin( elapsed * 0.002 * aOffset) * uRange * 0.003,\n\t\telapsed * (-uRange / 100000.0 - uRange / 100000.0 * aOffset),\n\t\tcos( elapsed * 0.002 * aOffset ) * uRange * 0.003\n\t);\n\t\n\tvec3 range = vec3(uRange, uRange * 0.3, uRange);\n\t\n\tvec3 cameraOffset = cameraPosition - range;\n\t\n\tvec3 moduloPosition = mod( position + movement - cameraOffset, range * 2.0 ) + cameraOffset;\n\tvec4 mvPosition = modelViewMatrix * vec4( moduloPosition, 1.0 );\n\t\n\tgl_PointSize = size * ( uRange / (length( mvPosition.xyz ) + 1.0) );\n\t\n\tfloat flicker = mix(0.6, 1.0, snoise_1_3( moduloPosition + elapsed * 0.0001 ));\n\t\n\tvAlpha = 0.5 * min(1.0, max(0.0,\n\t\t1.0 - (length( mvPosition.xyz ) / uRange)\n\t)) * flicker;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n}",fragmentShader:"#define GLSLIFY 1\nuniform vec3 color;\nuniform sampler2D texture;\nuniform float elapsed;\n\nvarying float vAlpha;\n\nvoid main() {\n\n\tgl_FragColor = vec4(color, vAlpha) * texture2D( texture, gl_PointCoord );\n\t\n}",blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0,uniforms:{elapsed:{type:"f"},texture:{type:"t"},color:{type:"c",value:e},uRange:{type:"f",value:n}},attributes:{position:{type:"v3"},size:{type:"f"},aOffset:{type:"f"}}})},createGeometry:function(e,n,t,r){for(var o=new THREE.BufferGeometry,a=new Float32Array(3*n),i=new Float32Array(n),s=new Float32Array(n),c=0;c<n;c++)a[3*c+0]=Random.range(-t,t),a[3*c+1]=.3*Random.range(-t,t),a[3*c+2]=Random.range(-t,t),i[c]=Random.range(r[0],r[1]),s[c]=Random.range(0,1);return o.addAttribute("position",new THREE.BufferAttribute(a,3)),o.addAttribute("size",new THREE.BufferAttribute(i,1)),o.addAttribute("aOffset",new THREE.BufferAttribute(s,1)),o},createMeshAndStart:function(e,n,t){var r=new THREE.PointCloud(n,t);r.frustumCulled=!1;LoadTexture("assets/images/bokeh.png",t.uniforms.texture,"value").then(function(){e.scene.add(r),e.emitter.on("update",internals.updateFn(e,r))});return r},updateFn:function(e,n){return function(e){n.material.uniforms.elapsed.value=e.elapsed}}};module.exports=function(e,n){var t=_.extend({count:3e3,color:new THREE.Color(7864319),range:300,sizeRange:[3,8]},n),r=internals.createMaterial(t.color,t.range),o=internals.createGeometry(r,t.count,t.range,t.sizeRange);internals.createMeshAndStart(e,o,r);return{}};

},{"../../../utils/loadTexture":77,"../../../utils/random":78}],18:[function(require,module,exports){
"use strict";var Eases=require("eases"),Lerp=require("lerp"),internals={updateObjectValue:function(e,n,t,r){var a=(e-t.start)/t.duration;r.obj[r.key]=Lerp(r.values[0],r.values[1],t.easing(a))},updateFunctionValue:function(e,n,t,r){var a=(e-t.start)/t.duration;r.obj[r.key](Lerp(r.values[0],r.values[1],t.easing(a)))},updateObjectValueOnce:function(e,n,t,r){t.start>=n&&t.start<e&&(r.obj[r.key]=r.values)},updateFunctionOnce:function(e,n,t,r){t.start>=n&&t.start<e&&r.obj[r.key](r.values)},updateFn:function(e,n,t,r){var a=0;return function(e){for(var i=e.elapsed/1e3*r%t,u=0;u<n.length;u++){var o=n[u];if(i>=o.start&&i<o.end)for(var s=0;s<o.actions.length;s++){var c=o.actions[s];c.update(i,a,o,c)}}a=i}},easingFn:function(e){var n,t;if(e&&!_.isString(e)||(n=e||"linear",t=Eases[n]),_.isFunction(e)&&(t=e,0!==t(0)||1!==t(1)))throw new Error("poem-animator received an easing function that didn't return a 0 and 1",e);if(!_.isFunction(t))throw new Error("poem-animator was not able to find the easing function "+e);return t},createAction:function(e,n){var t,r=n[0].split("."),a=r.slice(0,r.length-1),i=_.last(r),u=n[1],o=_.reduce(a,function(e,t){var r=e[t];if(!_.isObject(r))throw new Error("poem-animator was not able to create a reference",n);return r},e);return t=_.isFunction(o[i])?_.isArray(u)?internals.updateFunctionValue:internals.updateFunctionOnce:_.isArray(u)?internals.updateObjectValue:internals.updateObjectValueOnce,{obj:o,key:i,values:u,update:t}},calculateStartEndFn:function(){var e=0;return function(n){var t,r;return _.isNumber(n.start)?(t=n.start,r=t+n.duration):(t=e,r=t+n.duration,e=r),{start:t,end:r}}},isolateFilter:function(e){var n=_.find(e,function(e){return e.isolate});return n?[n]:e},startHereFilter:function(e){var n=_.find(e,function(e){return e.startHere});if(!n)return e;var t=e.indexOf(n);return e.slice(t)},processKeyframeConfig:function(e,n){var t=internals.calculateStartEndFn(),r=_.compose(internals.isolateFilter,internals.startHereFilter);return _.map(r(n),function(n){var r=t(n);return{start:r.start,end:r.end,duration:n.duration,easing:internals.easingFn(n.easing),actions:_.map(n.actions,_.partial(internals.createAction,e))}})},calcMaxTime:function(e,n){return n?_.reduce(e,function(e,n){return Math.max(e,n.end)},0):1/0}};module.exports=function(e,n){var t=_.extend({keyframes:[],loop:!0,speed:1},n);return e.emitter.on("promises",function(){var n=internals.processKeyframeConfig(e,t.keyframes),r=internals.calcMaxTime(n,t.loop);console.log(n),e.emitter.on("update",internals.updateFn(e,n,r,t.speed))}),{}};

},{"eases":117,"lerp":138}],19:[function(require,module,exports){
"use strict";var Camera=function(e,t,i){var o=_.extend({fov:50,near:3,far:1e4,aspectRatio:window.innerWidth/window.innerHeight},e);this.object=new THREE.PerspectiveCamera(o.fov,o.aspect,o.near,o.far),this.object.position.x=_.isNumber(e.x)?e.x:0,this.object.position.y=_.isNumber(e.y)?e.y:0,this.object.position.z=_.isNumber(e.z)?e.z:500,t.add(this.object),i.on("resize",this.resize.bind(this))};module.exports=Camera,Camera.prototype={resize:function(){this.object.aspect=window.innerWidth/window.innerHeight,this.object.updateProjectionMatrix()},setAndUpdateFov:function(e){this.object.fov=e,this.object.updateProjectionMatrix()}};

},{}],20:[function(require,module,exports){
"use strict";var OrbitControls=require("../../vendor/OrbitControls"),Controls=function(t,o){this.poem=t,this.properties=o,this.controls=new OrbitControls(this.poem.camera.object,this.poem.canvas),_.extend(this.controls,o),this.poem.emitter.on("update",this.controls.update.bind(this.controls))};module.exports=Controls;

},{"../../vendor/OrbitControls":81}],21:[function(require,module,exports){
"use strict";var OrbitControls=require("../../vendor/OrbitControls"),DeviceOrientationControls=require("../../vendor/DeviceOrientationControls"),_e;$(window).one("deviceorientation",function(t){_e=t});var Orientation=function(t){this.poem=t,this.camera=this.poem.camera.object,this.controls=new OrbitControls(this.camera,this.poem.canvas),this.controls.rotateUp(Math.PI/4),this.controls.target.set(this.camera.position.x+.1,this.camera.position.y,this.camera.position.z),this.controls.noZoom=!0,this.controls.noPan=!0,this.deviceOrientationHandler=this.setOrientationControls.bind(this),$(window).on("deviceorientation",this.deviceOrientationHandler),this.poem.emitter.on("update",this.update.bind(this)),this.poem.emitter.on("destroy",this.destroy.bind(this)),_e&&this.setOrientationControls(_e)};module.exports=Orientation,Orientation.prototype={setOrientationControls:function(t){this.controls=new DeviceOrientationControls(this.camera,!0),this.controls.connect(),this.controls.update(),$(window).off("deviceorientation",this.deviceOrientationHandler)},update:function(t){this.controls.update()},destroy:function(t){$(window).off("deviceorientation",this.deviceOrientationHandler)}};

},{"../../vendor/DeviceOrientationControls":80,"../../vendor/OrbitControls":81}],22:[function(require,module,exports){
"use strict";var internals={getXRotation:function(){var e=new THREE.Vector3;return function(n,o){return e.set(0,0,1),e.applyQuaternion(n),o&&e.applyQuaternion(o),-Math.atan2(e.y,e.z)}}(),getYRotation:function(){var e=new THREE.Vector3;return function(n,o){return e.set(1,0,0),e.applyQuaternion(n),o&&e.applyQuaternion(o),-Math.atan2(e.z,e.x)}}(),getZRotation:function(){var e=new THREE.Vector3;return function(n,o){return e.set(0,1,0),e.applyQuaternion(n),o&&e.applyQuaternion(o),-Math.atan2(e.x,e.y)}}(),mouseMove:function(e,n,o,t,a){return function(r){r.preventDefault();var u=r.pageX,i=r.pageY,s=n.x-u,m=n.y-i;o.mouseRotation.y+=s*t/(e.canvas.width/e.ratio),o.mouseRotation.x+=m*a/(e.canvas.height/e.ratio),e.canvas.width,e.ratio,e.canvas.width,e.ratio,n.x=u,n.y=i}},updateMouseQuaternion:function(){var e=new THREE.Vector3(1,0,0),n=new THREE.Vector3(0,1,0),o=new THREE.Quaternion,t=new THREE.Quaternion;return function(a,r){o.setFromAxisAngle(n,a.mouseRotation.y),t.setFromAxisAngle(e,a.mouseRotation.x),a.mouseQuaternion.copy(a.pathQuaternion),a.mouseQuaternion.multiply(o),a.mouseQuaternion.multiply(t),a.mouseRotation.multiplyScalar(.95*Math.min(1,r.unitDt))}}(),mouseUp:function(e,n){return function(){e.off("mouseleave",n.mouseUp),e.off("mouseup",n.mouseUp),e.off("mousemove",n.mouseMove)}},mouseDown:function(e,n,o){return function(t){t.preventDefault(),o.x=t.pageX,o.y=t.pageY,e.on("mouseleave",n.mouseUp),e.on("mouseup",n.mouseUp),e.on("mousemove",n.mouseMove)}},stopHandlers:function(e,n){return function(){e.off("mouseleave",n.mouseUp),e.off("mouseup",n.mouseUp),e.off("mousemove",n.mouseMove),e.off("mousedown",n.mouseDown)}},startMouseHandlers:function(e,n,o,t,a){var r={x:0,y:0},u=$(e.canvas),i={};o.mouseQuaternion.copy(n.quaternion);i.mouseMove=internals.mouseMove(e,r,o,t,a),i.mouseUp=internals.mouseUp(u,i),i.mouseDown=internals.mouseDown(u,i,r),u.on("mousedown",i.mouseDown),e.emitter.on("destroy",internals.stopHandlers(u,i))},updateCameraFn:function(e,n,o){var t=new THREE.Quaternion,a=e.cameraQuaternion,r=e.pathQuaternion,u=e.mouseQuaternion,i=e.rotation;return function(o){r.setFromEuler(i),internals.updateMouseQuaternion(e,o);var s=Math.max(0,THREE.Vector4.prototype.dot.call(r,u));t.copy(r).slerp(u,s),u.copy(t),a.slerp(t,n*o.unitDt)}},rotateAll:function(e,n){console.log("hello"),e.mouseRotation.set(0,0,0),e.rotation.setFromVector3(n),e.cameraQuaternion.setFromEuler(e.rotation),e.pathQuaternion.copy(e.cameraQuaternion),e.mouseQuaternion.copy(e.cameraQuaternion)}};module.exports=function(e,n){var o=_.extend({easing:.05,revertSpeed:2,speedX:1,speedY:.5},n),t={rotation:new THREE.Euler(0,0,0,"ZYX"),mouseRotation:new THREE.Vector3,pathQuaternion:new THREE.Quaternion,mouseQuaternion:new THREE.Quaternion,cameraQuaternion:e.camera.object.quaternion};return internals.startMouseHandlers(e,e.camera.object,t,o.speedX,o.speedY),e.emitter.on("update",internals.updateCameraFn(t,o.easing,o.revertSpeed)),{pathQuaternion:t.pathQuaternion,mouseQuaternion:t.mouseQuaternion,rotation:t.rotation,rotateAll:_.partial(internals.rotateAll,t)}};

},{}],23:[function(require,module,exports){
"use strict";var RotateAroundOrigin=function(o){var t=o.camera.object,i=t.position.y,n=t.position.z/2;o.emitter.on("update",function(e){o.grid.grid.rotation.y+=5e-5*e.dt,o.pointcloud.object&&(o.pointcloud.object.rotation.y+=5e-5*e.dt),t.position.y=i+200*Math.sin(5e-5*e.now*10),t.position.z=i+Math.sin(5e-5*e.now*10)*n})};module.exports=RotateAroundOrigin,RotateAroundOrigin.prototype={};

},{}],24:[function(require,module,exports){
"use strict";function _generatePositionFn(e){return function(e,t){e[t+0]=.01*Math.random()+3*(Math.cos(.02*t)+.01*Math.cos(.2*t)),e[t+1]=.01*Math.random()+3*(Math.sin(.02*t)+.01*Math.sin(.2*t)),e[t+2]=.01*Math.random()+2+2e-5*-t,e[t+0]+=.1*Math.sin(e[t+2])}}function _initPositioningPass(e,t){var n,r=new THREE.ShaderMaterial({vertexShader:PASS_THROUGH_VERT,fragmentShader:"#define GLSLIFY 1\nuniform float textureSideLength;\n\nuniform sampler2D textureCurrPosition;\nuniform sampler2D texturePrevPosition;\n\n\nvoid main() {\n\t\n\tvec2 uv = gl_FragCoord.xy / textureSideLength;\n\tvec4 currPosition = texture2D( textureCurrPosition, uv );\n\tvec4 prevPosition = texture2D( texturePrevPosition, uv );\n\n\tvec3 velocity = currPosition.xyz - prevPosition.xyz;\n\tvec3 toOrigin = normalize(-1.0 * currPosition.xyz);\n\tvec3 orientation = normalize( velocity );\n\tvec3 newOrientation = normalize( mix( toOrigin, orientation, 0.93 ) );\n\tnewOrientation += vec3(0.0001, 0.0001, 0.0001);\n\tfloat velocityLength = length( velocity );\n\tfloat toOriginLength = length( currPosition.xyz );\n\t\n\tgl_FragColor = vec4(\n\t\tcurrPosition.xyz + newOrientation * 0.02,\n\t\t1.0\n\t);\n}",uniforms:{elapsed:{type:"f"},textureSideLength:{type:"f"},textureCurrPosition:{type:"t"},texturePrevPosition:{type:"t"}},attributes:{}});r.name="Boids Position Shader";var i=e.addPass("position",{size:t.count,stride:3,uniformName:"textureCurrPosition",shaderMaterial:r,generateDatum:_generatePositionFn(t),preRender:function(t,r){e.copyTexture(t.outputRenderTarget,n,t.textureSideLength)}});return n=i.renderTargets[0].clone(),n.name="prevPositionTexture",r.uniforms.textureSideLength.value=i.textureSideLength,r.uniforms.texturePrevPosition.value=n,{pass:i,prevPositionTexture:n,shaderMaterial:r}}function _createRenderMaterial(e){var t=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform float elapsed;\n\nuniform float textureSideLength;\nuniform sampler2D textureCurrPosition;\nuniform sampler2D texturePrevPosition;\n\nattribute float attributeIndex;\n\nvarying float vLighting;\nvarying float vAttributeIndex;\n\nvoid main() {\n\t\n\tvec2 positionLookup = vec2(\n\t\tmod(attributeIndex, textureSideLength),\n\t\tfloor(attributeIndex / textureSideLength)\n\t) / textureSideLength;\n\t\n\tvec3 currPosition = texture2D( textureCurrPosition, positionLookup ).xyz;\n\tvec3 prevPosition = texture2D( texturePrevPosition, positionLookup ).xyz;\n\t\n\tfloat theta = log(attributeIndex) * 8.0;\n\tfloat r = attributeIndex * 2.0;\n\t\n\tvec4 offset = vec4( r * sin(theta), r * cos(theta), 0.0, 0.0 );\n\t\n\tvLighting = dot( normal, normalize(cameraPosition - position) );\n\tvLighting = vLighting * 0.5 + 0.5;\n\t\n\tvAttributeIndex = attributeIndex;\n\t\n\tgl_Position =\n\t\tprojectionMatrix *\n\t\tmodelViewMatrix * (\n\t\t\tvec4( position, 1.0 ) + offset * 0.0 + vec4( currPosition * 100.0, 0 )\n\t\t);\n}",fragmentShader:"#define GLSLIFY 1\nvarying float vLighting;\nvarying float vAttributeIndex;\n\nfloat hue2rgb_1_0(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb_1_1(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb_1_0(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb_1_0(f1, f2, hsl.x);\n        rgb.b = hue2rgb_1_0(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 hsl2rgb_1_1(float h, float s, float l) {\n    return hsl2rgb_1_1(vec3(h, s, l));\n}\n\n\n\nvoid main() {\n\t\n\tgl_FragColor = vec4(\n\t\thsl2rgb_1_1( mod(0.5 + vAttributeIndex * 0.000002, 1.0), 0.8, 0.5 ),\n\t\t1.0\n\t) * vLighting;\n}",uniforms:{elapsed:{type:"f",value:0},textureCurrPosition:{type:"t"},texturePrevPosition:{type:"t"},textureSideLength:{type:"f"}},attributes:{attributeIndex:{type:"f"}}});return t.name="Boids Render Shader",t}function _createGeometry(e){var t=new THREE.BufferGeometry;return t.fromGeometry(new THREE.OctahedronGeometry(3)),DuplicateBufferGeometry(t,e.count),t}function _initRenderingPass(e,t,n){var r=new THREE.Mesh(_createGeometry(e),_createRenderMaterial(e,n));return t.add(r),r}var CreateGpuProcessor=require("../../utils/gpu-processor/gpu-processor"),DuplicateBufferGeometry=require("../../utils/duplicate-buffer-geometry"),CopyTexture=require("../../utils/gpu-processor/copy-texture"),PASS_THROUGH_VERT="void main() { gl_Position = vec4( position, 1.0 ); }";module.exports=function(e,t){var n=_.extend({count:2e5},t),r=CreateGpuProcessor(e.renderer),i=_initPositioningPass(r,n),o=_initRenderingPass(n,e.scene);e.emitter.on("update",function(e){r.render(),o.material.uniforms.textureCurrPosition.value=i.pass.outputRenderTarget,o.material.uniforms.texturePrevPosition.value=i.prevPositionTexture,o.material.uniforms.textureSideLength.value=i.pass.textureSideLength,o.material.uniforms.elapsed.value=e.elapsed})};

},{"../../utils/duplicate-buffer-geometry":72,"../../utils/gpu-processor/copy-texture":73,"../../utils/gpu-processor/gpu-processor":74}],25:[function(require,module,exports){
"use strict";var Touches=require("touches"),EventEmitter=require("events").EventEmitter;module.exports=function(e,t){var n=new THREE.Vector2,o=new THREE.Vector2,i=function(t,i){t.preventDefault(),o.x=i[0]/e.canvas.offsetWidth*2-1,o.y=i[1]/e.canvas.offsetHeight*-2+1,n.x=i[0],n.y=i[1]},r=Touches(e.canvas,{filtered:!0}).on("start",i).on("move",i).on("end",function(e){n.x=null,n.y=null,o.x=null,o.y=null});return e.emitter.on("destroy",function(){r.disable()}),{emitter:r,pixelPosition:n,normalizedPosition:o}};

},{"events":4,"touches":195}],26:[function(require,module,exports){
"use strict";var TrackCameraLights=function(e,t){this.lights=[];var i=new THREE.AmbientLight(1118481,1,0);i.position.set(0,2e3,1e3);var a=(new THREE.PointLight(16777215,.3,0),new THREE.PointLight(16777215,1,0));a.position.set(3e3,2e3,5e3);var o=new THREE.PointLight(16777215,1,0);o.position.set(-1e3,-1e3,-1e3);var n=new THREE.PointLight(16777215,2,0);n.position.set(-700,500,-1e3),e.scene.add(i),e.camera.object.add(a),e.camera.object.add(o),e.camera.object.add(n)};module.exports=TrackCameraLights,TrackCameraLights.prototype={};

},{}],27:[function(require,module,exports){
"use strict";function _loadTreePromise(){return new Promise(function(e,r){if(statics.tree)return void e(statics.tree);var t=new THREE.AssimpJSONLoader,i=function(r){_updateMaterials(r),statics.tree=r,e(r)},n=function(){};t.load("./js/components/models/tree.json",i,n,r)})}function _updateMaterials(e){e.material&&(e.material.side=THREE.DoubleSide,e.material.shading=THREE.SmoothShading,e.material.specular=new THREE.Color(5592405),e.material.shininess=1);for(var r=0;r<e.children.length;r++)_updateMaterials(e.children[r])}var AssimpJSONLoader=require("../../vendor/AssimpJSONLoader"),statics={tree:null};module.exports=function(e,r){var t=_.extend({position:[0,0,0],scale:[10,10,10]},r),i=new THREE.SphereGeometry(20,32,32),n=new THREE.MeshPhongMaterial({color:16776960}),a=new THREE.Mesh(i,n);return a.position.x=20,e.scene.add(a),_loadTreePromise().then(function(r){return e.scene.add(r),r.position.fromArray(t.position),r.scale.fromArray(t.scale),window.tree=r.children[0].children[0],r})};

},{"../../vendor/AssimpJSONLoader":79}],28:[function(require,module,exports){
"use strict";var MrDoobStats=require("../../vendor/Stats"),Stats=function(t){this.poem=t,this.stats=new MrDoobStats,this.stats.domElement.style.position="absolute",this.stats.domElement.style.top="0px",$(this.poem.div).append(this.stats.domElement),this.poem.emitter.on("update",this.stats.update.bind(this.stats))};module.exports=Stats;

},{"../../vendor/Stats":82}],29:[function(require,module,exports){
"use strict";function _getWheelEventName(){return"onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll"}var Lerp=require("lerp");module.exports=function(e,t){var n=_.extend({distance:.1,resetSpeed:.05,center:e.camera.object.position.clone()},t),r={center:n.center.clone()};e.canvas.addEventListener(_getWheelEventName(),function(e){r.center.y+=n.distance*-e.deltaY,r.center.x+=n.distance*e.deltaX*5},!1),e.emitter.on("update",function(){r.center.y=Lerp(r.center.y,n.center.y,n.resetSpeed),r.center.x=Lerp(r.center.x,n.center.x,n.resetSpeed),r.center.z=Lerp(r.center.z,n.center.z,n.resetSpeed),e.camera.object.position.copy(r.center)})};

},{"lerp":138}],30:[function(require,module,exports){
"use strict";var createManifestLoader=require("poem-manifests"),EventEmitter=require("events").EventEmitter,_emitter=new EventEmitter,_loader=null,init=function(e,t){_loader=createManifestLoader(t,{emitter:_emitter,getGraph:function(t,r){return e(t,_emitter)},globalManifest:{}}),_emitter.on("load",function(e){window.poem=e.graph})},load=function(e){return _loader.load(e)};module.exports={init:init,load:load,emitter:_emitter};

},{"events":4,"poem-manifests":185}],31:[function(require,module,exports){
"use strict";function _createFog(e,o,r){var t=_.extend({color:2236962,nearFactor:.5,farFactor:2},o);e.fog=new THREE.Fog(t.color,r*t.nearFactor,r*t.farFactor)}function _startAfterPromises(e){var o=_.map(e,function(e){return _.isObject(e)?e.promise:void 0}),r=_.filter(o,function(e){return!_.isUndefined(e)});Promise.all(r).then(function(){e.emitter.emit("promises"),e.loop.start()},console.log.bind(console))}var Camera=require("../components/cameras/Camera"),CreateLoop=require("poem-loop"),RATIO=_.isNumber(window.devicePixelRatio)?window.devicePixelRatio:1;module.exports=function(e,o){var r=_.extend({camera:null,fog:null,renderer:null},e.config),t={},n=CreateLoop(),a=n.emitter,i=new THREE.Scene,c=new Camera(r.camera,i,a);return _createFog(i,r.fog,c.object.position.z),o.once("load",_.partial(_startAfterPromises,t)),o.on("unload",function(){n.stop(),a.emit("destroy")}),_.extend(t,{emitter:a,canvas:null,scene:i,ratio:RATIO,camera:c,$div:$("#container"),loop:n,start:n.start,stop:n.stop})};

},{"../components/cameras/Camera":19,"poem-loop":183}],32:[function(require,module,exports){
"use strict";var crossroads=require("crossroads"),hasher=require("hasher"),manifestToPoem=require("./manifestToPoem"),_baseUrl="/sandbox",_defaultLevel,routing={start:function(e,a){function s(e,a){crossroads.parse(e)}_defaultLevel=_.first(_.keys(a)),manifestToPoem.init(e,a),crossroads.addRoute("/",routing.showMainTitles),crossroads.addRoute("/{name}",routing.loadUpALevel),crossroads.addRoute(/.*/,function(){hasher.replaceHash("")}),hasher.initialized.add(s),hasher.changed.add(s),hasher.init()},showMainTitles:function(){_gaq.push(["_trackPageview",_baseUrl]),manifestToPoem.load(_defaultLevel)},loadUpALevel:function(e){_gaq.push(["_trackPageview",_baseUrl+"/#level/"+e]),manifestToPoem.load(e)||manifestToPoem.load(_defaultLevel)}};module.exports=routing;

},{"./manifestToPoem":30,"crossroads":97,"hasher":135}],33:[function(require,module,exports){
"use strict";function handlers(e){var o;manifestToPoem.emitter.on("load",function(e){o=e.graph}),e.emitter.on("close",function(){o&&o.start()}),e.emitter.on("open",function(){o&&o.stop()})}var poemMenu=require("poem-menu"),routing=require("./routing"),mute=require("../sound/mute"),manifestToPoem=require("./manifestToPoem");window.mute=mute,module.exports=function(e){handlers(poemMenu(e,{top:"Three.js Sandbox",bottom:mute.el}))};

},{"../sound/mute":68,"./manifestToPoem":30,"./routing":32,"poem-menu":187}],34:[function(require,module,exports){
"use strict";var random=require("../utils/random"),loadTexture=require("../utils/loadTexture"),destroyMesh=require("../utils/destroyMesh"),mute=require("../sound/mute"),Earth=function(t,e){this.poem=t,this.geometry=null,this.material=null,this.mesh=null,this.texture=null,$("#LevelSelect").hide(),this.radius=e.radius>0?e.radius:250,this.$a=$("<a href='http://svs.gsfc.nasa.gov/cgi-bin/details.cgi?aid=11719'></a>"),this.$a.append($("<img class='nasa-logo wide' src='assets/images/nasa-goddard.png' />")),this.$a.attr("title","Map visualization credit to NASA's Goddard Space Flight Center"),this.poem.$div.append(this.$a),this.poem.emitter.on("destroy",this.destroy.bind(this)),this.start()};module.exports=Earth,Earth.prototype={start:function(){this.createTexture(),this.geometry=new THREE.SphereGeometry(this.radius,64,64),this.material=new THREE.MeshPhongMaterial({map:this.texture,shininess:25,specular:1118481}),this.mesh=new THREE.Mesh(this.geometry,this.material),this.poem.scene.add(this.mesh),this.poem.emitter.on("update",this.update.bind(this))},createTexture:function(){this.video=document.createElement("video"),this.$video=$(this.video),this.video.controls=!0,this.video.loop=!0,this.video.muted=mute.muted(),mute.emitter.on("change",function(t){this.video.muted=t}.bind(this)),this.video.canPlayType("video/mp4")?this.video.src="assets/video/earthco2-large.mp4":this.video.src="assets/video/earthco2.webm",this.video.load(),this.video.play(),this.canvas=document.createElement("canvas"),this.canvas.width=1920,this.canvas.height=960,this.ctx2d=this.canvas.getContext("2d"),this.ctx2d.fillStyle="#000000",this.ctx2d.fillRect(0,0,this.canvas.width,this.canvas.height),this.texture=new THREE.Texture(this.canvas),this.texture.minFilter=THREE.LinearFilter,this.texture.magFilter=THREE.LinearFilter},error:function(){},update:function(t){this.video.readyState===this.video.HAVE_ENOUGH_DATA&&(this.ctx2d.drawImage(this.video,0,0),this.texture&&(this.texture.needsUpdate=!0)),this.mesh.rotation.y+=5e-5*t.dt},destroy:function(){this.$a.remove(),this.video.pause(),destroyMesh(this.mesh),this.texture.dispose()}};

},{"../sound/mute":68,"../utils/destroyMesh":71,"../utils/loadTexture":77,"../utils/random":78}],35:[function(require,module,exports){
"use strict";var _slicedToArray=function(){function e(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{!n&&s.return&&s.return()}finally{if(a)throw o}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),LoadImage=require("../../utils/loadImage"),internals={createTexture:function(e){var t=document.createElement("canvas");t.width=1024,t.height=256;var r=t.getContext("2d"),n=new THREE.Texture(t);return n.minFilter=THREE.LinearFilter,n.magFilter=THREE.LinearFilter,[t,r,n]},createVideo:function(){return new Promise(function(e,t){var r=document.createElement("video");$(r);r.controls=!1,r.loop=!1,r.src=r.canPlayType("video/mp4")?"assets/video/gene.sys.mp4":"assets/video/gene.sys.webm",r.load(),$(r).on("canplaythrough",function(){e(r)}),$(r).on("error, stalled, abort",function(e){t(e.originalEvent)})})},createMesh:function(e,t,r){return new THREE.Mesh(new THREE.PlaneGeometry(r.width,r.height),new THREE.MeshBasicMaterial({color:16777215,transparent:!0,side:THREE.DoubleSide,alphaMap:t}))},updateFn:function(e,t,r,n){return function(){r.readyState===r.HAVE_ENOUGH_DATA&&!1===r.ended&&(t.drawImage(r,0,0),n.needsUpdate=!0)}},add:function(e,t,r,n){t.scale.set(.005,.005,.005),t.position.z=-10,t.position.y=.2,e.add(t),setTimeout(function(){console.warn("TODO: remove setTimeout"),r.currentTime=0,r.play(),poem.emitter.on("update",n)},2e3)},remove:function(e,t,r,n){e.remove(t),r.pause(0),poem.emitter.removeListener("update",n)}};module.exports=function(e){var t={promise:internals.createVideo()};return t.promise.then(function(r){var n=internals.createTexture(r),a=_slicedToArray(n,3),o=a[0],i=a[1],s=a[2],u=internals.createMesh(e,s,o),c=internals.updateFn(u,i,r,s);_.extend(t,{mesh:u,canvas:o,ctx2d:i,texture:s,video:r,add:_.partial(internals.add,e.camera.object,u,r,c),remove:_.partial(internals.remove,e.camera.object,u,r,c)})}),t};

},{"../../utils/loadImage":75}],36:[function(require,module,exports){
"use strict";function createGeometry(t,e){var n=new THREE.PlaneGeometry(t,t,e,e);return n.applyMatrix((new THREE.Matrix4).makeRotationX(.5*Math.PI)),n}function createTexture(t,e){var n=new Image,i=new THREE.Texture(n);return n.src="assets/images/cloud1024.png",i.wrapT=THREE.RepeatWrapping,i.wrapS=THREE.RepeatWrapping,$(n).on("load",function(){i.needsUpdate=!0,e.add(t)}),i}function updateShader(){}function createMeshGrid(t,e,n,i){for(var o,r=createGeometry(e/n,Math.floor(i/n)),a=new THREE.Object3D,h=e/n,c=0;c<n;c++)for(var s=0;s<n;s++)o=new THREE.Mesh(r,t),o.frustumCulled=!1,a.add(o),o.position.set(c*h,0,s*h);return a}function updateModuloMeshGrid(t,e,n,i){var o=e.length,r=n/2;return function(){for(var i,a=0;a<o;a++)i=e[a].position,i.set((i.x-t.x+r)%n+t.x-r,i.y,(i.z-t.z+r)%n+t.z-r)}}var EndlessTerrain=function(t,e){var n=_.extend({width:4e3,heightScale:200,gridLength:16,totalPolygonDensity:1024,positionY:0,height:1},e),i={height:n.height},o=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform sampler2D terrain;\nuniform float heightFactor;\nuniform float width;\n\nvarying float height;\nvarying vec2 vUv;\nvarying float vCameraDistance;\n\nvoid main() {\n\n\tvec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\t\n\tvUv = vec2( modelPosition.x, modelPosition.z ) / width;\n\n\theight = texture2D( terrain, vUv * 0.3 ).w;\n\t\n\tvCameraDistance = distance( modelPosition.xyz, cameraPosition );\n\t\n\t\n\tvec4 modifiedPosition = vec4(\n\t\tposition.x,\n\t\tposition.y + height * width / 20.0 * heightFactor,\n\t\tposition.z,\n\t\t1.0\n\t);\n\t\n\tgl_Position = projectionMatrix * modelViewMatrix * modifiedPosition;\n\t\n}",fragmentShader:"#define GLSLIFY 1\nvec3 hsv2rgb_1_0(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\nuniform float width;\nuniform float heightFactor;\n\nvarying float height;\nvarying vec2 vUv;\nvarying float vCameraDistance;\n\nvoid main() {\n\t\n\tfloat hueX = abs(0.5 - fract(vUv.x * 0.8)) * 2.0;\n\tfloat hueY = abs(0.5 - fract(vUv.y * 0.63)) * 2.0;\n\t\n    gl_FragColor = vec4(\n\t\thsv2rgb_1_0(\n\t\t\tvec3(\n\t\t\t\t// mod(xHue, 1.0),\n\t\t\t\t(hueX + hueY) * 0.2 + 0.3,\n\t\t\t\tmix(heightFactor, mix(height, 0.5, 0.8), 0.8),\n\t\t\t\tmix(heightFactor, mix(height, 1.2, 0.35), 0.35)\n\t\t\t)\n\t\t),\n\t\t1.0\n\t);\n\t\n\tfloat fogFactor = smoothstep( 0.0, 1.0, vCameraDistance / width );\n\tvec3 fogColor = vec3( 0.14, 0.14, 0.14 );\n\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\t\n}",side:THREE.DoubleSide,uniforms:{terrain:{type:"t"},heightFactor:{type:"f"},width:{type:"f"}},attributes:{}});o.side=THREE.DoubleSide;var r=createMeshGrid(o,n.width,n.gridLength,n.totalPolygonDensity);return r.position.y=n.positionY,o.uniforms.terrain.value=createTexture(r,t.scene),o.uniforms.width.value=n.width/2,o.uniforms.height=i.height,t.emitter.on("update",function(){o.uniforms.heightFactor.value=i.height}),t.emitter.on("update",updateModuloMeshGrid(t.camera.object.position,r.children,n.width,i)),i};module.exports=EndlessTerrain;

},{}],37:[function(require,module,exports){
"use strict";var CubicBezier=require("cubic-bezier"),QuickIn=CubicBezier(.12,.51,.8,.85,32),Pi=Math.PI,HalfPi=Math.PI/2;module.exports={loop:!0,speed:1,keyframes:[{duration:15,easing:QuickIn,actions:[["camera.object.position.x",[0,0]],["camera.object.position.y",[-250,0]],["camera.object.position.z",[0,-5e3]],["camera.setAndUpdateFov",[5,30]],["endlessTerrain.height",[0,1]],["restrictedCamera.rotation.x",[-.3,0]],["restrictedCamera.rotation.y",[-.3,.1]],["restrictedCamera.rotateAll",{x:-.3,y:-.3,z:0}],["credits.mesh.position.z",[-30,-10]],["credits.add",{}]]},{duration:10,easing:"linear",isolate:!1,startHere:!1,actions:[["credits.remove",{}],["camera.object.position.x",[0,0]],["camera.object.position.y",[0,0]],["camera.object.position.z",[-5e3,-5700]],["camera.setAndUpdateFov",[70,40]],["restrictedCamera.rotateAll",{x:-.1,y:HalfPi,z:0}]]},{duration:13,easing:"linear",isolate:!1,actions:[["camera.object.position.x",600],["camera.object.position.y",[0,0]],["camera.object.position.z",[-5700,-6e3]],["camera.setAndUpdateFov",[100,50]],["restrictedCamera.rotateAll",{x:.5*-Pi,y:0,z:0}],["restrictedCamera.rotation.x",[.5*-Pi,0]]]},{duration:10,easing:"linear",isolate:!1,actions:[["camera.object.position.x",600],["camera.object.position.y",[0,0]],["camera.object.position.z",[-5700,-6400]],["restrictedCamera.rotateAll",{x:0,y:Pi,z:0}]]}]};

},{"cubic-bezier":98}],38:[function(require,module,exports){
"use strict";var random=require("../utils/random"),Grid=function(e,r){this.poem=e;for(var i=new THREE.LineBasicMaterial({color:3158064}),s=new THREE.Geometry,t=0;t<=40;t++)s.vertices.push(new THREE.Vector3(-500,-75,25*t-500)),s.vertices.push(new THREE.Vector3(500,-75,25*t-500)),s.vertices.push(new THREE.Vector3(25*t-500,-75,-500)),s.vertices.push(new THREE.Vector3(25*t-500,-75,500));this.grid=new THREE.Line(s,i,THREE.LinePieces),this.poem.scene.add(this.grid)};module.exports=Grid;

},{"../utils/random":78}],39:[function(require,module,exports){
"use strict";var calculateSquaredTextureWidth=require("../../utils/calculateSquaredTextureWidth"),loadTexture=require("../../utils/loadTexture"),loadText=require("../../utils/loadText"),MeshGroup=function(e){THREE.Object3D.call(this),this.poem=e,this.type="MeshGroup",this.bufferGeometry=new THREE.BufferGeometry,this.matricesTextureWidth=null,this.matricesData=null,this.matrixIndices=null,this.texture=null,this.vertexShader=null,this.fragmentShader=null,this.loaded=Promise.all([loadTexture("assets/images/sinegravitycloud.png",this,"texture"),loadText("js/demos/MeshGroupBoxDemo/shader.vert",this,"vertexShader"),loadText("js/demos/MeshGroupBoxDemo/shader.frag",this,"fragmentShader")]).catch(function(e){throw new Error("Could not load assets for the MeshGroup",e)})};MeshGroup.prototype=_.extend(Object.create(THREE.Object3D.prototype),{build:function(e){this.loaded.then(function(){this.buildGeometry(),this.buildMatrices(),this.buildMaterial(),this.object=new THREE.PointCloud(this.bufferGeometry,this.material),e.add(this.object),this.poem.emitter.on("update",this.update.bind(this))}.bind(this))},buildGeometry:function(){var e,t,r,i,s,a=new THREE.Geometry,h=[];for(t=0,r=this.children.length;t<r;t++)if(e=this.children[t].geometry)for(a.merge(e),i=a.vertices.length-e.vertices.length,s=a.vertices.length;i<s;i++)h[i]=t;this.bufferGeometry.fromGeometry(a)},generateTransformMatrixIndices:function(e){var t,r,i,s,a,h,u=[],n=0;for(i=0,s=e.length;i<s;i++)if(r=e[i].geometry)for(t=3*r.faces.length,n+=t,a=n-t,h=n;a<h;a++)u[a]=i;return new Float32Array(u)},buildMatrices:function(){this.matricesTextureWidth=calculateSquaredTextureWidth(16*this.children.length),this.matricesData=new Float32Array(this.matricesTextureWidth*this.matricesTextureWidth*4),this.matricesTexture=new THREE.DataTexture(this.matricesData,this.matricesTextureWidth,this.matricesTextureWidth,THREE.RGBAFormat,THREE.FloatType),this.matricesTexture.minFilter=THREE.NearestFilter,this.matricesTexture.magFilter=THREE.NearestFilter,this.matricesTexture.generateMipmaps=!1,this.matricesTexture.flipY=!1,this.matricesTexture.needsUpdate=!0},buildMaterial:function(){this.attributes={transformMatrixIndex:{type:"f",value:null}},this.matrixIndices=this.generateTransformMatrixIndices(this.children),this.bufferGeometry.addAttribute("transformMatrixIndex",new THREE.BufferAttribute(this.matrixIndices,1)),this.uniforms={color:{type:"c",value:new THREE.Color(16711680)},matricesTexture:{type:"t",value:this.matricesTexture},time:{type:"f",value:Date.now()},texture:{type:"t",value:this.texture},matricesTextureWidth:{type:"f",value:this.matricesTextureWidth}},this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,attributes:this.attributes,vertexShader:this.vertexShader,fragmentShader:this.fragmentShader,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0})},update:function(){for(var e=0,t=this.children.length;e<t;e++)this.children[e].matrix.flattenToArrayOffset(this.matricesData,16*e),this.matricesTexture.needsUpdate=!0}}),module.exports=MeshGroup;

},{"../../utils/calculateSquaredTextureWidth":70,"../../utils/loadText":76,"../../utils/loadTexture":77}],40:[function(require,module,exports){
"use strict";var MeshGroup=require("./MeshGroup"),random=require("../../utils/random"),twoPi=2*Math.PI,MeshGroupBoxDemo=function(o,t){this.poem=o,this.count=1e4,this.poem.emitter.on("update",this.update.bind(this)),this.group=new MeshGroup(o),this.boxes=this.generateBoxes(this.group),this.group.build(o.scene)};module.exports=MeshGroupBoxDemo,MeshGroupBoxDemo.prototype={generateBoxes:function(o){for(var t,e=[],r=(new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:65280}),this.count);r--;)t=new THREE.Mesh(new THREE.BoxGeometry(1,1,1)),t.position.x=random.range(-100,100),t.position.y=random.range(-100,100),t.position.z=random.range(-100,100),t.rotation.x=random.range(-twoPi,twoPi),t.rotation.y=random.range(-twoPi,twoPi),t.rotation.z=random.range(-twoPi,twoPi),t.velocity=new THREE.Vector3(random.range(-1,1),random.range(-1,1),random.range(-1,1)).multiplyScalar(.1),t.spin=new THREE.Vector3(random.range(-twoPi,twoPi),random.range(-twoPi,twoPi),random.range(-twoPi,twoPi)).multiplyScalar(.01),t.scale.multiplyScalar(random.range(1,2)),t.updateMatrix(),e.push(t),o.add(t);return e},update:function(o){for(var t,e=0;e<this.count;e++)t=this.boxes[e],t.position.add(t.velocity),t.rotation.x+=t.spin.x,t.rotation.y+=t.spin.y,t.rotation.z+=t.spin.z,t.updateMatrix()}};

},{"../../utils/random":78,"./MeshGroup":39}],41:[function(require,module,exports){
"use strict";var random=require("../../utils/random"),loadTexture=require("../../utils/loadTexture"),loadText=require("../../utils/loadText"),SineGravityCloud=function(t,i){this.poem=t,this.object=null,this.material=null,this.attributes=null,this.uniforms=null,this.texture=null,this.vertexShader=null,this.fragmentShader=null,this.count=2e5,this.radius=200,this.pointSize=7,_.extend(this,i),Promise.all([loadTexture("assets/images/sinegravitycloud.png",this,"texture"),loadText("js/demos/sine-gravity-cloud/sine.vert",this,"vertexShader"),loadText("js/demos/sine-gravity-cloud/sine.frag",this,"fragmentShader")]).then(this.start.bind(this),this.error.bind(this))};module.exports=SineGravityCloud,SineGravityCloud.prototype={start:function(){this.attributes={size:{type:"f",value:null},customColor:{type:"c",value:null}},this.uniforms={color:{type:"c",value:new THREE.Color(16777215)},texture:{type:"t",value:this.texture}},this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,attributes:this.attributes,vertexShader:this.vertexShader,fragmentShader:this.fragmentShader,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0}),this.geometry=new THREE.BufferGeometry,this.positions=new Float32Array(3*this.count),this.velocity=new Float32Array(3*this.count),this.colors=new Float32Array(3*this.count),this.sizes=new Float32Array(this.count);for(var t,i,s=new THREE.Color(0),e=0;e<this.count;e++)this.sizes[e]=this.pointSize,i=random.range(-1,1),this.positions[3*e+0]=i*this.radius,this.positions[3*e+1]=Math.sin(i*Math.PI*10)*this.radius,this.positions[3*e+2]=-.5*this.radius,this.velocity[3*e+0]=0*random.range(-.01,.01),this.velocity[3*e+1]=10*random.range(-.01,.01),this.velocity[3*e+2]=0*random.range(-.01,.01),t=.3*i+.65,s.setHSL(t,1,.55),this.colors[3*e+0]=s.r,this.colors[3*e+1]=s.g,this.colors[3*e+2]=s.b;this.geometry.addAttribute("position",new THREE.BufferAttribute(this.positions,3)),this.geometry.addAttribute("customColor",new THREE.BufferAttribute(this.colors,3)),this.geometry.addAttribute("size",new THREE.BufferAttribute(this.sizes,1)),this.object=new THREE.PointCloud(this.geometry,this.material),this.object.position.y-=.2*this.radius,this.poem.scene.add(this.object),this.object.scale.multiplyScalar(1.5),this.poem.emitter.on("update",this.update.bind(this))},error:function(t){throw new Error("Could not load assets for the SineGravityCloud",t)},update:function(t){for(var i,s=Math.cos(5e-5*t.now*1),e=Math.cos(5e-5*t.now*2),o=Math.cos(5e-5*t.now*3),r=0;r<this.count;r++)i=this.positions[3*r+0]*this.positions[3*r+0]+this.positions[3*r+1]*this.positions[3*r+1]+this.positions[3*r+2]*this.positions[3*r+2],this.velocity[3*r+0]-=s*this.positions[3*r+0]/i,this.velocity[3*r+1]-=e*this.positions[3*r+1]/i,this.velocity[3*r+2]-=o*this.positions[3*r+2]/i,this.positions[3*r+0]+=s*this.velocity[3*r+0],this.positions[3*r+1]+=e*this.velocity[3*r+1],this.positions[3*r+2]+=o*this.velocity[3*r+2];this.geometry.attributes.position.needsUpdate=!0}};

},{"../../utils/loadText":76,"../../utils/loadTexture":77,"../../utils/random":78}],42:[function(require,module,exports){
"use strict";var Random=require("../utils/random"),lerp=require("lerp"),internals={createMeshes:function(e,n,o,t){for(var i=[],r=0;r<t.count;r++){var a=new THREE.Mesh(n,o);a.position.x=Random.range(-t.dispersion,t.dispersion),a.position.y=Random.range(-t.dispersion,t.dispersion),a.position.z=Random.range(-t.dispersion,t.dispersion),a.rotation.x=Random.range(-Math.PI,Math.PI),a.rotation.y=Random.range(-Math.PI,Math.PI),a.rotation.z=Random.range(-Math.PI,Math.PI),a.velocity=t.velocity,a.flee=1,a.direction=new THREE.Vector3(Random.range(-1,1),Random.range(-1,1),Random.range(-1,1)),a.direction.normalize(),r>0&&(a.target=i[r-1].position),e.add(a),i.push(a)}return i[0].target=i[i.length-1].position,i},physicsMotionFn:function(e,n){var o=new THREE.Vector3;return function(t){for(var i=0;i<e.length;i++){var r=e[i];o.subVectors(r.target,r.position),o.normalize(),r.direction.lerp(o,n.turnSpeed*t.unitDt),r.flee=lerp(r.flee,1,n.fleeSlowdown),r.position.x+=r.direction.x*r.velocity*r.flee*t.unitDt,r.position.y+=r.direction.y*r.velocity*r.flee*t.unitDt,r.position.z+=r.direction.z*r.velocity*r.flee*t.unitDt}}},brownianMotionFn:function(e,n){return function(o){for(var t=0;t<e.length;t++)e[t].position.x+=Random.range(-5e-4,5e-4)*n*o.dt,e[t].position.y+=Random.range(-5e-4,5e-4)*n*o.dt,e[t].position.z+=Random.range(-5e-4,5e-4)*n*o.dt}},raycastFn:function(e,n,o,t){var i=new THREE.Raycaster;return function(r){i.setFromCamera(n,o);for(var a=0;a<e.length;a++){var s=e[a],d=i.ray.distanceToPoint(s.position);d<t.mouseRange&&(s.flee+=t.fleeSpeed*(t.mouseRange-d)/t.mouseRange)}}}};module.exports=function(e,n){var o=_.extend({count:10,dispersion:10,radius:1,mouseRef:"mouse",velocity:5,turnSpeed:.025,fleeSlowdown:.1,mouseRange:50,fleeSpeed:1},n),t=new THREE.TetrahedronGeometry(o.radius,0),i=new THREE.MeshLambertMaterial({color:52275,shading:THREE.FlatShading,fog:!1}),r=internals.createMeshes(e.scene,t,i,o),a=e[o.mouseRef];e.emitter.on("update",internals.physicsMotionFn(r,o)),e.emitter.on("update",internals.raycastFn(r,a.normalizedPosition,e.camera.object,o))};

},{"../utils/random":78,"lerp":138}],43:[function(require,module,exports){
"use strict";function _createGeometry(n,e){var t=new THREE.PlaneGeometry(n,n,e,e);return t.applyMatrix((new THREE.Matrix4).makeRotationX(.5*Math.PI)),t}function _createTexture(n,e){var t=new Image,o=new THREE.Texture(t);return t.src="assets/images/cloud1024.png",o.wrapT=THREE.RepeatWrapping,o.wrapS=THREE.RepeatWrapping,$(t).on("load",function(){o.needsUpdate=!0,e.add(n)}),o}function _createMeshGrid(n,e,t,o){for(var i,a=_createGeometry(e/t,Math.floor(o/t)),r=new THREE.Object3D,s=e/t,c=0;c<t;c++)for(var v=0;v<t;v++)i=new THREE.Mesh(a,n),i.frustumCulled=!1,r.add(i),i.position.set(c*s,0,v*s);return r}function _updateModuloMeshGrid(n,e,t,o){var i=e.length,a=t/2;return function(){for(var o,r=0;r<i;r++)o=e[r].position,o.set((o.x-n.x+a)%t+n.x-a,o.y,(o.z-n.z+a)%t+n.z-a)}}module.exports=function(n,e){var t=_.extend({width:8e3,heightScale:200,gridLength:16,totalPolygonDensity:256,positionY:0,height:1},e),o={height:t.height},i=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nuniform sampler2D terrain;\nuniform float heightFactor;\nuniform float width;\nuniform float elapsed;\n\nvarying float height;\nvarying vec2 vUv;\nvarying float vCameraDistance;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1_1(vec4 x) {\n     return mod289_1_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_2(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_1_3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_1_4 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_1_5 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_1_5;\n  vec3 i1 = min( g_1_5.xyz, l.zxy );\n  vec3 i2 = max( g_1_5.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_1_4.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1_0(i);\n  vec4 p = permute_1_1( permute_1_1( permute_1_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_1_4.wyz - D_1_4.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_1_6 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_1_7 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_1_6.xy,h.z);\n  vec3 p3 = vec3(a1_1_6.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_1_2(vec4(dot(p0_1_7,p0_1_7), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_7 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_1_7,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\nvoid main() {\n\n\tvec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\t\n\tvUv = vec2( modelPosition.x, modelPosition.z + elapsed * 0.05 ) / width;\n\t\t\n\tfloat mainHeightShape = texture2D( terrain, vUv * 0.3 ).w;\n\tfloat smallNoiseySurface = texture2D( terrain, vUv * 5.0 ).w;\n\tfloat amountOfSmallNoise = snoise_1_3(vec3(\n\t\tmodelPosition.x * 0.001 * sin( elapsed * 0.001 ),\n\t\tmodelPosition.z * 0.001 * sin( elapsed * 0.001 ),\n\t\telapsed * 0.0001\n\t));\n\t\n\theight = mainHeightShape + (\n\t\tsmallNoiseySurface * smallNoiseySurface * amountOfSmallNoise\n\t);\n\t\n\tvCameraDistance = distance( modelPosition.xyz, cameraPosition );\n\t\n\tvec4 modifiedPosition = vec4(\n\t\tposition.x,\n\t\tposition.y + height * width / 20.0 * heightFactor,\n\t\tposition.z,\n\t\t1.0\n\t);\n\t\n\tgl_Position = projectionMatrix * modelViewMatrix * modifiedPosition;\n\t\n}",fragmentShader:"#define GLSLIFY 1\nvec3 hsv2rgb_1_0(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\nuniform float width;\nuniform float heightFactor;\nuniform float elapsed;\n\nvarying float height;\nvarying vec2 vUv;\nvarying float vCameraDistance;\n\nvoid main() {\n\t\n\tfloat hueX = abs(0.5 - fract(vUv.x * 2.0)) * 2.0;\n\tfloat hueY = abs(0.5 - fract(vUv.y * 2.0)) * 2.0;\n\t\n\tfloat waveSpeed = 0.0005;\n\tfloat waveLength = 0.0001;\n\tfloat wave = mod((vCameraDistance * waveLength + elapsed * waveSpeed), 1.0);\n\t\n    gl_FragColor = vec4(\n\t\thsv2rgb_1_0(\n\t\t\tvec3(\n\t\t\t\t// mod(xHue, 1.0),\n\t\t\t\t(hueX + hueY) * 0.1 + 0.25,\n\t\t\t\tmix(heightFactor, mix(height, 0.5, 0.8), 0.8),\n\t\t\t\tmix(heightFactor, mix(height, 1.2, 0.35), 0.35)\n\t\t\t)\n\t\t),\n\t\t1.0 - wave + 0.2\n\t);\n\t\n\tfloat fogFactor = smoothstep( 0.0, 1.0, vCameraDistance / width );\n\tvec3 fogColor = vec3( 0.14, 0.14, 0.14 );\n\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\t\n}",side:THREE.DoubleSide,wireframe:!0,transparent:!0,uniforms:{terrain:{type:"t"},heightFactor:{type:"f"},width:{type:"f"},elapsed:{type:"f"}},attributes:{}}),a=_createMeshGrid(i,t.width,t.gridLength,t.totalPolygonDensity);return a.position.y=t.positionY,i.uniforms.terrain.value=_createTexture(a,n.scene),i.uniforms.width.value=t.width/2,i.uniforms.height=o.height,n.emitter.on("update",function(n){i.uniforms.heightFactor.value=o.height,i.uniforms.elapsed.value=n.elapsed}),n.emitter.on("update",_updateModuloMeshGrid(n.camera.object.position,a.children,t.width,o)),o};

},{}],44:[function(require,module,exports){
"use strict";require("./utils/ThreeConsole"),require("es6-promise").polyfill();var manifests=require("../manifests"),routing=require("./core/routing"),ui=require("./core/ui")(manifests);routing.start(require("./core/poem"),manifests);

},{"../manifests":89,"./core/poem":31,"./core/routing":32,"./core/ui":33,"./utils/ThreeConsole":69,"es6-promise":131}],45:[function(require,module,exports){
"use strict";THREE.BloomPass=function(e,r,o,n){e=void 0!==e?e:1,r=void 0!==r?r:25,o=void 0!==o?o:4,n=void 0!==n?n:256;var t={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat};this.renderTargetX=new THREE.WebGLRenderTarget(n,n,t),this.renderTargetY=new THREE.WebGLRenderTarget(n,n,t),void 0===THREE.CopyShader&&console.error("THREE.BloomPass relies on THREE.CopyShader");var i=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(i.uniforms),this.copyUniforms.opacity.value=e,this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,blending:THREE.AdditiveBlending,transparent:!0}),void 0===THREE.ConvolutionShader&&console.error("THREE.BloomPass relies on THREE.ConvolutionShader");var a=THREE.ConvolutionShader;this.convolutionUniforms=THREE.UniformsUtils.clone(a.uniforms),this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurx,this.convolutionUniforms.cKernel.value=THREE.ConvolutionShader.buildKernel(o),this.materialConvolution=new THREE.ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader,defines:{KERNEL_SIZE_FLOAT:r.toFixed(1),KERNEL_SIZE_INT:r.toFixed(0)}}),this.enabled=!0,this.needsSwap=!1,this.clear=!1,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null),this.scene.add(this.quad)},THREE.BloomPass.prototype={render:function(e,r,o,n,t){t&&e.context.disable(e.context.STENCIL_TEST),this.quad.material=this.materialConvolution,this.convolutionUniforms.tDiffuse.value=o,this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurX,e.render(this.scene,this.camera,this.renderTargetX,!0),this.convolutionUniforms.tDiffuse.value=this.renderTargetX,this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurY,e.render(this.scene,this.camera,this.renderTargetY,!0),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetY,t&&e.context.enable(e.context.STENCIL_TEST),e.render(this.scene,this.camera,o,this.clear)}},THREE.BloomPass.blurX=new THREE.Vector2(.001953125,0),THREE.BloomPass.blurY=new THREE.Vector2(0,.001953125);

},{}],46:[function(require,module,exports){
"use strict";THREE.EffectComposer=function(e,r){if(this.renderer=e,void 0===r){var t=window.innerWidth||1,i=window.innerHeight||1,s={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1};r=new THREE.WebGLRenderTarget(t,i,s)}this.renderTarget1=r,this.renderTarget2=r.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader"),this.copyPass=new THREE.ShaderPass(THREE.CopyShader)},THREE.EffectComposer.prototype={swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e},addPass:function(e){this.passes.push(e)},insertPass:function(e,r){this.passes.splice(r,0,e)},render:function(e){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var r,t,i=!1,s=this.passes.length;for(t=0;t<s;t++)if(r=this.passes[t],r.enabled){if(r.render(this.renderer,this.writeBuffer,this.readBuffer,e,i),r.needsSwap){if(i){var n=this.renderer.context;n.stencilFunc(n.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),n.stencilFunc(n.EQUAL,1,4294967295)}this.swapBuffers()}r instanceof THREE.MaskPass?i=!0:r instanceof THREE.ClearMaskPass&&(i=!1)}},reset:function(e){void 0===e&&(e=this.renderTarget1.clone(),e.width=window.innerWidth,e.height=window.innerHeight),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(e,r){var t=this.renderTarget1.clone();t.width=e,t.height=r,this.reset(t)}};

},{}],47:[function(require,module,exports){
"use strict";THREE.FilmPass=function(e,i,s,r){void 0===THREE.FilmShader&&console.error("THREE.FilmPass relies on THREE.FilmShader");var t=THREE.FilmShader;this.uniforms=THREE.UniformsUtils.clone(t.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),void 0!==r&&(this.uniforms.grayscale.value=r),void 0!==e&&(this.uniforms.nIntensity.value=e),void 0!==i&&(this.uniforms.sIntensity.value=i),void 0!==s&&(this.uniforms.sCount.value=s),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null),this.scene.add(this.quad)},THREE.FilmPass.prototype={render:function(e,i,s,r){this.uniforms.tDiffuse.value=s,this.uniforms.time.value+=r,this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,i,!1)}};

},{}],48:[function(require,module,exports){
"use strict";THREE.MaskPass=function(e,s){this.scene=e,this.camera=s,this.enabled=!0,this.clear=!0,this.needsSwap=!1,this.inverse=!1},THREE.MaskPass.prototype={render:function(e,s,t,a){var n=e.context;n.colorMask(!1,!1,!1,!1),n.depthMask(!1);var i,r;this.inverse?(i=0,r=1):(i=1,r=0),n.enable(n.STENCIL_TEST),n.stencilOp(n.REPLACE,n.REPLACE,n.REPLACE),n.stencilFunc(n.ALWAYS,i,4294967295),n.clearStencil(r),e.render(this.scene,this.camera,t,this.clear),e.render(this.scene,this.camera,s,this.clear),n.colorMask(!0,!0,!0,!0),n.depthMask(!0),n.stencilFunc(n.EQUAL,1,4294967295),n.stencilOp(n.KEEP,n.KEEP,n.KEEP)}},THREE.ClearMaskPass=function(){this.enabled=!0},THREE.ClearMaskPass.prototype={render:function(e,s,t,a){var n=e.context;n.disable(n.STENCIL_TEST)}};

},{}],49:[function(require,module,exports){
"use strict";THREE.RenderPass=function(e,r,l,a,o){this.scene=e,this.camera=r,this.overrideMaterial=l,this.clearColor=a,this.clearAlpha=void 0!==o?o:1,this.oldClearColor=new THREE.Color,this.oldClearAlpha=1,this.enabled=!0,this.clear=!0,this.needsSwap=!1},THREE.RenderPass.prototype={render:function(e,r,l,a){this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),e.render(this.scene,this.camera,l,this.clear),this.clearColor&&e.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null}};

},{}],50:[function(require,module,exports){
"use strict";THREE.SSAOShader={uniforms:{tDiffuse:{type:"t",value:null},tDepth:{type:"t",value:null},size:{type:"v2",value:new THREE.Vector2(512,512)},cameraNear:{type:"f",value:1},cameraFar:{type:"f",value:100},onlyAO:{type:"i",value:0},aoClamp:{type:"f",value:.5},lumInfluence:{type:"f",value:.5}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float cameraNear;","uniform float cameraFar;","uniform bool onlyAO;","uniform vec2 size;","uniform float aoClamp;","uniform float lumInfluence;","uniform sampler2D tDiffuse;","uniform sampler2D tDepth;","varying vec2 vUv;","#define DL 2.399963229728653","#define EULER 2.718281828459045","float width = size.x;","float height = size.y;","float cameraFarPlusNear = cameraFar + cameraNear;","float cameraFarMinusNear = cameraFar - cameraNear;","float cameraCoef = 2.0 * cameraNear;","const int samples = 8;","const float radius = 5.0;","const bool useNoise = false;","const float noiseAmount = 0.0003;","const float diffArea = 0.4;","const float gDisplace = 0.4;","float unpackDepth( const in vec4 rgba_depth ) {","const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );","float depth = dot( rgba_depth, bit_shift );","return depth;","}","vec2 rand( const vec2 coord ) {","vec2 noise;","if ( useNoise ) {","float nx = dot ( coord, vec2( 12.9898, 78.233 ) );","float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );","noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );","} else {","float ff = fract( 1.0 - coord.s * ( width / 2.0 ) );","float gg = fract( coord.t * ( height / 2.0 ) );","noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;","}","return ( noise * 2.0  - 1.0 ) * noiseAmount;","}","float readDepth( const in vec2 coord ) {","return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );","}","float compareDepths( const in float depth1, const in float depth2, inout int far ) {","float garea = 2.0;","float diff = ( depth1 - depth2 ) * 100.0;","if ( diff < gDisplace ) {","garea = diffArea;","} else {","far = 1;","}","float dd = diff - gDisplace;","float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );","return gauss;","}","float calcAO( float depth, float dw, float dh ) {","float dd = radius - depth * radius;","vec2 vv = vec2( dw, dh );","vec2 coord1 = vUv + dd * vv;","vec2 coord2 = vUv - dd * vv;","float temp1 = 0.0;","float temp2 = 0.0;","int far = 0;","temp1 = compareDepths( depth, readDepth( coord1 ), far );","if ( far > 0 ) {","temp2 = compareDepths( readDepth( coord2 ), depth, far );","temp1 += ( 1.0 - temp1 ) * temp2;","}","return temp1;","}","void main() {","vec2 noise = rand( vUv );","float depth = readDepth( vUv );","float tt = clamp( depth, aoClamp, 1.0 );","float w = ( 1.0 / width )  / tt + ( noise.x * ( 1.0 - noise.x ) );","float h = ( 1.0 / height ) / tt + ( noise.y * ( 1.0 - noise.y ) );","float ao = 0.0;","float dz = 1.0 / float( samples );","float z = 1.0 - dz / 2.0;","float l = 0.0;","for ( int i = 0; i <= samples; i ++ ) {","float r = sqrt( 1.0 - z );","float pw = cos( l ) * r;","float ph = sin( l ) * r;","ao += calcAO( depth, pw * w, ph * h );","z = z - dz;","l = l + DL;","}","ao /= float( samples );","ao = 1.0 - ao;","vec3 color = texture2D( tDiffuse, vUv ).rgb;","vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );","float lum = dot( color.rgb, lumcoeff );","vec3 luminance = vec3( lum );","vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );","if ( onlyAO ) {","final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );","}","gl_FragColor = vec4( final, 1.0 );","}"].join("\n")},module.exports=THREE.SSAOShader;

},{}],51:[function(require,module,exports){
"use strict";THREE.ShaderPass=function(e,t){this.textureID=void 0!==t?t:"tDiffuse",this.uniforms=THREE.UniformsUtils.clone(e.uniforms),this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.renderToScreen=!1,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null),this.scene.add(this.quad)},THREE.ShaderPass.prototype={render:function(e,t,r,s){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r),this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,this.clear)}};

},{}],52:[function(require,module,exports){
"use strict";var chromaticAberrationShader=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",fragmentShader:"#define GLSLIFY 1\nhighp float random_1_0(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n\n\nuniform float opacity;\n\nuniform sampler2D tDiffuse;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvec2 unitI_ToSide = (vUv * 2.0 - 1.0);\n\t\n\tunitI_ToSide = pow(unitI_ToSide, vec2(3.0, 5.0)) * random_1_0(vUv) * -0.01;\n\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\tvec4 smallshift = texture2D( tDiffuse, vUv + unitI_ToSide * 0.5 );\n\tvec4 bigshift = texture2D( tDiffuse, vUv + unitI_ToSide );\n\t\n\tgl_FragColor = opacity * vec4( bigshift.x,  texel.y,  smallshift.z,  texel.w );\n\n}",uniforms:{opacity:{type:"f",value:1}}});module.exports=chromaticAberrationShader;

},{}],53:[function(require,module,exports){
"use strict";require("./EffectComposer"),require("./MaskPass"),require("./BloomPass"),require("./RenderPass"),require("./ShaderPass"),require("./FilmPass");

},{"./BloomPass":45,"./EffectComposer":46,"./FilmPass":47,"./MaskPass":48,"./RenderPass":49,"./ShaderPass":51}],54:[function(require,module,exports){
"use strict";var playground=new THREE.ShaderMaterial({vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",fragmentShader:"#define GLSLIFY 1\nhighp float random_1_0(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n\n\nuniform float opacity;\n\nuniform sampler2D tDiffuse;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\n\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\n\tgl_FragColor = opacity * vec4( texel.x, texel.y, texel.z, texel.w );\n\n}",uniforms:{opacity:{type:"f",value:1},tDepth:{type:"t",value:null}}});module.exports=playground;

},{}],55:[function(require,module,exports){
"use strict";function handleNewPoem(e,r){var n=_.extend({},r),t=CreateRenderer(e,n);return ResizeHandler(e,ResizeRendererFn(t,e.camera.object)),e.emitter.on("draw",function(){t.render(e.scene,e.camera.object)}),t}var ResizeRendererFn=require("./utils/resize-renderer-fn"),ResizeHandler=require("./utils/resize-handler"),CreateRenderer=require("./utils/create-renderer");module.exports=handleNewPoem;

},{"./utils/create-renderer":59,"./utils/resize-handler":61,"./utils/resize-renderer-fn":62}],56:[function(require,module,exports){
"use strict";var ResizeRendererFn=require("./utils/resize-renderer-fn"),ResizeHandler=require("./utils/resize-handler"),CreateRenderer=require("./utils/create-renderer"),StereoEffect=require("../vendor/StereoEffect"),ResizeHandler=require("./utils/resize-handler"),FadeOutUi=require("./utils/fade-out-ui");module.exports=function(e,r){var i=_.extend({},r),n=CreateRenderer(e,i),t=new StereoEffect(n);return t.separation=10,ResizeHandler(e,ResizeRendererFn(n,e.camera.object)),ResizeHandler(e,function(){t.setSize(window.innerWidth,window.innerHeight)}),e.emitter.on("draw",function(){t.render(e.scene,e.camera.object)}),FadeOutUi(e),n};

},{"../vendor/StereoEffect":83,"./utils/create-renderer":59,"./utils/fade-out-ui":60,"./utils/resize-handler":61,"./utils/resize-renderer-fn":62}],57:[function(require,module,exports){
"use strict";function _createEffectComposer(e,r,n,t){var a=new THREE.RenderPass(n,t),i=new THREE.ShaderPass(THREE.FXAAShader),o=new THREE.BloomPass(1.5,15,16,512),s=new THREE.ShaderPass(THREE.CopyShader);s.renderToScreen=!0;var d=new THREE.EffectComposer(r);d.addPass(a),d.addPass(i),d.addPass(o),d.addPass(s);var u=function(){i.uniforms.resolution.value.set(1/(window.innerWidth*e),1/(window.innerHeight*e)),d.renderTarget1.setSize(window.innerWidth*e,window.innerHeight*e),d.renderTarget2.setSize(window.innerWidth*e,window.innerHeight*e)};return u(),[d,u]}function handleNewPoem(e,r){var n=CreateRenderer(e,r);n.autoClear=!1,ResizeHandler(e,ResizeRendererFn(n,e.camera.object));var t=_createEffectComposer(e.ratio,n,e.scene,e.camera.object),a=_slicedToArray(t,2),i=a[0];a[1];return e.emitter.on("draw",function(){i.render(e.scene,e.camera.object)}),n}var _slicedToArray=function(){function e(e,r){var n=[],t=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(t=(o=s.next()).done)&&(n.push(o.value),!r||n.length!==r);t=!0);}catch(e){a=!0,i=e}finally{try{!t&&s.return&&s.return()}finally{if(a)throw i}}return n}return function(r,n){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return e(r,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),ResizeRendererFn=require("./utils/resize-renderer-fn"),ResizeHandler=require("./utils/resize-handler"),CreateRenderer=require("./utils/create-renderer"),ChromaticAberrationShader=require("../postprocessing/chromaticAberration");require("../postprocessing"),require("../shaders/CopyShader"),require("../shaders/FilmShader"),require("../shaders/ConvolutionShader"),require("../shaders/FXAAShader"),module.exports=handleNewPoem;

},{"../postprocessing":53,"../postprocessing/chromaticAberration":52,"../shaders/ConvolutionShader":63,"../shaders/CopyShader":64,"../shaders/FXAAShader":65,"../shaders/FilmShader":66,"./utils/create-renderer":59,"./utils/resize-handler":61,"./utils/resize-renderer-fn":62}],58:[function(require,module,exports){
"use strict";function _createSsao(e,r,n,a){var i=new THREE.ShaderPass(SSAOShader);i.uniforms.tDepth.value=depthTarget,i.uniforms.cameraNear.value=a.near,i.uniforms.cameraFar.value=a.far,i.uniforms.fogEnabled.value=1,i.uniforms.aoClamp.value=.5,i.uniforms.size.value.set(window.innerWidth*e,window.innerHeight*e)}function _createDepthRender(e,r,n,a){var i=new THREE.WebGLRenderTarget(window.innerWidth,window.innerHeight,renderTargetParametersRGBA),t=new THREE.MeshDepthMaterial;return{render:function(){n.overrideMaterial=t,r(n,a,i,!0),n.overrideMaterial=null}}}function _createEffectComposer(e,r,n,a){var i=new THREE.RenderPass(n,a),t=new THREE.ShaderPass(THREE.FXAAShader),o=new THREE.ShaderPass(Playground),d=new THREE.ShaderPass(THREE.CopyShader);d.renderToScreen=!0;var s=new THREE.EffectComposer(r);THREE.LinearFilter,THREE.LinearFilter,THREE.RGBAFormat;s.addPass(i),s.addPass(o),s.addPass(t),s.addPass(d);var u=function(){t.uniforms.resolution.value.set(1/(window.innerWidth*e),1/(window.innerHeight*e)),s.renderTarget1.setSize(window.innerWidth*e,window.innerHeight*e),s.renderTarget2.setSize(window.innerWidth*e,window.innerHeight*e)};return u(),[s,u]}function handleNewPoem(e,r){var n=CreateRenderer(e,r);n.autoClear=!1,ResizeHandler(e,ResizeRendererFn(n,e.camera.object));var a=_createEffectComposer(e.ratio,n,e.scene,e.camera.object),i=_slicedToArray(a,2),t=i[0];i[1];return e.emitter.on("draw",function(){t.render(e.scene,e.camera.object)}),n}var _slicedToArray=function(){function e(e,r){var n=[],a=!0,i=!1,t=void 0;try{for(var o,d=e[Symbol.iterator]();!(a=(o=d.next()).done)&&(n.push(o.value),!r||n.length!==r);a=!0);}catch(e){i=!0,t=e}finally{try{!a&&d.return&&d.return()}finally{if(i)throw t}}return n}return function(r,n){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return e(r,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),ResizeRendererFn=require("./utils/resize-renderer-fn"),ResizeHandler=require("./utils/resize-handler"),CreateRenderer=require("./utils/create-renderer"),SSAOShader=require("../postprocessing/SSAOShader"),Playground=require("../postprocessing/playground/playground");require("../postprocessing"),require("../shaders/CopyShader"),require("../shaders/FilmShader"),require("../shaders/ConvolutionShader"),require("../shaders/FXAAShader"),module.exports=handleNewPoem;

},{"../postprocessing":53,"../postprocessing/SSAOShader":50,"../postprocessing/playground/playground":54,"../shaders/ConvolutionShader":63,"../shaders/CopyShader":64,"../shaders/FXAAShader":65,"../shaders/FilmShader":66,"./utils/create-renderer":59,"./utils/resize-handler":61,"./utils/resize-renderer-fn":62}],59:[function(require,module,exports){
"use strict";module.exports=function(e,o){var t=_.extend({clearColor:2236962,addToDom:!0},o),n=new THREE.WebGLRenderer;return n.setPixelRatio(e.ratio),n.setClearColor(t.clearColor),t.addToDom&&(document.getElementById("container").appendChild(n.domElement),e.canvas=n.domElement,e.emitter.on("destroy",function(){n.domElement.remove()})),n};

},{}],60:[function(require,module,exports){
"use strict";module.exports=function(o){var e=!1,n=!0,t=$("body"),u=$(o.canvas),i="mousemove touchmove",s=_.debounce(function(){!e&&n&&(e=!0,t.addClass("hide-ui"))},1500),c=function(){e=!1,t.removeClass("hide-ui")},f=function(){e&&c(),s()};t.on(i,f),u.on(i,f),s(),o.emitter.on("destroy",function(){n=!1,c(),t.off(i,f),u.off(i,f)})};

},{}],61:[function(require,module,exports){
"use strict";module.exports=function(e,o){$(window).on("resize",o),e.emitter.on("destroy",function(){$(window).off("resize",o)}),o()};

},{}],62:[function(require,module,exports){
"use strict";module.exports=function(i,n){return function(){n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),i.setSize(window.innerWidth,window.innerHeight)}};

},{}],63:[function(require,module,exports){
"use strict";THREE.ConvolutionShader={defines:{KERNEL_SIZE_FLOAT:"25.0",KERNEL_SIZE_INT:"25"},uniforms:{tDiffuse:{type:"t",value:null},uImageIncrement:{type:"v2",value:new THREE.Vector2(.001953125,0)},cKernel:{type:"fv1",value:[]}},vertexShader:["uniform vec2 uImageIncrement;","varying vec2 vUv;","void main() {","vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float cKernel[ KERNEL_SIZE_INT ];","uniform sampler2D tDiffuse;","uniform vec2 uImageIncrement;","varying vec2 vUv;","void main() {","vec2 imageCoord = vUv;","vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );","for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {","sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];","imageCoord += uImageIncrement;","}","gl_FragColor = sum;","}"].join("\n"),buildKernel:function(e){var n,r,i,o,t=2*Math.ceil(3*e)+1;for(t>25&&(t=25),o=.5*(t-1),r=new Array(t),i=0,n=0;n<t;++n)r[n]=function(e,n){return Math.exp(-e*e/(2*n*n))}(n-o,e),i+=r[n];for(n=0;n<t;++n)r[n]/=i;return r}};

},{}],64:[function(require,module,exports){
"use strict";THREE.CopyShader={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")};

},{}],65:[function(require,module,exports){
"use strict";THREE.FXAAShader={uniforms:{tDiffuse:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(1/1024,1/512)}},vertexShader:["void main() {","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec2 resolution;","#define FXAA_REDUCE_MIN   (1.0/128.0)","#define FXAA_REDUCE_MUL   (1.0/8.0)","#define FXAA_SPAN_MAX     8.0","void main() {","vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;","vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;","vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;","vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );","vec3 rgbM  = rgbaM.xyz;","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float lumaNW = dot( rgbNW, luma );","float lumaNE = dot( rgbNE, luma );","float lumaSW = dot( rgbSW, luma );","float lumaSE = dot( rgbSE, luma );","float lumaM  = dot( rgbM,  luma );","float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );","float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );","vec2 dir;","dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));","dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));","float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );","float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );","dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),","max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),","dir * rcpDirMin)) * resolution;","vec4 rgbA = (1.0/2.0) * (","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (1.0/3.0 - 0.5)) +","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (2.0/3.0 - 0.5)));","vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (0.0/3.0 - 0.5)) +","texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (3.0/3.0 - 0.5)));","float lumaB = dot(rgbB, vec4(luma, 0.0));","if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {","gl_FragColor = rgbA;","} else {","gl_FragColor = rgbB;","}","}"].join("\n")};

},{}],66:[function(require,module,exports){
"use strict";THREE.FilmShader={uniforms:{tDiffuse:{type:"t",value:null},time:{type:"f",value:0},nIntensity:{type:"f",value:.5},sIntensity:{type:"f",value:.05},sCount:{type:"f",value:4096},grayscale:{type:"i",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float time;","uniform bool grayscale;","uniform float nIntensity;","uniform float sIntensity;","uniform float sCount;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 cTextureScreen = texture2D( tDiffuse, vUv );","float x = vUv.x * vUv.y * time *  1000.0;","x = mod( x, 13.0 ) * mod( x, 123.0 );","float dx = mod( x, 0.01 );","vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );","vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );","cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;","cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );","if( grayscale ) {","cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );","}","gl_FragColor =  vec4( cResult, cTextureScreen.a );","}"].join("\n")};

},{}],67:[function(require,module,exports){
"use strict";var soundcloud=require("soundcloud-badge"),mute=require("./mute"),soundOff=!1,audio=null,fetchAndPlaySong=null,timesCalledSoundcloud=0,Music=function(u,o){fetchAndPlaySong=function(){var e=++timesCalledSoundcloud;soundcloud({client_id:"6057c9af862bf245d4c402179e317f52",song:o.url,dark:!1,getFonts:!1},function(u,n,d,t){if(e===timesCalledSoundcloud){if(mute.muted())return void $(".npm-scb-white").hide();if($(".npm-scb-white").show(),u)throw u;audio=new Audio,audio.src=n,audio.play(),audio.loop=!0,audio.volume=o.volume||.6,$(audio).on("loadedmetadata",function(){audio&&(audio.currentTime=o.startTime||0)})}}),u.emitter.on("destroy",function(){audio&&(audio.pause(),audio=null),$(".npm-scb-white").remove()})},mute.muted()||(fetchAndPlaySong(),fetchAndPlaySong=null)};Music.prototype.muted=!1,mute.emitter.on("mute",function(u){audio&&audio.pause(),$(".npm-scb-white").hide()}),mute.emitter.on("unmute",function(u){audio&&audio.play(),fetchAndPlaySong&&(fetchAndPlaySong(),fetchAndPlaySong=null),$(".npm-scb-white").show()}),module.exports=Music;

},{"./mute":68,"soundcloud-badge":192}],68:[function(require,module,exports){
"use strict";var poemMute=require("poem-mute"),mute=poemMute();window.mutePrime=mute,window.mutePrimeEmitter=mute.emitter,module.exports=mute;

},{"poem-mute":188}],69:[function(require,module,exports){
"use strict";function roundTo(n,o){return"number"==typeof o?Math.round(Math.pow(10,o)*n)/Math.pow(10,o):n}THREE.Console={vector:function(n,o){var e;e=n instanceof THREE.Vector2||n instanceof THREE.Vector3||n instanceof THREE.Vector4?[n]:n,console.table(_.map(e,function(n){return _.map(n.toArray(),function(n){return roundTo(n,o)})}))},face:function(n){var o;o=n instanceof THREE.Face3?[n]:n,console.table(_.map(o,function(n){return[n.a,n.b,n.c]}))},matrix:function(n,o){var e,r,t,a,u;for(u=[],r=0,a=n instanceof THREE.Matrix4?n.elements:n,e=0;e<a.length;e++)0===r&&u.push([]),t=roundTo(a[e],o),u[Math.floor(e/4)%4].push(t),r++,r%=4,e%16==15&&(console.table(u),u=[])},quaternion:function(){var n=new THREE.Euler,o=function(n){return n/Math.PI},e=function(n){return function(o){return roundTo(o,n)}};return function(r,t){n.setFromQuaternion(r);var a=e(t),u=n.toArray().slice(0,3);console.table({quaternion:_.map(r.toArray(),a),eulerRad:_.map(u,a),eulerUnitPi:_.map(_.map(u,o),a)})}}(),euler:function(){var n=new THREE.Quaternion,o=function(n){return n/Math.PI},e=function(n){return function(o){return roundTo(o,n)}};return function(r,t){n.setFromEuler(r);var a=e(t),u=r.toArray().slice(0,3);console.table({quaternion:_.map(n.toArray(),a),eulerRad:_.map(u,a),eulerUnitPi:_.map(_.map(u,o),a)})}}()},window.consoleMatrix=THREE.Console.matrix,window.consoleVector=THREE.Console.vector,window.consoleFace=THREE.Console.face,window.consoleQuaternion=THREE.Console.quaternion,window.consoleEuler=THREE.Console.euler,module.exports=THREE.Console;

},{}],70:[function(require,module,exports){
"use strict";var calculateSquaredTextureWidth=function(e){for(var t=1,r=0;t*t<e/4;)r++,t=Math.pow(2,r);return t};module.exports=calculateSquaredTextureWidth;

},{}],71:[function(require,module,exports){
"use strict";module.exports=function(e){return function(){e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()}};

},{}],72:[function(require,module,exports){
"use strict";function _newBuffer(t,r){var e=new Float32Array(t*r);return new THREE.BufferAttribute(e,r)}function _duplicateBuffer(t,r,e,a){for(var u=e*t.itemSize,i=0;i<a;i++)for(var f=i*u,n=0;n<u;n++)r.array[f+n]=t.array[n]}function _addIndices(t,r,e){for(var a=new Float32Array(e*r),u=0;u<e;u++)for(var i=u*r,f=0;f<r;f++)a[i+f]=u;var n=new THREE.BufferAttribute(a,1);t.addAttribute("attributeIndex",n),t.attributes.attributeIndex.needsUpdate=!0}module.exports=function(t,r){var e=t.attributes.position,a=t.attributes.normal,u=t.attributes.uv,i=e.array.length/3,f=i*r,n=_newBuffer(f,3),o=_newBuffer(f,3),d=_newBuffer(f,2);return _duplicateBuffer(e,n,i,r),_duplicateBuffer(a,o,i,r),_duplicateBuffer(u,d,i,r),t.attributes.position=n,t.attributes.normal=o,t.attributes.uv=d,_addIndices(t,i,r),t};

},{}],73:[function(require,module,exports){
"use strict";module.exports=function(t){var e=new THREE.Camera;e.position.z=1;var n=new THREE.Scene,r=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2},texture:{type:"t",value:null}},vertexShader:"\n\t\t\t\tvoid main()\t{\n\t\t\t\t\tgl_Position = vec4( position, 1.0 );\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform sampler2D texture;\n\n\t\t\t\tvoid main()\t{\n\n\t\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\n\t\t\t\t\tvec4 color = texture2D( texture, uv );\n\n\t\t\t\t\tgl_FragColor = vec4( color.xyz, 1.0 );\n\n\t\t\t\t}\n\t\t\t"}));n.add(r);var o=r.material.uniforms;return function(r,u,a){o.resolution.value.set(a,a),o.texture.value=r,t.render(n,e,u)}};

},{}],74:[function(require,module,exports){
"use strict";function _nextPowerOfTwo(e){return e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,++e}function _createRenderTarget(e,r){return new THREE.WebGLRenderTarget(e,e,{wrapS:THREE.RepeatWrapping,wrapT:THREE.RepeatWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:r,type:THREE.FloatType,stencilBuffer:!1})}function _renderFn(e){var r=new THREE.Scene,t=new THREE.Camera,n=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2));return t.position.z=1,r.add(n),function(a,s){n.material=a,e.render(r,t,s)}}function _flipFn(e){var r=0,t=1;return function(){r=(r+1)%2,t=(t+1)%2,e.inputRenderTarget=e.renderTargets[r],e.outputRenderTarget=e.renderTargets[t]}}function _addPassFn(e,r,t){return function(r,n){var a=_.extend({size:100,stride:4,generateDatum:function(){},preRender:function(){},postRender:function(){},uniformName:"texture",autoUpdateUniform:!0,shaderMaterial:null,textureSideLength:null,active:!0},n);if(3===a.stride)var s=THREE.RGBFormat;else{if(4!==a.stride)throw new Error("Stride must be 3 or 4 to work with the RGB and RGBA formats.");var s=THREE.RGBAFormat}var i=_nextPowerOfTwo(Math.sqrt(a.size));a.textureSideLength=i;for(var o=new Float32Array(i*i*a.stride),u=0;u<o.length;u+=a.stride)a.generateDatum(o,u);var d=_createRenderTarget(i,s),p=_createRenderTarget(i,s);d.name="renderTargetA",p.name="renderTargetB";var f=new THREE.DataTexture(o,i,i);_.extend(f,{format:s,type:THREE.FloatType,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,needsUpdate:!0,flipY:!1}),t(f,d,i),t(f,p,i),f.dispose();var R={active:a.active,size:a.size,stride:a.stride,preRender:a.preRender,postRender:a.postRender,shaderMaterial:a.shaderMaterial,uniformName:a.uniformName,autoUpdateUniform:a.autoUpdateUniform,textureSideLength:a.textureSideLength,inputRenderTarget:null,outputRenderTarget:null,renderTargets:[d,p]};return R.flip=_flipFn(R),e.passes[r]=R,R}}function _renderAllFn(e,r){return function(){_.each(e.passes,function(e,r){e.active&&(e.flip(),e.autoUpdateUniform&&(e.shaderMaterial.uniforms[e.uniformName].value=e.inputRenderTarget))}),_.each(e.passes,function(r){r.active&&r.preRender(r,e.passes)}),_.each(e.passes,function(e){e.active&&r(e.shaderMaterial,e.outputRenderTarget)}),_.each(e.passes,function(r){r.active&&r.postRender(r,e.passes)})}}function _renderPassFn(e,r){return function(t){var n=_.isString(t)?e.passes[t]:t;n.flip(),n.autoUpdateUniform&&(n.shaderMaterial.uniforms[n.uniformName].value=n.inputRenderTarget),n.preRender(n,e.passes),r(n.shaderMaterial,n.outputRenderTarget),post.postRender(n,e.passes)}}var CopyTexture=require("./copy-texture");module.exports=function(e,r){var t={passes:{}};(new THREE.Camera).position.z=1;var n=(new THREE.Scene,CopyTexture(e)),a=_renderFn(e);return{passes:t.passes,addPass:_addPassFn(t,e,n),renderer:e,render:_renderAllFn(t,a),renderPass:_renderPassFn(t,a),copyTexture:n}};

},{"./copy-texture":73}],75:[function(require,module,exports){
"use strict";var loadImage=function(e,o,r){return new Promise(function(n,t){var a=($.Deferred(),$("<img />")),i=a[0];a.load(function(){_.isObject(o)&&(o[r]=i),n(i)}),a.error(function(){t("Could not load image: "+e)}),i.src=e})};module.exports=loadImage;

},{}],76:[function(require,module,exports){
"use strict";var loadText=function(t,e,n){return new Promise(function(o,a){$.ajax(t,{dataType:"text"}).then(function(t){_.isObject(e)&&(e[n]=t),o(t)},function(t){a(t)})})};module.exports=loadText;

},{}],77:[function(require,module,exports){
"use strict";var loadTexture=function(e,t,o){return new Promise(function(r,u){THREE.ImageUtils.loadTexture(e,void 0,function(e){_.isObject(t)&&(t[o]=e),r(e)},u)})};module.exports=loadTexture;

},{}],78:[function(require,module,exports){
"use strict";var random={flip:function(){return Math.random()>.5},range:function(n,r){return Math.random()*(r-n)+n},rangeInt:function(n,r){return Math.floor(this.range(n,r+1))},rangeLow:function(n,r){return Math.random()*Math.random()*(r-n)+n},rangeHigh:function(n,r){return(1-Math.random()*Math.random())*(r-n)+n}};module.exports=random;

},{}],79:[function(require,module,exports){
"use strict";THREE.AssimpJSONLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.AssimpJSONLoader.prototype={constructor:THREE.AssimpJSONLoader,texturePath:"",load:function(e,r,t,s,a){var n=this;this.texturePath=a&&"string"==typeof a?a:this.extractUrlBase(e);var o=new THREE.XHRLoader(this.manager);o.setCrossOrigin(this.crossOrigin),o.load(e,function(e){var t,a,o=JSON.parse(e);if(void 0!==(a=o.__metadata__)){if("assimp2json"!==a.format)return void s("Not an assimp2json scene");if(a.version<100&&a.version>=200)return void s("Unsupported assimp2json file format version")}t=n.parse(o),r(t)},t,s)},setCrossOrigin:function(e){this.crossOrigin=e},extractUrlBase:function(e){var r=e.split("/");return r.pop(),(r.length<1?".":r.join("/"))+"/"},parse:function(e){var r=this.parseList(e.meshes,this.parseMesh),t=this.parseList(e.materials,this.parseMaterial);return this.parseObject(e,e.rootnode,r,t)},parseList:function(e,r){for(var t=new Array(e.length),s=0;s<e.length;++s)t[s]=r.call(this,e[s]);return t},parseMesh:function(e){var r,t,s,a,n;for(r=new THREE.Geometry,a=e.vertices,t=0,s=a.length;t<s;)r.vertices.push(new THREE.Vector3(a[t++],a[t++],a[t++]));for(a=e.faces,t=0,s=a.length;t<s;++t){n=a[t];var o=new THREE.Face3(n[0],n[1],n[2]);r.faces.push(o)}for(e.texturecoords=e.texturecoords||[],t=0,s=e.texturecoords.length;t<s;++t){!function(e,r,t){var s,a,n,o,i,c;for(s=0,a=r.length;s<a;++s)n=r[s],o=2*n.a,i=2*n.b,c=2*n.c,t.push([new THREE.Vector2(e[o],e[o+1]),new THREE.Vector2(e[i],e[i+1]),new THREE.Vector2(e[c],e[c+1])])}(e.texturecoords[t],r.faces,r.faceVertexUvs[t])}if(e.normals){!function(e,r){var t,s,a,n,o,i;for(t=0,s=r.length;t<s;++t)a=r[t],n=3*a.a,o=3*a.b,i=3*a.c,a.vertexNormals=[new THREE.Vector3(e[n],e[n+1],e[n+2]),new THREE.Vector3(e[o],e[o+1],e[o+2]),new THREE.Vector3(e[i],e[i+1],e[i+2])]}(e.normals,r.faces)}if(e.colors&&e.colors[0]){!function(e,r){function t(e){var r=new THREE.Color;return r.setRGB(arr[0],arr[1],arr[2]),r}var s,a,n,o,i,c;for(s=0,a=r.length;s<a;++s)n=r[s],o=4*n.a,i=4*n.b,c=4*n.c,n.vertexColors=[t(o),t(i),t(c)]}(e.colors[0],r.faces)}return r.computeBoundingSphere(),r},parseMaterial:function(e){function r(e){var r=new THREE.Color;return r.setRGB(e[0],e[1],e[2]),r}var t,s,a=null,n=this,o=[],i={shading:THREE.SmoothShading};for(var t in e.properties)s=e.properties[t],"$tex.file"===s.key?1!==s.semantic&&5!==s.semantic&&6!==s.semantic&&2!==s.semantic||function(e){var r,t=new THREE.TextureLoader(n.manager);1===e?r="map":5===e?r="bumpMap":6===e?r="normalMap":2===e&&(r="specularMap"),o.push(r),t.setCrossOrigin(this.crossOrigin);var i=n.texturePath+"/"+s.value;i=i.replace(/\\/g,"/"),t.load(i,function(e){e&&(e.wrapS=e.wrapT=THREE.RepeatWrapping,a[r]=e,a.needsUpdate=!0)})}(s.semantic):"?mat.name"===s.key?i.name=s.value:"$clr.diffuse"===s.key?i.color=r(s.value):"$clr.specular"===s.key?i.specular=r(s.value):"$clr.emissive"===s.key?i.emissive=r(s.value):"$mat.shadingm"===s.key?1===s.value&&(i.shading=THREE.FlatShading):"$mat.shininess"===s.key&&(i.shininess=s.value);if(o.length)for(t=o.length-1;t>=0;--t)i[o[t]]=function(){var e=new Image;return e.width=1,e.height=1,new THREE.Texture(e)}();return a=new THREE.MeshPhongMaterial(i)},parseObject:function(e,r,t,s){var a,n,o=new THREE.Object3D;for(o.name=r.name||"",o.matrix=(new THREE.Matrix4).fromArray(r.transformation).transpose(),o.matrix.decompose(o.position,o.quaternion,o.scale),a=0;r.meshes&&a<r.meshes.length;++a)n=r.meshes[a],o.add(new THREE.Mesh(t[n],s[e.meshes[n].materialindex]));for(a=0;r.children&&a<r.children.length;++a)o.add(this.parseObject(e,r.children[a],t,s));return o}},module.exports=THREE.AssimpJSONLoader;

},{}],80:[function(require,module,exports){
"use strict";function onDeviceOrientationChangeEvent(t){deviceOrientation=t}function getOrientation(){switch(window.screen.orientation||window.screen.mozOrientation){case"landscape-primary":return 90;case"landscape-secondary":return-90;case"portrait-secondary":return 180;case"portrait-primary":return 0}return window.orientation||0}function onScreenOrientationChangeEvent(){screenOrientation=getOrientation()}var deviceOrientation={},screenOrientation=window.orientation||0;window.addEventListener("deviceorientation",onDeviceOrientationChangeEvent,!1),window.addEventListener("orientationchange",onScreenOrientationChangeEvent,!1),THREE.DeviceOrientationControls=function(t){this.object=t,this.object.rotation.reorder("YXZ"),this.freeze=!0,this.movementSpeed=1,this.rollSpeed=.005,this.autoAlign=!0,this.autoForward=!1,this.alpha=0,this.beta=0,this.gamma=0,this.orient=0,this.alignQuaternion=new THREE.Quaternion,this.orientationQuaternion=new THREE.Quaternion;var e=new THREE.Quaternion,n=new THREE.Quaternion,i=new THREE.Vector3,o=new THREE.Matrix4,a=new THREE.Euler(0,0,0,"YXZ"),r=new THREE.Quaternion,s=new THREE.Vector3(0,0,1),h=new THREE.Vector3(0,1,0),c=new THREE.Vector3(0,0,0),u=new THREE.Euler,E=new THREE.Quaternion,d=new THREE.Quaternion(-Math.sqrt(.5),0,0,Math.sqrt(.5));this.update=function(t){return function(t){this.freeze||(this.alpha=deviceOrientation.gamma?THREE.Math.degToRad(deviceOrientation.alpha):0,this.beta=deviceOrientation.beta?THREE.Math.degToRad(deviceOrientation.beta):0,this.gamma=deviceOrientation.gamma?THREE.Math.degToRad(deviceOrientation.gamma):0,this.orient=screenOrientation?THREE.Math.degToRad(screenOrientation):0,u.set(this.beta,this.alpha,-this.gamma,"YXZ"),e.setFromEuler(u),n.slerp(e,.5),this.autoAlign?this.orientationQuaternion.copy(e):this.orientationQuaternion.copy(n),this.orientationQuaternion.multiply(d),this.orientationQuaternion.multiply(E.setFromAxisAngle(s,-this.orient)),this.object.quaternion.copy(this.alignQuaternion),this.object.quaternion.multiply(this.orientationQuaternion),this.autoForward&&(i.set(0,0,-1).applyQuaternion(this.object.quaternion,"ZXY").setLength(this.movementSpeed/50),this.object.position.add(i)),this.autoAlign&&0!==this.alpha&&(this.autoAlign=!1,this.align()))}}(),this.align=function(){i.set(0,0,-1).applyQuaternion(r.copy(this.orientationQuaternion).inverse(),"ZXY"),a.setFromQuaternion(r.setFromRotationMatrix(o.lookAt(i,c,h))),a.set(0,a.y,0),this.alignQuaternion.setFromEuler(a)},this.connect=function(){this.freeze=!1},this.disconnect=function(){this.freze=!0}},module.exports=THREE.DeviceOrientationControls;

},{}],81:[function(require,module,exports){
"use strict";THREE.OrbitControls=function(t,e){function n(){return 2*Math.PI/60/60*E.autoRotateSpeed}function o(){return Math.pow(.95,E.zoomSpeed)}function i(t){if(!1!==E.enabled){if(t.preventDefault(),t.button===E.mouseButtons.ORBIT){if(!0===E.noRotate)return;V=x.ROTATE,m.set(t.clientX,t.clientY)}else if(t.button===E.mouseButtons.ZOOM){if(!0===E.noZoom)return;V=x.DOLLY,R.set(t.clientX,t.clientY)}else if(t.button===E.mouseButtons.PAN){if(!0===E.noPan)return;V=x.PAN,T.set(t.clientX,t.clientY)}V!==x.NONE&&(document.addEventListener("mousemove",a,!1),document.addEventListener("mouseup",s,!1),E.dispatchEvent(U))}}function a(t){if(!1!==E.enabled){t.preventDefault();var e=E.domElement===document?E.domElement.body:E.domElement;if(V===x.ROTATE){if(!0===E.noRotate)return;f.set(t.clientX,t.clientY),b.subVectors(f,m),E.rotateLeft(2*Math.PI*b.x/e.clientWidth*E.rotateSpeed),E.rotateUp(2*Math.PI*b.y/e.clientHeight*E.rotateSpeed),m.copy(f)}else if(V===x.DOLLY){if(!0===E.noZoom)return;H.set(t.clientX,t.clientY),M.subVectors(H,R),M.y>0?E.dollyIn():E.dollyOut(),R.copy(H)}else if(V===x.PAN){if(!0===E.noPan)return;O.set(t.clientX,t.clientY),y.subVectors(O,T),E.pan(y.x,y.y),T.copy(O)}V!==x.NONE&&E.update()}}function s(){!1!==E.enabled&&(document.removeEventListener("mousemove",a,!1),document.removeEventListener("mouseup",s,!1),E.dispatchEvent(Y),V=x.NONE)}function r(t){if(!1!==E.enabled&&!0!==E.noZoom&&V===x.NONE){t.preventDefault(),t.stopPropagation();var e=0;void 0!==t.wheelDelta?e=t.wheelDelta:void 0!==t.detail&&(e=-t.detail),e>0?E.dollyOut():E.dollyIn(),E.update(),E.dispatchEvent(U),E.dispatchEvent(Y)}}function c(t){if(!1!==E.enabled&&!0!==E.noKeys&&!0!==E.noPan)switch(t.keyCode){case E.keys.UP:E.pan(0,E.keyPanSpeed),E.update();break;case E.keys.BOTTOM:E.pan(0,-E.keyPanSpeed),E.update();break;case E.keys.LEFT:E.pan(E.keyPanSpeed,0),E.update();break;case E.keys.RIGHT:E.pan(-E.keyPanSpeed,0),E.update()}}function h(t){if(!1!==E.enabled){switch(t.touches.length){case 1:if(!0===E.noRotate)return;V=x.TOUCH_ROTATE,m.set(t.touches[0].pageX,t.touches[0].pageY);break;case 2:if(!0===E.noZoom)return;V=x.TOUCH_DOLLY;var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,o=Math.sqrt(e*e+n*n);R.set(0,o);break;case 3:if(!0===E.noPan)return;V=x.TOUCH_PAN,T.set(t.touches[0].pageX,t.touches[0].pageY);break;default:V=x.NONE}V!==x.NONE&&E.dispatchEvent(U)}}function u(t){if(!1!==E.enabled){t.preventDefault(),t.stopPropagation();var e=E.domElement===document?E.domElement.body:E.domElement;switch(t.touches.length){case 1:if(!0===E.noRotate)return;if(V!==x.TOUCH_ROTATE)return;f.set(t.touches[0].pageX,t.touches[0].pageY),b.subVectors(f,m),E.rotateLeft(2*Math.PI*b.x/e.clientWidth*E.rotateSpeed),E.rotateUp(2*Math.PI*b.y/e.clientHeight*E.rotateSpeed),m.copy(f),E.update();break;case 2:if(!0===E.noZoom)return;if(V!==x.TOUCH_DOLLY)return;var n=t.touches[0].pageX-t.touches[1].pageX,o=t.touches[0].pageY-t.touches[1].pageY,i=Math.sqrt(n*n+o*o);H.set(0,i),M.subVectors(H,R),M.y>0?E.dollyOut():E.dollyIn(),R.copy(H),E.update();break;case 3:if(!0===E.noPan)return;if(V!==x.TOUCH_PAN)return;O.set(t.touches[0].pageX,t.touches[0].pageY),y.subVectors(O,T),E.pan(y.x,y.y),T.copy(O),E.update();break;default:V=x.NONE}}}function d(){!1!==E.enabled&&(E.dispatchEvent(Y),V=x.NONE)}this.object=t,this.domElement=void 0!==e?e:document,this.enabled=!0,this.target=new THREE.Vector3,this.center=this.target,this.noZoom=!1,this.zoomSpeed=1,this.minDistance=0,this.maxDistance=1/0,this.noRotate=!1,this.rotateSpeed=1,this.noPan=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.noKeys=!1,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT};var l,p,E=this,m=new THREE.Vector2,f=new THREE.Vector2,b=new THREE.Vector2,T=new THREE.Vector2,O=new THREE.Vector2,y=new THREE.Vector2,v=new THREE.Vector3,g=new THREE.Vector3,R=new THREE.Vector2,H=new THREE.Vector2,M=new THREE.Vector2,P=0,L=0,N=1,A=new THREE.Vector3,w=new THREE.Vector3,k=new THREE.Quaternion,x={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},V=x.NONE;this.target0=this.target.clone(),this.position0=this.object.position.clone();var j=(new THREE.Quaternion).setFromUnitVectors(t.up,new THREE.Vector3(0,1,0)),D=j.clone().inverse(),S={type:"change"},U={type:"start"},Y={type:"end"};this.rotateLeft=function(t){void 0===t&&(t=n()),L-=t},this.rotateUp=function(t){void 0===t&&(t=n()),P-=t},this.panLeft=function(t){var e=this.object.matrix.elements;v.set(e[0],e[1],e[2]),v.multiplyScalar(-t),A.add(v)},this.panUp=function(t){var e=this.object.matrix.elements;v.set(e[4],e[5],e[6]),v.multiplyScalar(t),A.add(v)},this.pan=function(t,e){var n=E.domElement===document?E.domElement.body:E.domElement;if(void 0!==E.object.fov){var o=E.object.position,i=o.clone().sub(E.target),a=i.length();a*=Math.tan(E.object.fov/2*Math.PI/180),E.panLeft(2*t*a/n.clientHeight),E.panUp(2*e*a/n.clientHeight)}else void 0!==E.object.top?(E.panLeft(t*(E.object.right-E.object.left)/n.clientWidth),E.panUp(e*(E.object.top-E.object.bottom)/n.clientHeight)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){void 0===t&&(t=o()),N/=t},this.dollyOut=function(t){void 0===t&&(t=o()),N*=t},this.update=function(){var t=this.object.position;g.copy(t).sub(this.target),g.applyQuaternion(j),l=Math.atan2(g.x,g.z),p=Math.atan2(Math.sqrt(g.x*g.x+g.z*g.z),g.y),this.autoRotate&&V===x.NONE&&this.rotateLeft(n()),l+=L,p+=P,l=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,l)),p=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,p)),p=Math.max(1e-6,Math.min(Math.PI-1e-6,p));var e=g.length()*N;e=Math.max(this.minDistance,Math.min(this.maxDistance,e)),this.target.add(A),g.x=e*Math.sin(p)*Math.sin(l),g.y=e*Math.cos(p),g.z=e*Math.sin(p)*Math.cos(l),g.applyQuaternion(D),t.copy(this.target).add(g),this.object.lookAt(this.target),L=0,P=0,N=1,A.set(0,0,0),(w.distanceToSquared(this.object.position)>1e-6||8*(1-k.dot(this.object.quaternion))>1e-6)&&(this.dispatchEvent(S),w.copy(this.object.position),k.copy(this.object.quaternion))},this.reset=function(){V=x.NONE,this.target.copy(this.target0),this.object.position.copy(this.position0),this.update()},this.getPolarAngle=function(){return p},this.getAzimuthalAngle=function(){return l},this.domElement.addEventListener("contextmenu",function(t){t.preventDefault()},!1),this.domElement.addEventListener("mousedown",i,!1),this.domElement.addEventListener("mousewheel",r,!1),this.domElement.addEventListener("DOMMouseScroll",r,!1),this.domElement.addEventListener("touchstart",h,!1),this.domElement.addEventListener("touchend",d,!1),this.domElement.addEventListener("touchmove",u,!1),window.addEventListener("keydown",c,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,module.exports=THREE.OrbitControls;

},{}],82:[function(require,module,exports){
"use strict";var Stats=function(){var e=Date.now(),t=e,n=0,i=1/0,a=0,d=0,o=1/0,l=0,s=0,r=0,c=document.createElement("div");c.id="stats",c.addEventListener("mousedown",function(e){e.preventDefault(),g(++r%2)},!1),c.style.cssText="width:80px;opacity:0.9;cursor:pointer";var p=document.createElement("div");p.id="fps",p.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002",c.appendChild(p);var h=document.createElement("div");h.id="fpsText",h.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px",h.innerHTML="FPS",p.appendChild(h);var f=document.createElement("div");for(f.id="fpsGraph",f.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff",p.appendChild(f);f.children.length<74;){var x=document.createElement("span");x.style.cssText="width:1px;height:30px;float:left;background-color:#113",f.appendChild(x)}var m=document.createElement("div");m.id="ms",m.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none",c.appendChild(m);var u=document.createElement("div");u.id="msText",u.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px",u.innerHTML="MS",m.appendChild(u);var v=document.createElement("div");for(v.id="msGraph",v.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0",m.appendChild(v);v.children.length<74;){var y=document.createElement("span");y.style.cssText="width:1px;height:30px;float:left;background-color:#131",v.appendChild(y)}var g=function(e){switch(r=e){case 0:p.style.display="block",m.style.display="none";break;case 1:p.style.display="none",m.style.display="block"}},b=function(e,t){e.appendChild(e.firstChild).style.height=t+"px"};return{REVISION:12,domElement:c,setMode:g,begin:function(){e=Date.now()},end:function(){var r=Date.now();return n=r-e,i=Math.min(i,n),a=Math.max(a,n),u.textContent=n+" MS ("+i+"-"+a+")",b(v,Math.min(30,30-n/200*30)),s++,r>t+1e3&&(d=Math.round(1e3*s/(r-t)),o=Math.min(o,d),l=Math.max(l,d),h.textContent=d+" FPS ("+o+"-"+l+")",b(f,Math.min(30,30-d/100*30)),t=r,s=0),r},update:function(){e=this.end()}}};"object"==typeof module&&(module.exports=Stats);

},{}],83:[function(require,module,exports){
"use strict";THREE.StereoEffect=function(e){this.separation=3;var t,r,a=new THREE.Vector3,o=new THREE.Quaternion,i=new THREE.Vector3,n=new THREE.PerspectiveCamera,s=new THREE.PerspectiveCamera;e.autoClear=!1,this.setSize=function(a,o){t=a/2,r=o,e.setSize(a,o)},this.render=function(p,c){p.updateMatrixWorld(),void 0===c.parent&&c.updateMatrixWorld(),c.matrixWorld.decompose(a,o,i),n.fov=c.fov,n.aspect=.5*c.aspect,n.near=c.near,n.far=c.far,n.updateProjectionMatrix(),n.position.copy(a),n.quaternion.copy(o),n.translateX(-this.separation),s.near=c.near,s.far=c.far,s.projectionMatrix=n.projectionMatrix,s.position.copy(a),s.quaternion.copy(o),s.translateX(this.separation),e.setViewport(0,0,2*t,r),e.clear(),e.setViewport(0,0,t,r),e.render(p,n),e.setViewport(t,0,t,r),e.render(p,s)}},module.exports=THREE.StereoEffect;

},{}],84:[function(require,module,exports){
"use strict";module.exports={name:"Blobs",description:"Raycasting",order:3,config:{camera:{}},components:{renderer:{function:require("../js/renderers/basic-renderer")},controls:{construct:require("../js/components/cameras/Controls")},mouse:{function:require("../js/components/hids/mouse-tracker")},grid:{construct:require("../js/demos/Grid")},blobs:{function:require("../js/components/ambiance/blobs/blobs")}}};

},{"../js/components/ambiance/blobs/blobs":15,"../js/components/cameras/Controls":20,"../js/components/hids/mouse-tracker":25,"../js/demos/Grid":38,"../js/renderers/basic-renderer":55}],85:[function(require,module,exports){
"use strict";module.exports={name:"Carbon Dioxide Earth",description:"Mapping NASA Data",order:0,config:{camera:{x:-400,far:3e3}},components:{renderer:{function:require("../js/renderers/basic-renderer")},sphere:{construct:require("../js/demos/Earth"),properties:{}},controls:{construct:require("../js/components/cameras/Controls"),properties:{minDistance:500,maxDistance:1e3,zoomSpeed:.1,autoRotate:!0,autoRotateSpeed:.2}},info:{construct:require("../js/components/Info"),properties:{documentTitle:"Earth's CO2 – a Three.js Visualization adapted by Greg Tatum",title:"Earth's CO2",subtitle:"3d Visualisation of a map from NASA",appendCredits:"<br/> Map visualization by <a href='http://svs.gsfc.nasa.gov/cgi-bin/details.cgi?aid=11719'>NASA's Goddard Space Flight Center</a>",titleCss:{"font-size":"3.35em"},subtitleCss:{"font-size":"0.7em"},showArrowNext:!0}},stars:{construct:require("../js/components/Stars")},lights:{construct:require("../js/components/lights/TrackCameraLights")}}};

},{"../js/components/Info":11,"../js/components/Stars":12,"../js/components/cameras/Controls":20,"../js/components/lights/TrackCameraLights":26,"../js/demos/Earth":34,"../js/renderers/basic-renderer":55}],86:[function(require,module,exports){
"use strict";module.exports={name:"Cubic",description:"An Cubican Experiment",order:0,config:{camera:{x:0,z:500,near:.1,fov:40}},components:{renderer:{function:require("../js/renderers/effects-renderer")},restrictedCamera:{construct:require("../js/components/cameras/RestrictedCamera")},wireTerrain:{construct:require("../js/demos/wire-terrain/terrain"),properties:{positionY:-250}},particles:{function:require("../js/components/ambiance/particles/particles")},music:{construct:require("../js/sound/Music"),properties:{url:"https://soundcloud.com/cabbibo/that-was-just-stupidly"}},dragScroll:{function:require("../js/components/utils/drag-scroll")},sky:{function:require("../js/components/ambiance/Sky"),properties:{width:50}}}};

},{"../js/components/ambiance/Sky":14,"../js/components/ambiance/particles/particles":17,"../js/components/cameras/RestrictedCamera":22,"../js/components/utils/drag-scroll":29,"../js/demos/wire-terrain/terrain":43,"../js/renderers/effects-renderer":57,"../js/sound/Music":67}],87:[function(require,module,exports){
"use strict";module.exports={name:"Endless Terrain",description:"An ever-repeating environment",order:0,config:{camera:{x:0,z:500,near:.1,fov:40}},components:{renderer:{function:require("../js/renderers/effects-renderer")},restrictedCamera:{construct:require("../js/components/cameras/RestrictedCamera")},endlessTerrain:{construct:require("../js/demos/EndlessTerrain/endless"),properties:{positionY:-250}},credits:{function:require("../js/demos/EndlessTerrain/credits")},particles:{function:require("../js/components/ambiance/particles/particles")},cloudsTop:{construct:require("../js/components/ambiance/Clouds"),properties:{height:200,rotation:Math.PI/2}},animator:{function:require("../js/components/animator"),properties:require("../js/demos/EndlessTerrain/keyframes.js")}}};

},{"../js/components/ambiance/Clouds":13,"../js/components/ambiance/particles/particles":17,"../js/components/animator":18,"../js/components/cameras/RestrictedCamera":22,"../js/demos/EndlessTerrain/credits":35,"../js/demos/EndlessTerrain/endless":36,"../js/demos/EndlessTerrain/keyframes.js":37,"../js/renderers/effects-renderer":57}],88:[function(require,module,exports){
"use strict";module.exports={name:"Gpu Processor Example",description:"Positioning stored in a frame buffer",order:0,config:{camera:{x:-300,near:.1,far:5e3,fov:40}},components:{renderer:{function:require("../js/renderers/basic-renderer")},controls:{construct:require("../js/components/cameras/Controls")},fboPositioning:{function:require("../js/components/fbo-positioning/fbo")}}};

},{"../js/components/cameras/Controls":20,"../js/components/fbo-positioning/fbo":24,"../js/renderers/basic-renderer":55}],89:[function(require,module,exports){
"use strict";module.exports={"light-beams":require("./light-beams"),cubic:require("./cubic"),postprocessing:require("./postprocessing"),blobs:require("./blobs"),meshGroupBoxDemo:require("./meshGroupBoxDemo"),carbonDioxideEarth:require("./carbonDioxideEarth"),endlessTerrain:require("./endlessTerrain"),tetrahedra:require("./tetrahedra"),sineGravityCloud:require("./sineGravityCloud"),vr:require("./vr"),"fbo-positioning":require("./fbo-positioning")};

},{"./blobs":84,"./carbonDioxideEarth":85,"./cubic":86,"./endlessTerrain":87,"./fbo-positioning":88,"./light-beams":90,"./meshGroupBoxDemo":91,"./postprocessing":92,"./sineGravityCloud":93,"./tetrahedra":94,"./vr":95}],90:[function(require,module,exports){
"use strict";var LightBeam=require("../js/components/ambiance/light-beam/light-beam");module.exports={name:"Light Beams",description:"Atmospheric Lighting",order:0,config:{camera:{x:0,z:500,near:.1,fov:40}},components:{renderer:{function:require("../js/renderers/basic-renderer")},controls:{construct:require("../js/components/cameras/Controls")},lightBeam1:{function:LightBeam,properties:{position:[100,-150,0],color:11167249,lightLength:200}},lightBeam2:{function:LightBeam,properties:{position:[100,-150,0],color:13386769,lightLength:300}},lightBeam4:{function:LightBeam,properties:{position:[100,-150,0],color:16716049,lightLength:250}},lightBeam3:{function:LightBeam,properties:{position:[100,-150,0],color:15606289,lightLength:200}},lightLeftBeam1:{function:LightBeam,properties:{position:[-100,-150,0],color:1157734,lightLength:200}},lightLeftBeam2:{function:LightBeam,properties:{position:[-100,-150,0],color:1166404,lightLength:300}},lightLeftBeam4:{function:LightBeam,properties:{position:[-100,-150,0],color:1179409,lightLength:250}},lightLeftBeam3:{function:LightBeam,properties:{position:[-100,-150,0],color:1175074,lightLength:200}},sky:{function:require("../js/components/ambiance/Sky"),properties:{width:50}}}};

},{"../js/components/ambiance/Sky":14,"../js/components/ambiance/light-beam/light-beam":16,"../js/components/cameras/Controls":20,"../js/renderers/basic-renderer":55}],91:[function(require,module,exports){
"use strict";module.exports={name:"MeshGroup() Proof of Concept",description:"Batching multiple Three.js meshes into one draw call",order:50,config:{camera:{x:-400}},components:{renderer:{function:require("../js/renderers/basic-renderer")},demo:{construct:require("../js/demos/MeshGroupBoxDemo"),properties:{}},controls:{construct:require("../js/components/cameras/Controls")},grid:{construct:require("../js/demos/Grid")},stats:{construct:require("../js/components/utils/Stats")}}};

},{"../js/components/cameras/Controls":20,"../js/components/utils/Stats":28,"../js/demos/Grid":38,"../js/demos/MeshGroupBoxDemo":40,"../js/renderers/basic-renderer":55}],92:[function(require,module,exports){
"use strict";module.exports={name:"Post Processing",description:"",order:0,config:{camera:{x:-400}},components:{renderer:{function:require("../js/renderers/postprocess-renderer")},controls:{construct:require("../js/components/cameras/Controls")},grid:{construct:require("../js/demos/Grid")},tree:{function:require("../js/components/models/tree"),properties:{position:[0,-50,0],scale:[20,20,20]}},lights:{construct:require("../js/components/lights/TrackCameraLights")}}};

},{"../js/components/cameras/Controls":20,"../js/components/lights/TrackCameraLights":26,"../js/components/models/tree":27,"../js/demos/Grid":38,"../js/renderers/postprocess-renderer":58}],93:[function(require,module,exports){
"use strict";module.exports={name:"Sine Gravity Cloud",description:"An evolving cloud of movement",order:0,config:{camera:{x:-400}},components:{renderer:{function:require("../js/renderers/basic-renderer")},controls:{construct:require("../js/components/cameras/Controls")},pointcloud:{construct:require("../js/demos/sine-gravity-cloud/sine")},grid:{construct:require("../js/demos/Grid")}}};

},{"../js/components/cameras/Controls":20,"../js/demos/Grid":38,"../js/demos/sine-gravity-cloud/sine":41,"../js/renderers/basic-renderer":55}],94:[function(require,module,exports){
"use strict";module.exports={name:"Tetrahedra",description:"Live coding demo",order:0,config:{camera:{x:-300,near:.1,far:1e4,fov:40}},components:{renderer:{function:require("../js/renderers/effects-renderer")},controls:{construct:require("../js/components/cameras/Controls")},mouse:{function:require("../js/components/hids/mouse-tracker")},tetrahedra:{function:require("../js/demos/tetrahedra"),properties:{dispersion:150,radius:10,count:100,mouseRef:"mouse"}},lights:{construct:require("../js/components/lights/TrackCameraLights")},cloudsTop:{construct:require("../js/components/ambiance/Clouds"),properties:{width:2e3,height:1e3,rotation:-Math.PI/2}},cloudsBottom:{construct:require("../js/components/ambiance/Clouds"),properties:{width:2e3,height:-1e3,rotation:-Math.PI/2,offset:new THREE.Vector2(-.3,.8)}}}};

},{"../js/components/ambiance/Clouds":13,"../js/components/cameras/Controls":20,"../js/components/hids/mouse-tracker":25,"../js/components/lights/TrackCameraLights":26,"../js/demos/tetrahedra":42,"../js/renderers/effects-renderer":57}],95:[function(require,module,exports){
"use strict";module.exports={name:"VR Demo",description:"The Sine Gravity wave as a VR demo",order:0,config:{camera:{x:-300,fov:70}},components:{renderer:{function:require("../js/renderers/cardboard-renderer")},controls:{construct:require("../js/components/cameras/Orientation")},cameraRotation:{construct:require("../js/components/cameras/RotateAroundOrigin")},grid:{construct:require("../js/demos/Grid")},pointcloud:{construct:require("../js/demos/sine-gravity-cloud/sine"),properties:{count:5e4,pointSize:4}}}};

},{"../js/components/cameras/Orientation":21,"../js/components/cameras/RotateAroundOrigin":23,"../js/demos/Grid":38,"../js/demos/sine-gravity-cloud/sine":41,"../js/renderers/cardboard-renderer":56}],96:[function(require,module,exports){
function ClassList(n){function t(n){var t=s();indexof(t,n)>-1||(t.push(n),f(t))}function r(n){var t=s(),r=indexof(t,n);-1!==r&&(t.splice(r,1),f(t))}function e(n){return indexof(s(),n)>-1}function i(n){return e(n)?(r(n),!1):(t(n),!0)}function u(){return n.className}function o(n){return s()[n]||null}function s(){return filter(n.className.split(" "),isTruthy)}function f(t){var r=t.length;n.className=t.join(" "),a.length=r;for(var e=0;e<t.length;e++)a[e]=t[e];delete t[r]}var l=n.classList;if(l)return l;var a={add:t,remove:r,contains:e,toggle:i,toString:u,length:0,item:o};return a}function filter(n,t){for(var r=[],e=0;e<n.length;e++)t(n[e])&&r.push(n[e]);return r}function isTruthy(n){return!!n}var indexof=require("indexof");module.exports=ClassList;

},{"indexof":136}],97:[function(require,module,exports){
!function(){var e=function(e){function t(e,t){if(e.indexOf)return e.indexOf(t);for(var r=e.length;r--;)if(e[r]===t)return r;return-1}function r(e,r){var n=t(e,r);-1!==n&&e.splice(n,1)}function n(e,t){return"[object "+t+"]"===Object.prototype.toString.call(e)}function s(e){return n(e,"RegExp")}function i(e){return n(e,"Array")}function a(e){return"function"==typeof e}function o(e){return null===e||"null"===e?null:"true"===e||"false"!==e&&(e===f||"undefined"===e?f:""===e||isNaN(e)?e:parseFloat(e))}function u(e){for(var t=e.length,r=[];t--;)r[t]=o(e[t]);return r}function h(e,t){for(var r,n,s,a,u=(e||"").replace("?","").split("&"),h=-1,c={};n=u[++h];)r=n.indexOf("="),a=n.substring(0,r),s=decodeURIComponent(n.substring(r+1)),!1!==t&&(s=o(s)),a in c?i(c[a])?c[a].push(s):c[a]=[c[a],s]:c[a]=s;return c}function c(){this.bypassed=new e.Signal,this.routed=new e.Signal,this._routes=[],this._prevRoutes=[],this._piped=[],this.resetState()}function p(t,r,n,i){var a=s(t),o=i.patternLexer;this._router=i,this._pattern=t,this._paramsIds=a?null:o.getParamIds(t),this._optionalParamsIds=a?null:o.getOptionalParamsIds(t),this._matchRegexp=a?t:o.compilePattern(t,i.ignoreCase),this.matched=new e.Signal,this.switched=new e.Signal,r&&this.matched.add(r),this._priority=n||0}var d,l,f;return l=""===/t(.+)?/.exec("t")[1],c.prototype={greedy:!1,greedyEnabled:!0,ignoreCase:!0,ignoreState:!1,shouldTypecast:!1,normalizeFn:null,resetState:function(){this._prevRoutes.length=0,this._prevMatchedRequest=null,this._prevBypassedRequest=null},create:function(){return new c},addRoute:function(e,t,r){var n=new p(e,t,r,this);return this._sortedInsert(n),n},removeRoute:function(e){r(this._routes,e),e._destroy()},removeAllRoutes:function(){for(var e=this.getNumRoutes();e--;)this._routes[e]._destroy();this._routes.length=0},parse:function(e,t){if(e=e||"",t=t||[],this.ignoreState||e!==this._prevMatchedRequest&&e!==this._prevBypassedRequest){var r,n=this._getMatchedRoutes(e),s=0,i=n.length;if(i)for(this._prevMatchedRequest=e,this._notifyPrevRoutes(n,e),this._prevRoutes=n;s<i;)r=n[s],r.route.matched.dispatch.apply(r.route.matched,t.concat(r.params)),r.isFirst=!s,this.routed.dispatch.apply(this.routed,t.concat([e,r])),s+=1;else this._prevBypassedRequest=e,this.bypassed.dispatch.apply(this.bypassed,t.concat([e]));this._pipeParse(e,t)}},_notifyPrevRoutes:function(e,t){for(var r,n=0;r=this._prevRoutes[n++];)r.route.switched&&this._didSwitch(r.route,e)&&r.route.switched.dispatch(t)},_didSwitch:function(e,t){for(var r,n=0;r=t[n++];)if(r.route===e)return!1;return!0},_pipeParse:function(e,t){for(var r,n=0;r=this._piped[n++];)r.parse(e,t)},getNumRoutes:function(){return this._routes.length},_sortedInsert:function(e){var t=this._routes,r=t.length;do{--r}while(t[r]&&e._priority<=t[r]._priority);t.splice(r+1,0,e)},_getMatchedRoutes:function(e){for(var t,r=[],n=this._routes,s=n.length;(t=n[--s])&&((!r.length||this.greedy||t.greedy)&&t.match(e)&&r.push({route:t,params:t._getParamsArray(e)}),this.greedyEnabled||!r.length););return r},pipe:function(e){this._piped.push(e)},unpipe:function(e){r(this._piped,e)},toString:function(){return"[crossroads numRoutes:"+this.getNumRoutes()+"]"}},d=new c,d.VERSION="0.12.2",d.NORM_AS_ARRAY=function(e,t){return[t.vals_]},d.NORM_AS_OBJECT=function(e,t){return[t]},p.prototype={greedy:!1,rules:void 0,match:function(e){return e=e||"",this._matchRegexp.test(e)&&this._validateParams(e)},_validateParams:function(e){var t,r=this.rules,n=this._getParamsObject(e);for(t in r)if("normalize_"!==t&&r.hasOwnProperty(t)&&!this._isValidParam(e,t,n))return!1;return!0},_isValidParam:function(e,r,n){var o=this.rules[r],u=n[r],h=!1,c=0===r.indexOf("?");return null==u&&this._optionalParamsIds&&-1!==t(this._optionalParamsIds,r)?h=!0:s(o)?(c&&(u=n[r+"_"]),h=o.test(u)):i(o)?(c&&(u=n[r+"_"]),h=this._isValidArrayRule(o,u)):a(o)&&(h=o(u,e,n)),h},_isValidArrayRule:function(e,r){if(!this._router.ignoreCase)return-1!==t(e,r);"string"==typeof r&&(r=r.toLowerCase());for(var n,s=e.length;s--;)if(n=e[s],("string"==typeof n?n.toLowerCase():n)===r)return!0;return!1},_getParamsObject:function(e){for(var r,n,s=this._router.shouldTypecast,i=this._router.patternLexer.getParamValues(e,this._matchRegexp,s),a={},u=i.length;u--;)n=i[u],this._paramsIds&&(r=this._paramsIds[u],0===r.indexOf("?")&&n&&(a[r+"_"]=n,n=h(n,s),i[u]=n),l&&""===n&&-1!==t(this._optionalParamsIds,r)&&(n=void 0,i[u]=n),a[r]=n),a[u]=n;return a.request_=s?o(e):e,a.vals_=i,a},_getParamsArray:function(e){var t=this.rules?this.rules.normalize_:null;return t=t||this._router.normalizeFn,t&&a(t)?t(e,this._getParamsObject(e)):this._getParamsObject(e).vals_},interpolate:function(e){var t=this._router.patternLexer.interpolate(this._pattern,e);if(!this._validateParams(t))throw new Error("Generated string doesn't validate against `Route.rules`.");return t},dispose:function(){this._router.removeRoute(this)},_destroy:function(){this.matched.dispose(),this.switched.dispose(),this.matched=this.switched=this._pattern=this._matchRegexp=null},toString:function(){return'[Route pattern:"'+this._pattern+'", numListeners:'+this.matched.getNumListeners()+"]"}},c.prototype.patternLexer=function(){function e(e,t){var r,n=[];for(e.lastIndex=0;r=e.exec(t);)n.push(r[1]);return n}function t(t){return e(d,t)}function r(t){return e(l.OP.rgx,t)}function n(e,t){return e=e||"",e&&(v===f?e=e.replace(c,""):v===_&&(e=e.replace(p,"")),e=s(e,"rgx","save"),e=e.replace(h,"\\$&"),e=s(e,"rRestore","res"),v===f&&(e="\\/?"+e)),v!==g&&(e+="\\/?"),new RegExp("^"+e+"$",t?"i":"")}function s(e,t,r){var n,s;for(s in l)l.hasOwnProperty(s)&&(n=l[s],e=e.replace(n[t],n[r]));return e}function a(e,t,r){var n=t.exec(e);return n&&(n.shift(),r&&(n=u(n))),n}function o(e,t){if(t=t||{},"string"!=typeof e)throw new Error("Route pattern should be a string.");var r=function(e,r){var n;if(r="?"===r.substr(0,1)?r.substr(1):r,null!=t[r]){if("object"==typeof t[r]){var s,a=[];for(var o in t[r])if(s=t[r][o],i(s))for(var u in s)"[]"==o.slice(-2)?a.push(encodeURI(o.slice(0,-2))+"[]="+encodeURI(s[u])):a.push(encodeURI(o+"="+s[u]));else a.push(encodeURI(o+"="+s));n="?"+a.join("&")}else n=String(t[r]);if(-1===e.indexOf("*")&&-1!==n.indexOf("/"))throw new Error('Invalid value "'+n+'" for segment "'+e+'".')}else{if(-1!==e.indexOf("{"))throw new Error("The segment "+e+" is required.");n=""}return n};return l.OS.trail||(l.OS.trail=new RegExp("(?:"+l.OS.id+")+$")),e.replace(l.OS.rgx,l.OS.save).replace(d,r).replace(l.OS.trail,"").replace(l.OS.rRestore,"/")}var h=/[\\.+*?\^$\[\](){}\/'#]/g,c=/^\/|\/$/g,p=/\/$/g,d=/(?:\{|:)([^}:]+)(?:\}|:)/g,l={OS:{rgx:/([:}]|\w(?=\/))\/?(:|(?:\{\?))/g,save:"$1{{id}}$2",res:"\\/?"},RS:{rgx:/([:}])\/?(\{)/g,save:"$1{{id}}$2",res:"\\/"},RQ:{rgx:/\{\?([^}]+)\}/g,res:"\\?([^#]+)"},OQ:{rgx:/:\?([^:]+):/g,res:"(?:\\?([^#]*))?"},OR:{rgx:/:([^:]+)\*:/g,res:"(.*)?"},RR:{rgx:/\{([^}]+)\*\}/g,res:"(.+)"},RP:{rgx:/\{([^}]+)\}/g,res:"([^\\/?]+)"},OP:{rgx:/:([^:]+):/g,res:"([^\\/?]+)?/?"}},f=1,g=2,_=3,v=f;return function(){var e,t;for(e in l)l.hasOwnProperty(e)&&(t=l[e],t.id="__CR_"+e+"__",t.save="save"in t?t.save.replace("{{id}}",t.id):t.id,t.rRestore=new RegExp(t.id,"g"))}(),{strict:function(){v=g},loose:function(){v=f},legacy:function(){v=_},getParamIds:t,getOptionalParamsIds:r,getParamValues:a,compilePattern:n,interpolate:o}}(),d};"function"==typeof define&&define.amd?define(["signals"],e):"undefined"!=typeof module&&module.exports?module.exports=e(require("signals")):window.crossroads=e(window.signals)}();

},{"signals":191}],98:[function(require,module,exports){
module.exports=function(r,n,t,u,e){var a=function(n){var u=1-n;return 3*u*u*n*r+3*u*n*n*t+n*n*n},f=function(r){var t=1-r;return 3*t*t*r*n+3*t*r*r*u+r*r*r},i=function(n){var u=1-n;return 3*(2*(n-1)*n+u*u)*r+3*(-n*n*n+2*u*n)*t};return function(r){var n,t,u,o,c,v,b=r;for(u=b,v=0;v<8;v++){if(o=a(u)-b,Math.abs(o)<e)return f(u);if(c=i(u),Math.abs(c)<1e-6)break;u-=o/c}if(n=0,t=1,u=b,u<n)return f(n);if(u>t)return f(t);for(;n<t;){if(o=a(u),Math.abs(o-b)<e)return f(u);b>o?n=u:t=u,u=.5*(t-n)+n}return f(u)}};

},{}],99:[function(require,module,exports){
function backInOut(n){var t=2.5949095;return(n*=2)<1?n*n*((t+1)*n-t)*.5:.5*((n-=2)*n*((t+1)*n+t)+2)}module.exports=backInOut;

},{}],100:[function(require,module,exports){
function backIn(n){var r=1.70158;return n*n*((r+1)*n-r)}module.exports=backIn;

},{}],101:[function(require,module,exports){
function backOut(t){var u=1.70158;return--t*t*((u+1)*t+u)+1}module.exports=backOut;

},{}],102:[function(require,module,exports){
function bounceInOut(u){return u<.5?.5*(1-bounceOut(1-2*u)):.5*bounceOut(2*u-1)+.5}var bounceOut=require("./bounce-out");module.exports=bounceInOut;

},{"./bounce-out":104}],103:[function(require,module,exports){
function bounceIn(u){return 1-bounceOut(1-u)}var bounceOut=require("./bounce-out");module.exports=bounceIn;

},{"./bounce-out":104}],104:[function(require,module,exports){
function bounceOut(u){var e=u*u;return u<4/11?7.5625*e:u<8/11?9.075*e-9.9*u+3.4:u<.9?4356/361*e-35442/1805*u+16061/1805:10.8*u*u-20.52*u+10.72}module.exports=bounceOut;

},{}],105:[function(require,module,exports){
function circInOut(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}module.exports=circInOut;

},{}],106:[function(require,module,exports){
function circIn(r){return 1-Math.sqrt(1-r*r)}module.exports=circIn;

},{}],107:[function(require,module,exports){
function circOut(t){return Math.sqrt(1- --t*t)}module.exports=circOut;

},{}],108:[function(require,module,exports){
function cubicInOut(u){return u<.5?4*u*u*u:.5*Math.pow(2*u-2,3)+1}module.exports=cubicInOut;

},{}],109:[function(require,module,exports){
function cubicIn(c){return c*c*c}module.exports=cubicIn;

},{}],110:[function(require,module,exports){
function cubicOut(u){var c=u-1;return c*c*c+1}module.exports=cubicOut;

},{}],111:[function(require,module,exports){
function elasticInOut(t){return t<.5?.5*Math.sin(13*Math.PI/2*2*t)*Math.pow(2,10*(2*t-1)):.5*Math.sin(-13*Math.PI/2*(2*t-1+1))*Math.pow(2,-10*(2*t-1))+1}module.exports=elasticInOut;

},{}],112:[function(require,module,exports){
function elasticIn(t){return Math.sin(13*t*Math.PI/2)*Math.pow(2,10*(t-1))}module.exports=elasticIn;

},{}],113:[function(require,module,exports){
function elasticOut(t){return Math.sin(-13*(t+1)*Math.PI/2)*Math.pow(2,-10*t)+1}module.exports=elasticOut;

},{}],114:[function(require,module,exports){
function expoInOut(o){return 0===o||1===o?o:o<.5?.5*Math.pow(2,20*o-10):-.5*Math.pow(2,10-20*o)+1}module.exports=expoInOut;

},{}],115:[function(require,module,exports){
function expoIn(o){return 0===o?o:Math.pow(2,10*(o-1))}module.exports=expoIn;

},{}],116:[function(require,module,exports){
function expoOut(o){return 1===o?o:1-Math.pow(2,-10*o)}module.exports=expoOut;

},{}],117:[function(require,module,exports){
module.exports={backInOut:require("./back-in-out"),backIn:require("./back-in"),backOut:require("./back-out"),bounceInOut:require("./bounce-in-out"),bounceIn:require("./bounce-in"),bounceOut:require("./bounce-out"),circInOut:require("./circ-in-out"),circIn:require("./circ-in"),circOut:require("./circ-out"),cubicInOut:require("./cubic-in-out"),cubicIn:require("./cubic-in"),cubicOut:require("./cubic-out"),elasticInOut:require("./elastic-in-out"),elasticIn:require("./elastic-in"),elasticOut:require("./elastic-out"),expoInOut:require("./expo-in-out"),expoIn:require("./expo-in"),expoOut:require("./expo-out"),linear:require("./linear"),quadInOut:require("./quad-in-out"),quadIn:require("./quad-in"),quadOut:require("./quad-out"),quartInOut:require("./quart-in-out"),quartIn:require("./quart-in"),quartOut:require("./quart-out"),quintInOut:require("./quint-in-out"),quintIn:require("./quint-in"),quintOut:require("./quint-out"),sineInOut:require("./sine-in-out"),sineIn:require("./sine-in"),sineOut:require("./sine-out")};

},{"./back-in":100,"./back-in-out":99,"./back-out":101,"./bounce-in":103,"./bounce-in-out":102,"./bounce-out":104,"./circ-in":106,"./circ-in-out":105,"./circ-out":107,"./cubic-in":109,"./cubic-in-out":108,"./cubic-out":110,"./elastic-in":112,"./elastic-in-out":111,"./elastic-out":113,"./expo-in":115,"./expo-in-out":114,"./expo-out":116,"./linear":118,"./quad-in":120,"./quad-in-out":119,"./quad-out":121,"./quart-in":123,"./quart-in-out":122,"./quart-out":124,"./quint-in":126,"./quint-in-out":125,"./quint-out":127,"./sine-in":129,"./sine-in-out":128,"./sine-out":130}],118:[function(require,module,exports){
function linear(e){return e}module.exports=linear;

},{}],119:[function(require,module,exports){
function quadInOut(u){return(u/=.5)<1?.5*u*u:-.5*(--u*(u-2)-1)}module.exports=quadInOut;

},{}],120:[function(require,module,exports){
function quadIn(n){return n*n}module.exports=quadIn;

},{}],121:[function(require,module,exports){
function quadOut(u){return-u*(u-2)}module.exports=quadOut;

},{}],122:[function(require,module,exports){
function quarticInOut(t){return t<.5?8*Math.pow(t,4):-8*Math.pow(t-1,4)+1}module.exports=quarticInOut;

},{}],123:[function(require,module,exports){
function quarticIn(t){return Math.pow(t,4)}module.exports=quarticIn;

},{}],124:[function(require,module,exports){
function quarticOut(t){return Math.pow(t-1,3)*(1-t)+1}module.exports=quarticOut;

},{}],125:[function(require,module,exports){
function qinticInOut(n){return(n*=2)<1?.5*n*n*n*n*n:.5*((n-=2)*n*n*n*n+2)}module.exports=qinticInOut;

},{}],126:[function(require,module,exports){
function qinticIn(n){return n*n*n*n*n}module.exports=qinticIn;

},{}],127:[function(require,module,exports){
function qinticOut(t){return--t*t*t*t*t+1}module.exports=qinticOut;

},{}],128:[function(require,module,exports){
function sineInOut(n){return-.5*(Math.cos(Math.PI*n)-1)}module.exports=sineInOut;

},{}],129:[function(require,module,exports){
function sineIn(n){var e=Math.cos(n*Math.PI*.5);return Math.abs(e)<1e-14?1:1-e}module.exports=sineIn;

},{}],130:[function(require,module,exports){
function sineOut(t){return Math.sin(t*Math.PI/2)}module.exports=sineOut;

},{}],131:[function(require,module,exports){
(function (process,global,setImmediate){(function (){
(function(){"use strict";function t(t){return"function"==typeof t||"object"==typeof t&&null!==t}function e(t){return"function"==typeof t}function n(t){return"object"==typeof t&&null!==t}function r(t){D=t}function o(t){U=t}function i(){return function(){F(s)}}function u(){return function(){setTimeout(s,1)}}function s(){for(var t=0;t<N;t+=2){(0,H[t])(H[t+1]),H[t]=void 0,H[t+1]=void 0}N=0}function c(){}function a(){return new TypeError("You cannot resolve a promise with itself")}function f(){return new TypeError("A promises callback cannot return that same promise.")}function l(t){try{return t.then}catch(t){return V.error=t,V}}function p(t,e,n,r){try{t.call(e,n,r)}catch(t){return t}}function _(t,e,n){U(function(t){var r=!1,o=p(n,e,function(n){r||(r=!0,e!==n?v(t,n):m(t,n))},function(e){r||(r=!0,b(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,b(t,o))},t)}function h(t,e){e._state===Q?m(t,e._result):e._state===R?b(t,e._result):w(e,void 0,function(e){v(t,e)},function(e){b(t,e)})}function d(t,n){if(n.constructor===t.constructor)h(t,n);else{var r=l(n);r===V?b(t,V.error):void 0===r?m(t,n):e(r)?_(t,n,r):m(t,n)}}function v(e,n){e===n?b(e,a()):t(n)?d(e,n):m(e,n)}function y(t){t._onerror&&t._onerror(t._result),g(t)}function m(t,e){t._state===J&&(t._result=e,t._state=Q,0!==t._subscribers.length&&U(g,t))}function b(t,e){t._state===J&&(t._state=R,t._result=e,U(y,t))}function w(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+Q]=n,o[i+R]=r,0===i&&t._state&&U(g,t)}function g(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,u=0;u<e.length;u+=3)r=e[u],o=e[u+n],r?j(n,r,o,i):o(i);t._subscribers.length=0}}function A(){this.error=null}function E(t,e){try{return t(e)}catch(t){return X.error=t,X}}function j(t,n,r,o){var i,u,s,c,a=e(r);if(a){if(i=E(r,o),i===X?(c=!0,u=i.error,i=null):s=!0,n===i)return void b(n,f())}else i=o,s=!0;n._state!==J||(a&&s?v(n,i):c?b(n,u):t===Q?m(n,i):t===R&&b(n,i))}function S(t,e){try{e(function(e){v(t,e)},function(e){b(t,e)})}catch(e){b(t,e)}}function T(t,e){var n=this;n._instanceConstructor=t,n.promise=new t(c),n._validateInput(e)?(n._input=e,n.length=e.length,n._remaining=e.length,n._init(),0===n.length?m(n.promise,n._result):(n.length=n.length||0,n._enumerate(),0===n._remaining&&m(n.promise,n._result))):b(n.promise,n._validationError())}function P(t){return new Z(this,t).promise}function x(t){function e(t){v(o,t)}function n(t){b(o,t)}var r=this,o=new r(c);if(!L(t))return b(o,new TypeError("You must pass an array to race.")),o;for(var i=t.length,u=0;o._state===J&&u<i;u++)w(r.resolve(t[u]),void 0,e,n);return o}function C(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(c);return v(n,t),n}function M(t){var e=this,n=new e(c);return b(n,t),n}function O(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function k(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function I(t){this._id=ot++,this._state=void 0,this._result=void 0,this._subscribers=[],c!==t&&(e(t)||O(),this instanceof I||k(),S(this,t))}function Y(){var t;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;e&&"[object Promise]"===Object.prototype.toString.call(e.resolve())&&!e.cast||(t.Promise=it)}var q;q=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var F,D,K,L=q,N=0,U=function(t,e){H[N]=t,H[N+1]=e,2===(N+=2)&&(D?D(s):K())},W="undefined"!=typeof window?window:void 0,$=W||{},z=$.MutationObserver||$.WebKitMutationObserver,B="undefined"!=typeof process&&"[object process]"==={}.toString.call(process),G="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,H=new Array(1e3);K=B?function(){var t=process.nextTick,e=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(e)&&"0"===e[1]&&"10"===e[2]&&(t=setImmediate),function(){t(s)}}():z?function(){var t=0,e=new z(s),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}():G?function(){var t=new MessageChannel;return t.port1.onmessage=s,function(){t.port2.postMessage(0)}}():void 0===W&&"function"==typeof require?function(){try{var t=require,e=t("vertx");return F=e.runOnLoop||e.runOnContext,i()}catch(t){return u()}}():u();var J=void 0,Q=1,R=2,V=new A,X=new A;T.prototype._validateInput=function(t){return L(t)},T.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},T.prototype._init=function(){this._result=new Array(this.length)};var Z=T;T.prototype._enumerate=function(){for(var t=this,e=t.length,n=t.promise,r=t._input,o=0;n._state===J&&o<e;o++)t._eachEntry(r[o],o)},T.prototype._eachEntry=function(t,e){var r=this,o=r._instanceConstructor;n(t)?t.constructor===o&&t._state!==J?(t._onerror=null,r._settledAt(t._state,e,t._result)):r._willSettleAt(o.resolve(t),e):(r._remaining--,r._result[e]=t)},T.prototype._settledAt=function(t,e,n){var r=this,o=r.promise;o._state===J&&(r._remaining--,t===R?b(o,n):r._result[e]=n),0===r._remaining&&m(o,r._result)},T.prototype._willSettleAt=function(t,e){var n=this;w(t,void 0,function(t){n._settledAt(Q,e,t)},function(t){n._settledAt(R,e,t)})};var tt=P,et=x,nt=C,rt=M,ot=0,it=I;I.all=tt,I.race=et,I.resolve=nt,I.reject=rt,I._setScheduler=r,I._setAsap=o,I._asap=U,I.prototype={constructor:I,then:function(t,e){var n=this,r=n._state;if(r===Q&&!t||r===R&&!e)return this;var o=new this.constructor(c),i=n._result;if(r){var u=arguments[r-1];U(function(){j(r,o,u,i)})}else w(n,o,t,e);return o},catch:function(t){return this.then(null,t)}};var ut=Y,st={Promise:it,polyfill:ut};"function"==typeof define&&define.amd?define(function(){return st}):"undefined"!=typeof module&&module.exports?module.exports=st:void 0!==this&&(this.ES6Promise=st),ut()}).call(this);

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"_process":6,"timers":10}],132:[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,i,n,s,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}if(i=this._events[e],isUndefined(i))return!1;if(isFunction(i))switch(arguments.length){case 1:i.call(this);break;case 2:i.call(this,arguments[1]);break;case 3:i.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),i.apply(this,s)}else if(isObject(i))for(s=Array.prototype.slice.call(arguments,1),o=i.slice(),n=o.length,r=0;r<n;r++)o[r].apply(this,s);return!0},EventEmitter.prototype.addListener=function(e,t){var i;if(!isFunction(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned&&(i=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners)&&i>0&&this._events[e].length>i&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}if(!isFunction(t))throw TypeError("listener must be a function");var n=!1;return i.listener=t,this.on(e,i),this},EventEmitter.prototype.removeListener=function(e,t){var i,n,s,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=this._events[e],s=i.length,n=-1,i===t||isFunction(i.listener)&&i.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(i)){for(r=s;r-- >0;)if(i[r]===t||i[r].listener&&i[r].listener===t){n=r;break}if(n<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i=this._events[e],isFunction(i))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){return this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(isFunction(t))return 1;if(t)return t.length}return 0},EventEmitter.listenerCount=function(e,t){return e.listenerCount(t)};

},{}],133:[function(require,module,exports){
(function (global){(function (){
"undefined"!=typeof window?module.exports=window:"undefined"!=typeof global?module.exports=global:module.exports={};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],134:[function(require,module,exports){
function asString(e){return'<link href="'+getHref(e)+'" rel="stylesheet" type="text/css">'}function asElement(e){var t=getHref(e),r=document.createElement("link");return r.setAttribute("href",t),r.setAttribute("rel","stylesheet"),r.setAttribute("type","text/css"),r}function getHref(e){return"http://fonts.googleapis.com/css?family="+Object.keys(e).map(function(t){var r=e[t];return t=t.replace(/\s+/,"+"),"boolean"==typeof r?t:t+":"+makeArray(r).join(",")}).join("|")}function append(e){var t=asElement(e);return document.head.appendChild(t),t}function makeArray(e){return Array.isArray(e)?e:[e]}module.exports=asString,module.exports.add=append;

},{}],135:[function(require,module,exports){
!function(){var e=function(e){return function(n){function t(e){return String(e||"").replace(/\W/g,"\\$&")}function a(e){if(!e)return"";var n=new RegExp("^"+t(l.prependHash)+"|"+t(l.appendHash)+"$","g");return e.replace(n,"")}function r(){var e=E.exec(l.getURL()),n=e&&e[1]||"";try{return l.raw?n:decodeURIComponent(n)}catch(e){return n}}function i(){return w?w.contentWindow.frameHash:null}function o(){w=H.createElement("iframe"),w.src="about:blank",w.style.display="none",H.body.appendChild(w)}function c(){if(w&&f!==i()){var e=w.contentWindow.document;e.open(),e.write("<html><head><title>"+H.title+'</title><script type="text/javascript">var frameHash="'+f+'";<\/script></head><body>&nbsp;</body></html>'),e.close()}}function s(e,n){if(f!==e){var t=f;f=e,U&&(n?w.contentWindow.frameHash=e:c()),l.changed.dispatch(a(e),a(t))}}function p(e,n,t){e.addEventListener?e.addEventListener(n,t,!1):e.attachEvent&&e.attachEvent("on"+n,t)}function d(e,n,t){e.removeEventListener?e.removeEventListener(n,t,!1):e.detachEvent&&e.detachEvent("on"+n,t)}function u(e){e=Array.prototype.slice.call(arguments);var n=e.join(l.separator);return n=n?l.prependHash+n.replace(L,"")+l.appendHash:n}function h(e){return e=encodeURI(e),b&&x&&(e=e.replace(/\?/,"%3F")),e}var l,f,v,g,w,m,H=n.document,y=(n.history,e.Signal),E=/#(.*)$/,R=/(\?.*)|(\#.*)/,L=/^\#/,b=!1,I="onhashchange"in n&&7!==H.documentMode,U=b&&!I,x="file:"===location.protocol;return m=U?function(){var e=r(),n=i();n!==f&&n!==e?l.setHash(a(n)):e!==f&&s(e)}:function(){var e=r();e!==f&&s(e)},l={VERSION:"1.2.0",raw:!1,appendHash:"",prependHash:"/",separator:"/",changed:new y,stopped:new y,initialized:new y,init:function(){g||(f=r(),I?p(n,"hashchange",m):(U&&(w||o(),c()),v=setInterval(m,25)),g=!0,l.initialized.dispatch(a(f)))},stop:function(){g&&(I?d(n,"hashchange",m):(clearInterval(v),v=null),g=!1,l.stopped.dispatch(a(f)))},isActive:function(){return g},getURL:function(){return n.location.href},getBaseURL:function(){return l.getURL().replace(R,"")},setHash:function(e){(e=u.apply(null,arguments))!==f&&(s(e),e===f&&(l.raw||(e=h(e)),n.location.hash="#"+e))},replaceHash:function(e){(e=u.apply(null,arguments))!==f&&(s(e,!0),e===f&&(l.raw||(e=h(e)),n.location.replace("#"+e)))},getHash:function(){return a(f)},getHashAsArray:function(){return l.getHash().split(l.separator)},dispose:function(){l.stop(),l.initialized.dispose(),l.stopped.dispose(),l.changed.dispose(),w=l=n.hasher=null},toString:function(){return'[hasher version="'+l.VERSION+'" hash="'+l.getHash()+'"]'}},l.initialized.memorize=!0,l}(window)};"function"==typeof define&&define.amd?define(["signals"],e):"object"==typeof exports?module.exports=e(require("signals")):window.hasher=e(window.signals)}();

},{"signals":191}],136:[function(require,module,exports){
var indexOf=[].indexOf;module.exports=function(e,n){if(indexOf)return e.indexOf(n);for(var r=0;r<e.length;++r)if(e[r]===n)return r;return-1};

},{}],137:[function(require,module,exports){
var inserted={};module.exports=function(e,t){if(!inserted[e]){inserted[e]=!0;var n=document.createElement("style");n.setAttribute("type","text/css"),"textContent"in n?n.textContent=e:n.styleSheet.cssText=e;var s=document.getElementsByTagName("head")[0];t&&t.prepend?s.insertBefore(n,s.childNodes[0]):s.appendChild(n)}};

},{}],138:[function(require,module,exports){
function lerp(e,r,l){return e*(1-l)+r*l}module.exports=lerp;

},{}],139:[function(require,module,exports){
(function (global){(function (){
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.localforage=e()}}(function(){return function e(n,t,r){function o(a,u){if(!t[a]){if(!n[a]){var c="function"==typeof require&&require;if(!u&&c)return c(a,!0);if(i)return i(a,!0);var f=new Error("Cannot find module '"+a+"'");throw f.code="MODULE_NOT_FOUND",f}var s=t[a]={exports:{}};n[a][0].call(s.exports,function(e){var t=n[a][1][e];return o(t||e)},s,s.exports,e,n,t,r)}return t[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,n,t){(function(e){"use strict";function t(){s=!0;for(var e,n,t=l.length;t;){for(n=l,l=[],e=-1;++e<t;)n[e]();t=l.length}s=!1}function r(e){1!==l.push(e)||s||o()}var o,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var a=0,u=new i(t),c=e.document.createTextNode("");u.observe(c,{characterData:!0}),o=function(){c.data=a=++a%2}}else if(e.setImmediate||void 0===e.MessageChannel)o="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var n=e.document.createElement("script");n.onreadystatechange=function(){t(),n.onreadystatechange=null,n.parentNode.removeChild(n),n=null},e.document.documentElement.appendChild(n)}:function(){setTimeout(t,0)};else{var f=new e.MessageChannel;f.port1.onmessage=t,o=function(){f.port2.postMessage(0)}}var s,l=[];n.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,n,t){"use strict";function r(){}function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=m,this.queue=[],this.outcome=void 0,e!==r&&c(this,e)}function i(e,n,t){this.promise=e,"function"==typeof n&&(this.onFulfilled=n,this.callFulfilled=this.otherCallFulfilled),"function"==typeof t&&(this.onRejected=t,this.callRejected=this.otherCallRejected)}function a(e,n,t){h(function(){var r;try{r=n(t)}catch(n){return y.reject(e,n)}r===e?y.reject(e,new TypeError("Cannot resolve promise with itself")):y.resolve(e,r)})}function u(e){var n=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof n)return function(){n.apply(e,arguments)}}function c(e,n){function t(n){i||(i=!0,y.reject(e,n))}function r(n){i||(i=!0,y.resolve(e,n))}function o(){n(r,t)}var i=!1,a=f(o);"error"===a.status&&t(a.value)}function f(e,n){var t={};try{t.value=e(n),t.status="success"}catch(e){t.status="error",t.value=e}return t}function s(e){return e instanceof this?e:y.resolve(new this(r),e)}function l(e){var n=new this(r);return y.reject(n,e)}function d(e){var n=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,o=!1;if(!t)return this.resolve([]);for(var i=new Array(t),a=0,u=-1,c=new this(r);++u<t;)!function(e,r){function u(e){i[r]=e,++a!==t||o||(o=!0,y.resolve(c,i))}n.resolve(e).then(u,function(e){o||(o=!0,y.reject(c,e))})}(e[u],u);return c}function v(e){var n=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,o=!1;if(!t)return this.resolve([]);for(var i=-1,a=new this(r);++i<t;)!function(e){n.resolve(e).then(function(e){o||(o=!0,y.resolve(a,e))},function(e){o||(o=!0,y.reject(a,e))})}(e[i]);return a}var h=e(1),y={},p=["REJECTED"],b=["FULFILLED"],m=["PENDING"];n.exports=o,o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,n){if("function"!=typeof e&&this.state===b||"function"!=typeof n&&this.state===p)return this;var t=new this.constructor(r);if(this.state!==m){a(t,this.state===b?e:n,this.outcome)}else this.queue.push(new i(t,e,n));return t},i.prototype.callFulfilled=function(e){y.resolve(this.promise,e)},i.prototype.otherCallFulfilled=function(e){a(this.promise,this.onFulfilled,e)},i.prototype.callRejected=function(e){y.reject(this.promise,e)},i.prototype.otherCallRejected=function(e){a(this.promise,this.onRejected,e)},y.resolve=function(e,n){var t=f(u,n);if("error"===t.status)return y.reject(e,t.value);var r=t.value;if(r)c(e,r);else{e.state=b,e.outcome=n;for(var o=-1,i=e.queue.length;++o<i;)e.queue[o].callFulfilled(n)}return e},y.reject=function(e,n){e.state=p,e.outcome=n;for(var t=-1,r=e.queue.length;++t<r;)e.queue[t].callRejected(n);return e},o.resolve=s,o.reject=l,o.all=d,o.race=v},{1:1}],3:[function(e,n,t){(function(n){"use strict";"function"!=typeof n.Promise&&(n.Promise=e(2))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){e=e||[],n=n||{};try{return new Blob(e,n)}catch(i){if("TypeError"!==i.name)throw i;for(var t="undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder,r=new t,o=0;o<e.length;o+=1)r.append(e[o]);return r.getBlob(n.type)}}function i(e,n){n&&e.then(function(e){n(null,e)},function(e){n(e)})}function a(e,n,t){"function"==typeof n&&e.then(n),"function"==typeof t&&e.catch(t)}function u(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function c(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}function f(e){for(var n=e.length,t=new ArrayBuffer(n),r=new Uint8Array(t),o=0;o<n;o++)r[o]=e.charCodeAt(o);return t}function s(e){return new be(function(n){var t=e.transaction(me,Se),r=o([""]);t.objectStore(me).put(r,"key"),t.onabort=function(e){e.preventDefault(),e.stopPropagation(),n(!1)},t.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),t=navigator.userAgent.match(/Edge\//);n(t||!e||parseInt(e[1],10)>=43)}}).catch(function(){return!1})}function l(e){return"boolean"==typeof ge?be.resolve(ge):s(e).then(function(e){return ge=e})}function d(e){var n=_e[e.name],t={};t.promise=new be(function(e,n){t.resolve=e,t.reject=n}),n.deferredOperations.push(t),n.dbReady?n.dbReady=n.dbReady.then(function(){return t.promise}):n.dbReady=t.promise}function v(e){var n=_e[e.name],t=n.deferredOperations.pop();if(t)return t.resolve(),t.promise}function h(e,n){var t=_e[e.name],r=t.deferredOperations.pop();if(r)return r.reject(n),r.promise}function y(e,n){return new be(function(t,r){if(_e[e.name]=_e[e.name]||N(),e.db){if(!n)return t(e.db);d(e),e.db.close()}var o=[e.name];n&&o.push(e.version);var i=pe.open.apply(pe,o);n&&(i.onupgradeneeded=function(n){var t=i.result;try{t.createObjectStore(e.storeName),n.oldVersion<=1&&t.createObjectStore(me)}catch(t){if("ConstraintError"!==t.name)throw t;console.warn('The database "'+e.name+'" has been upgraded from version '+n.oldVersion+" to version "+n.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),i.onerror=function(e){e.preventDefault(),r(i.error)},i.onsuccess=function(){var n=i.result;n.onversionchange=function(e){e.target.close()},t(n),v(e)}})}function p(e){return y(e,!1)}function b(e){return y(e,!0)}function m(e,n){if(!e.db)return!0;var t=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==n&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||t){if(t){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}function g(e){return new be(function(n,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");n({__local_forage_encoded_blob:!0,data:r,type:e.type})},r.readAsBinaryString(e)})}function _(e){return o([f(atob(e.data))],{type:e.type})}function w(e){return e&&e.__local_forage_encoded_blob}function I(e){var n=this,t=n._initReady().then(function(){var e=_e[n._dbInfo.name];if(e&&e.dbReady)return e.dbReady});return a(t,e,e),t}function S(e){d(e);for(var n=_e[e.name],t=n.forages,r=0;r<t.length;r++){var o=t[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,p(e).then(function(n){return e.db=n,m(e)?b(e):n}).then(function(r){e.db=n.db=r;for(var o=0;o<t.length;o++)t[o]._dbInfo.db=r}).catch(function(n){throw h(e,n),n})}function E(e,n,t,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,n);t(null,o)}catch(o){if(r>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return be.resolve().then(function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),b(e)}).then(function(){return S(e).then(function(){E(e,n,t,r-1)})}).catch(t);t(o)}}function N(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function j(e){function n(){return be.resolve()}var t=this,r={db:null};if(e)for(var o in e)r[o]=e[o];var i=_e[r.name];i||(i=N(),_e[r.name]=i),i.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=I);for(var a=[],u=0;u<i.forages.length;u++){var c=i.forages[u];c!==t&&a.push(c._initReady().catch(n))}var f=i.forages.slice(0);return be.all(a).then(function(){return r.db=i.db,p(r)}).then(function(e){return r.db=e,m(r,t._defaultConfig.version)?b(r):e}).then(function(e){r.db=i.db=e,t._dbInfo=r;for(var n=0;n<f.length;n++){var o=f[n];o!==t&&(o._dbInfo.db=r.db,o._dbInfo.version=r.version)}})}function R(e,n){var t=this;e=u(e);var r=new be(function(n,r){t.ready().then(function(){E(t._dbInfo,Ie,function(o,i){if(o)return r(o);try{var a=i.objectStore(t._dbInfo.storeName),u=a.get(e);u.onsuccess=function(){var e=u.result;void 0===e&&(e=null),w(e)&&(e=_(e)),n(e)},u.onerror=function(){r(u.error)}}catch(e){r(e)}})}).catch(r)});return i(r,n),r}function A(e,n){var t=this,r=new be(function(n,r){t.ready().then(function(){E(t._dbInfo,Ie,function(o,i){if(o)return r(o);try{var a=i.objectStore(t._dbInfo.storeName),u=a.openCursor(),c=1;u.onsuccess=function(){var t=u.result;if(t){var r=t.value;w(r)&&(r=_(r));var o=e(r,t.key,c++);void 0!==o?n(o):t.continue()}else n()},u.onerror=function(){r(u.error)}}catch(e){r(e)}})}).catch(r)});return i(r,n),r}function O(e,n,t){var r=this;e=u(e);var o=new be(function(t,o){var i;r.ready().then(function(){return i=r._dbInfo,"[object Blob]"===we.call(n)?l(i.db).then(function(e){return e?n:g(n)}):n}).then(function(n){E(r._dbInfo,Se,function(i,a){if(i)return o(i);try{var u=a.objectStore(r._dbInfo.storeName);null===n&&(n=void 0);var c=u.put(n,e);a.oncomplete=function(){void 0===n&&(n=null),t(n)},a.onabort=a.onerror=function(){var e=c.error?c.error:c.transaction.error;o(e)}}catch(e){o(e)}})}).catch(o)});return i(o,t),o}function D(e,n){var t=this;e=u(e);var r=new be(function(n,r){t.ready().then(function(){E(t._dbInfo,Se,function(o,i){if(o)return r(o);try{var a=i.objectStore(t._dbInfo.storeName),u=a.delete(e);i.oncomplete=function(){n()},i.onerror=function(){r(u.error)},i.onabort=function(){var e=u.error?u.error:u.transaction.error;r(e)}}catch(e){r(e)}})}).catch(r)});return i(r,n),r}function x(e){var n=this,t=new be(function(e,t){n.ready().then(function(){E(n._dbInfo,Se,function(r,o){if(r)return t(r);try{var i=o.objectStore(n._dbInfo.storeName),a=i.clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=a.error?a.error:a.transaction.error;t(e)}}catch(e){t(e)}})}).catch(t)});return i(t,e),t}function B(e){var n=this,t=new be(function(e,t){n.ready().then(function(){E(n._dbInfo,Ie,function(r,o){if(r)return t(r);try{var i=o.objectStore(n._dbInfo.storeName),a=i.count();a.onsuccess=function(){e(a.result)},a.onerror=function(){t(a.error)}}catch(e){t(e)}})}).catch(t)});return i(t,e),t}function k(e,n){var t=this,r=new be(function(n,r){if(e<0)return void n(null);t.ready().then(function(){E(t._dbInfo,Ie,function(o,i){if(o)return r(o);try{var a=i.objectStore(t._dbInfo.storeName),u=!1,c=a.openKeyCursor();c.onsuccess=function(){var t=c.result;if(!t)return void n(null);0===e?n(t.key):u?n(t.key):(u=!0,t.advance(e))},c.onerror=function(){r(c.error)}}catch(e){r(e)}})}).catch(r)});return i(r,n),r}function C(e){var n=this,t=new be(function(e,t){n.ready().then(function(){E(n._dbInfo,Ie,function(r,o){if(r)return t(r);try{var i=o.objectStore(n._dbInfo.storeName),a=i.openKeyCursor(),u=[];a.onsuccess=function(){var n=a.result;if(!n)return void e(u);u.push(n.key),n.continue()},a.onerror=function(){t(a.error)}}catch(e){t(e)}})}).catch(t)});return i(t,e),t}function T(e,n){n=c.apply(this,arguments);var t=this.config();e="function"!=typeof e&&e||{},e.name||(e.name=e.name||t.name,e.storeName=e.storeName||t.storeName);var r,o=this;if(e.name){var a=e.name===t.name&&o._dbInfo.db,u=a?be.resolve(o._dbInfo.db):p(e).then(function(n){var t=_e[e.name],r=t.forages;t.db=n;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=n;return n});r=e.storeName?u.then(function(n){if(n.objectStoreNames.contains(e.storeName)){var t=n.version+1;d(e);var r=_e[e.name],o=r.forages;n.close();for(var i=0;i<o.length;i++){var a=o[i];a._dbInfo.db=null,a._dbInfo.version=t}return new be(function(n,r){var o=pe.open(e.name,t);o.onerror=function(e){o.result.close(),r(e)},o.onupgradeneeded=function(){o.result.deleteObjectStore(e.storeName)},o.onsuccess=function(){var e=o.result;e.close(),n(e)}}).then(function(e){r.db=e;for(var n=0;n<o.length;n++){var t=o[n];t._dbInfo.db=e,v(t._dbInfo)}}).catch(function(n){throw(h(e,n)||be.resolve()).catch(function(){}),n})}}):u.then(function(n){d(e);var t=_e[e.name],r=t.forages;n.close();for(var o=0;o<r.length;o++){r[o]._dbInfo.db=null}return new be(function(n,t){var r=pe.deleteDatabase(e.name);r.onerror=function(){var e=r.result;e&&e.close(),t(r.error)},r.onblocked=function(){console.warn('dropInstance blocked for database "'+e.name+'" until all open connections are closed')},r.onsuccess=function(){var e=r.result;e&&e.close(),n(e)}}).then(function(e){t.db=e;for(var n=0;n<r.length;n++)v(r[n]._dbInfo)}).catch(function(n){throw(h(e,n)||be.resolve()).catch(function(){}),n})})}else r=be.reject("Invalid arguments");return i(r,n),r}function F(e){var n,t,r,o,i,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var f=new ArrayBuffer(a),s=new Uint8Array(f);for(n=0;n<u;n+=4)t=Ne.indexOf(e[n]),r=Ne.indexOf(e[n+1]),o=Ne.indexOf(e[n+2]),i=Ne.indexOf(e[n+3]),s[c++]=t<<2|r>>4,s[c++]=(15&r)<<4|o>>2,s[c++]=(3&o)<<6|63&i;return f}function L(e){var n,t=new Uint8Array(e),r="";for(n=0;n<t.length;n+=3)r+=Ne[t[n]>>2],r+=Ne[(3&t[n])<<4|t[n+1]>>4],r+=Ne[(15&t[n+1])<<2|t[n+2]>>6],r+=Ne[63&t[n+2]];return t.length%3==2?r=r.substring(0,r.length-1)+"=":t.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}function M(e,n){var t="";if(e&&(t=Ue.call(e)),e&&("[object ArrayBuffer]"===t||e.buffer&&"[object ArrayBuffer]"===Ue.call(e.buffer))){var r,o=Ae;e instanceof ArrayBuffer?(r=e,o+=De):(r=e.buffer,"[object Int8Array]"===t?o+=Be:"[object Uint8Array]"===t?o+=ke:"[object Uint8ClampedArray]"===t?o+=Ce:"[object Int16Array]"===t?o+=Te:"[object Uint16Array]"===t?o+=Le:"[object Int32Array]"===t?o+=Fe:"[object Uint32Array]"===t?o+=Me:"[object Float32Array]"===t?o+=ze:"[object Float64Array]"===t?o+=Pe:n(new Error("Failed to get type for BinaryArray"))),n(o+L(r))}else if("[object Blob]"===t){var i=new FileReader;i.onload=function(){var t=je+e.type+"~"+L(this.result);n(Ae+xe+t)},i.readAsArrayBuffer(e)}else try{n(JSON.stringify(e))}catch(t){console.error("Couldn't convert value into a JSON string: ",e),n(null,t)}}function z(e){if(e.substring(0,Oe)!==Ae)return JSON.parse(e);var n,t=e.substring(qe),r=e.substring(Oe,qe);if(r===xe&&Re.test(t)){var i=t.match(Re);n=i[1],t=t.substring(i[0].length)}var a=F(t);switch(r){case De:return a;case xe:return o([a],{type:n});case Be:return new Int8Array(a);case ke:return new Uint8Array(a);case Ce:return new Uint8ClampedArray(a);case Te:return new Int16Array(a);case Le:return new Uint16Array(a);case Fe:return new Int32Array(a);case Me:return new Uint32Array(a);case ze:return new Float32Array(a);case Pe:return new Float64Array(a);default:throw new Error("Unkown type: "+r)}}function P(e,n,t,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+n.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],t,r)}function q(e){var n=this,t={db:null};if(e)for(var r in e)t[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new be(function(e,r){try{t.db=openDatabase(t.name,String(t.version),t.description,t.size)}catch(e){return r(e)}t.db.transaction(function(o){P(o,t,function(){n._dbInfo=t,e()},function(e,n){r(n)})},r)});return t.serializer=We,o}function U(e,n,t,r,o,i){e.executeSql(t,r,o,function(e,a){a.code===a.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[n.storeName],function(e,u){u.rows.length?i(e,a):P(e,n,function(){e.executeSql(t,r,o,i)},i)},i):i(e,a)},i)}function W(e,n){var t=this;e=u(e);var r=new be(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){U(t,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],function(e,t){var r=t.rows.length?t.rows.item(0).value:null;r&&(r=o.serializer.deserialize(r)),n(r)},function(e,n){r(n)})})}).catch(r)});return i(r,n),r}function K(e,n){var t=this,r=new be(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){U(t,o,"SELECT * FROM "+o.storeName,[],function(t,r){for(var i=r.rows,a=i.length,u=0;u<a;u++){var c=i.item(u),f=c.value;if(f&&(f=o.serializer.deserialize(f)),void 0!==(f=e(f,c.key,u+1)))return void n(f)}n()},function(e,n){r(n)})})}).catch(r)});return i(r,n),r}function H(e,n,t,r){var o=this;e=u(e);var a=new be(function(i,a){o.ready().then(function(){void 0===n&&(n=null);var u=n,c=o._dbInfo;c.serializer.serialize(n,function(n,f){f?a(f):c.db.transaction(function(t){U(t,c,"INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[e,n],function(){i(u)},function(e,n){a(n)})},function(n){if(n.code===n.QUOTA_ERR){if(r>0)return void i(H.apply(o,[e,u,t,r-1]));a(n)}})})}).catch(a)});return i(a,t),a}function Q(e,n,t){return H.apply(this,[e,n,t,1])}function X(e,n){var t=this;e=u(e);var r=new be(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){U(t,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],function(){n()},function(e,n){r(n)})})}).catch(r)});return i(r,n),r}function G(e){var n=this,t=new be(function(e,t){n.ready().then(function(){var r=n._dbInfo;r.db.transaction(function(n){U(n,r,"DELETE FROM "+r.storeName,[],function(){e()},function(e,n){t(n)})})}).catch(t)});return i(t,e),t}function J(e){var n=this,t=new be(function(e,t){n.ready().then(function(){var r=n._dbInfo;r.db.transaction(function(n){U(n,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],function(n,t){var r=t.rows.item(0).c;e(r)},function(e,n){t(n)})})}).catch(t)});return i(t,e),t}function V(e,n){var t=this,r=new be(function(n,r){t.ready().then(function(){var o=t._dbInfo;o.db.transaction(function(t){U(t,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],function(e,t){var r=t.rows.length?t.rows.item(0).key:null;n(r)},function(e,n){r(n)})})}).catch(r)});return i(r,n),r}function Y(e){var n=this,t=new be(function(e,t){n.ready().then(function(){var r=n._dbInfo;r.db.transaction(function(n){U(n,r,"SELECT key FROM "+r.storeName,[],function(n,t){for(var r=[],o=0;o<t.rows.length;o++)r.push(t.rows.item(o).key);e(r)},function(e,n){t(n)})})}).catch(t)});return i(t,e),t}function Z(e){return new be(function(n,t){e.transaction(function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(t,r){for(var o=[],i=0;i<r.rows.length;i++)o.push(r.rows.item(i).name);n({db:e,storeNames:o})},function(e,n){t(n)})},function(e){t(e)})})}function $(e,n){n=c.apply(this,arguments);var t=this.config();e="function"!=typeof e&&e||{},e.name||(e.name=e.name||t.name,e.storeName=e.storeName||t.storeName);var r,o=this;return r=e.name?new be(function(n){var r;r=e.name===t.name?o._dbInfo.db:openDatabase(e.name,"","",0),n(e.storeName?{db:r,storeNames:[e.storeName]}:Z(r))}).then(function(e){return new be(function(n,t){e.db.transaction(function(r){for(var o=[],i=0,a=e.storeNames.length;i<a;i++)o.push(function(e){return new be(function(n,t){r.executeSql("DROP TABLE IF EXISTS "+e,[],function(){n()},function(e,n){t(n)})})}(e.storeNames[i]));be.all(o).then(function(){n()}).catch(function(e){t(e)})},function(e){t(e)})})}):be.reject("Invalid arguments"),i(r,n),r}function ee(e,n){var t=e.name+"/";return e.storeName!==n.storeName&&(t+=e.storeName+"/"),t}function ne(){try{return localStorage.setItem("_localforage_support_test",!0),localStorage.removeItem("_localforage_support_test"),!1}catch(e){return!0}}function te(){return!ne()||localStorage.length>0}function re(e){var n=this,t={};if(e)for(var r in e)t[r]=e[r];return t.keyPrefix=ee(e,n._defaultConfig),te()?(n._dbInfo=t,t.serializer=We,be.resolve()):be.reject()}function oe(e){var n=this,t=n.ready().then(function(){for(var e=n._dbInfo.keyPrefix,t=localStorage.length-1;t>=0;t--){var r=localStorage.key(t);0===r.indexOf(e)&&localStorage.removeItem(r)}});return i(t,e),t}function ie(e,n){var t=this;e=u(e);var r=t.ready().then(function(){var n=t._dbInfo,r=localStorage.getItem(n.keyPrefix+e);return r&&(r=n.serializer.deserialize(r)),r});return i(r,n),r}function ae(e,n){var t=this,r=t.ready().then(function(){for(var n=t._dbInfo,r=n.keyPrefix,o=r.length,i=localStorage.length,a=1,u=0;u<i;u++){var c=localStorage.key(u);if(0===c.indexOf(r)){var f=localStorage.getItem(c);if(f&&(f=n.serializer.deserialize(f)),void 0!==(f=e(f,c.substring(o),a++)))return f}}});return i(r,n),r}function ue(e,n){var t=this,r=t.ready().then(function(){var n,r=t._dbInfo;try{n=localStorage.key(e)}catch(e){n=null}return n&&(n=n.substring(r.keyPrefix.length)),n});return i(r,n),r}function ce(e){var n=this,t=n.ready().then(function(){for(var e=n._dbInfo,t=localStorage.length,r=[],o=0;o<t;o++){var i=localStorage.key(o);0===i.indexOf(e.keyPrefix)&&r.push(i.substring(e.keyPrefix.length))}return r});return i(t,e),t}function fe(e){var n=this,t=n.keys().then(function(e){return e.length});return i(t,e),t}function se(e,n){var t=this;e=u(e);var r=t.ready().then(function(){var n=t._dbInfo;localStorage.removeItem(n.keyPrefix+e)});return i(r,n),r}function le(e,n,t){var r=this;e=u(e);var o=r.ready().then(function(){void 0===n&&(n=null);var t=n;return new be(function(o,i){var a=r._dbInfo;a.serializer.serialize(n,function(n,r){if(r)i(r);else try{localStorage.setItem(a.keyPrefix+e,n),o(t)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||i(e),i(e)}})})});return i(o,t),o}function de(e,n){if(n=c.apply(this,arguments),e="function"!=typeof e&&e||{},!e.name){var t=this.config();e.name=e.name||t.name,e.storeName=e.storeName||t.storeName}var r,o=this;return r=e.name?new be(function(n){n(e.storeName?ee(e,o._defaultConfig):e.name+"/")}).then(function(e){for(var n=localStorage.length-1;n>=0;n--){var t=localStorage.key(n);0===t.indexOf(e)&&localStorage.removeItem(t)}}):be.reject("Invalid arguments"),i(r,n),r}function ve(e,n){e[n]=function(){var t=arguments;return e.ready().then(function(){return e[n].apply(e,t)})}}function he(){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var t in n)n.hasOwnProperty(t)&&(Ge(n[t])?arguments[0][t]=n[t].slice():arguments[0][t]=n[t])}return arguments[0]}var ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pe=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();"undefined"==typeof Promise&&e(3);var be=Promise,me="local-forage-detect-blob-support",ge=void 0,_e={},we=Object.prototype.toString,Ie="readonly",Se="readwrite",Ee={_driver:"asyncStorage",_initStorage:j,_support:function(){try{if(!pe||!pe.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),n="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||n)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:A,getItem:R,setItem:O,removeItem:D,clear:x,length:B,key:k,keys:C,dropInstance:T},Ne="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",je="~~local_forage_type~",Re=/^~~local_forage_type~([^~]+)~/,Ae="__lfsc__:",Oe=Ae.length,De="arbf",xe="blob",Be="si08",ke="ui08",Ce="uic8",Te="si16",Fe="si32",Le="ur16",Me="ui32",ze="fl32",Pe="fl64",qe=Oe+De.length,Ue=Object.prototype.toString,We={serialize:M,deserialize:z,stringToBuffer:F,bufferToString:L},Ke={_driver:"webSQLStorage",_initStorage:q,_support:function(){return"function"==typeof openDatabase}(),iterate:K,getItem:W,setItem:Q,removeItem:X,clear:G,length:J,key:V,keys:Y,dropInstance:$},He={_driver:"localStorageWrapper",_initStorage:re,_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:ae,getItem:ie,setItem:le,removeItem:se,clear:oe,length:fe,key:ue,keys:ce,dropInstance:de},Qe=function(e,n){return e===n||"number"==typeof e&&"number"==typeof n&&isNaN(e)&&isNaN(n)},Xe=function(e,n){for(var t=e.length,r=0;r<t;){if(Qe(e[r],n))return!0;r++}return!1},Ge=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},Je={},Ve={},Ye={INDEXEDDB:Ee,WEBSQL:Ke,LOCALSTORAGE:He},Ze=[Ye.INDEXEDDB._driver,Ye.WEBSQL._driver,Ye.LOCALSTORAGE._driver],$e=["dropInstance"],en=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat($e),nn={description:"",driver:Ze.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1},tn=function(){function e(n){r(this,e);for(var t in Ye)if(Ye.hasOwnProperty(t)){var o=Ye[t],i=o._driver;this[t]=i,Je[i]||this.defineDriver(o)}this._defaultConfig=he({},nn),this._config=he({},this._defaultConfig,n),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":ye(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var n in e){if("storeName"===n&&(e[n]=e[n].replace(/\W/g,"_")),"version"===n&&"number"!=typeof e[n])return new Error("Database version must be a number.");this._config[n]=e[n]}return!("driver"in e&&e.driver)||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,n,t){var r=new be(function(n,t){try{var r=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void t(o);for(var a=en.concat("_initStorage"),u=0,c=a.length;u<c;u++){var f=a[u];if((!Xe($e,f)||e[f])&&"function"!=typeof e[f])return void t(o)}!function(){for(var n=0,t=$e.length;n<t;n++){var r=$e[n];e[r]||(e[r]=function(e){return function(){var n=new Error("Method "+e+" is not implemented by the current driver"),t=be.reject(n);return i(t,arguments[arguments.length-1]),t}}(r))}}();var s=function(t){Je[r]&&console.info("Redefining LocalForage driver: "+r),Je[r]=e,Ve[r]=t,n()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(s,t):s(!!e._support):s(!0)}catch(e){t(e)}});return a(r,n,t),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,n,t){var r=Je[e]?be.resolve(Je[e]):be.reject(new Error("Driver not found."));return a(r,n,t),r},e.prototype.getSerializer=function(e){var n=be.resolve(We);return a(n,e),n},e.prototype.ready=function(e){var n=this,t=n._driverSet.then(function(){return null===n._ready&&(n._ready=n._initDriver()),n._ready});return a(t,e,e),t},e.prototype.setDriver=function(e,n,t){function r(){u._config.driver=u.driver()}function o(e){return u._extend(e),r(),u._ready=u._initStorage(u._config),u._ready}function i(e){return function(){function n(){for(;t<e.length;){var i=e[t];return t++,u._dbInfo=null,u._ready=null,u.getDriver(i).then(o).catch(n)}r();var a=new Error("No available storage method found.");return u._driverSet=be.reject(a),u._driverSet}var t=0;return n()}}var u=this;Ge(e)||(e=[e]);var c=this._getSupportedDrivers(e),f=null!==this._driverSet?this._driverSet.catch(function(){return be.resolve()}):be.resolve();return this._driverSet=f.then(function(){var e=c[0];return u._dbInfo=null,u._ready=null,u.getDriver(e).then(function(e){u._driver=e._driver,r(),u._wrapLibraryMethodsWithReady(),u._initDriver=i(c)})}).catch(function(){r();var e=new Error("No available storage method found.");return u._driverSet=be.reject(e),u._driverSet}),a(this._driverSet,n,t),this._driverSet},e.prototype.supports=function(e){return!!Ve[e]},e.prototype._extend=function(e){he(this,e)},e.prototype._getSupportedDrivers=function(e){for(var n=[],t=0,r=e.length;t<r;t++){var o=e[t];this.supports(o)&&n.push(o)}return n},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,n=en.length;e<n;e++)ve(this,en[e])},e.prototype.createInstance=function(n){return new e(n)},e}(),rn=new tn;n.exports=rn},{3:3}]},{},[4])(4)});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],140:[function(require,module,exports){
function arrayEach(r,a){for(var e=-1,n=r.length;++e<n&&!1!==a(r[e],e,r););return r}module.exports=arrayEach;

},{}],141:[function(require,module,exports){
function arrayFilter(r,a){for(var e=-1,t=r.length,l=-1,n=[];++e<t;){var o=r[e];a(o,e,r)&&(n[++l]=o)}return n}module.exports=arrayFilter;

},{}],142:[function(require,module,exports){
function arrayMap(r,a){for(var e=-1,n=r.length,o=Array(n);++e<n;)o[e]=a(r[e],e,r);return o}module.exports=arrayMap;

},{}],143:[function(require,module,exports){
function baseAssign(e,s){return null==s?e:baseCopy(s,keys(s),e)}var baseCopy=require("lodash._basecopy"),keys=require("lodash.keys");module.exports=baseAssign;

},{"lodash._basecopy":146,"lodash.keys":171}],144:[function(require,module,exports){
function baseToString(r){return null==r?"":r+""}function baseCallback(r,e,t){var n=typeof r;return"function"==n?void 0===e?r:bindCallback(r,e,t):null==r?identity:"object"==n?baseMatches(r):void 0===e?property(r):baseMatchesProperty(r,e)}function baseGet(r,e,t){if(null!=r){void 0!==t&&t in toObject(r)&&(e=[t]);for(var n=0,a=e.length;null!=r&&n<a;)r=r[e[n++]];return n&&n==a?r:void 0}}function baseIsMatch(r,e,t){var n=e.length,a=n,i=!t;if(null==r)return!a;for(r=toObject(r);n--;){var o=e[n];if(i&&o[2]?o[1]!==r[o[0]]:!(o[0]in r))return!1}for(;++n<a;){o=e[n];var u=o[0],s=r[u],c=o[1];if(i&&o[2]){if(void 0===s&&!(u in r))return!1}else{var l=t?t(s,c,u):void 0;if(!(void 0===l?baseIsEqual(c,s,t,!0):l))return!1}}return!0}function baseMatches(r){var e=getMatchData(r);if(1==e.length&&e[0][2]){var t=e[0][0],n=e[0][1];return function(r){return null!=r&&(r[t]===n&&(void 0!==n||t in toObject(r)))}}return function(r){return baseIsMatch(r,e)}}function baseMatchesProperty(r,e){var t=isArray(r),n=isKey(r)&&isStrictComparable(e),a=r+"";return r=toPath(r),function(i){if(null==i)return!1;var o=a;if(i=toObject(i),(t||!n)&&!(o in i)){if(null==(i=1==r.length?i:baseGet(i,baseSlice(r,0,-1))))return!1;o=last(r),i=toObject(i)}return i[o]===e?void 0!==e||o in i:baseIsEqual(e,i[o],void 0,!0)}}function baseProperty(r){return function(e){return null==e?void 0:e[r]}}function basePropertyDeep(r){var e=r+"";return r=toPath(r),function(t){return baseGet(t,r,e)}}function baseSlice(r,e,t){var n=-1,a=r.length;e=null==e?0:+e||0,e<0&&(e=-e>a?0:a+e),t=void 0===t||t>a?a:+t||0,t<0&&(t+=a),a=e>t?0:t-e>>>0,e>>>=0;for(var i=Array(a);++n<a;)i[n]=r[n+e];return i}function getMatchData(r){for(var e=pairs(r),t=e.length;t--;)e[t][2]=isStrictComparable(e[t][1]);return e}function isKey(r,e){var t=typeof r;return!!("string"==t&&reIsPlainProp.test(r)||"number"==t)||!isArray(r)&&(!reIsDeepProp.test(r)||null!=e&&r in toObject(e))}function isStrictComparable(r){return r===r&&!isObject(r)}function toObject(r){return isObject(r)?r:Object(r)}function toPath(r){if(isArray(r))return r;var e=[];return baseToString(r).replace(rePropName,function(r,t,n,a){e.push(n?a.replace(reEscapeChar,"$1"):t||r)}),e}function last(r){var e=r?r.length:0;return e?r[e-1]:void 0}function isObject(r){var e=typeof r;return!!r&&("object"==e||"function"==e)}function identity(r){return r}function property(r){return isKey(r)?baseProperty(r):basePropertyDeep(r)}var baseIsEqual=require("lodash._baseisequal"),bindCallback=require("lodash._bindcallback"),isArray=require("lodash.isarray"),pairs=require("lodash.pairs"),reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,reEscapeChar=/\\(\\)?/g;module.exports=baseCallback;

},{"lodash._baseisequal":150,"lodash._bindcallback":155,"lodash.isarray":166,"lodash.pairs":175}],145:[function(require,module,exports){
function baseCompareAscending(e,n){if(e!==n){var r=null===e,i=void 0===e,o=e===e,u=null===n,a=void 0===n,d=n===n;if(e>n&&!u||!o||r&&!a&&d||i&&d)return 1;if(e<n&&!r||!d||u&&!i&&o||a&&o)return-1}return 0}module.exports=baseCompareAscending;

},{}],146:[function(require,module,exports){
function baseCopy(e,o,r){r||(r={});for(var a=-1,n=o.length;++a<n;){var t=o[a];r[t]=e[t]}return r}module.exports=baseCopy;

},{}],147:[function(require,module,exports){
function baseForOwn(e,r){return baseFor(e,r,keys)}function baseProperty(e){return function(r){return null==r?void 0:r[e]}}function createBaseEach(e,r){return function(t,n){var o=t?getLength(t):0;if(!isLength(o))return e(t,n);for(var a=r?o:-1,c=toObject(t);(r?a--:++a<o)&&!1!==n(c[a],a,c););return t}}function createBaseFor(e){return function(r,t,n){for(var o=toObject(r),a=n(r),c=a.length,u=e?c:-1;e?u--:++u<c;){var s=a[u];if(!1===t(o[s],s,o))break}return r}}function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function toObject(e){return isObject(e)?e:Object(e)}function isObject(e){var r=typeof e;return!!e&&("object"==r||"function"==r)}var keys=require("lodash.keys"),MAX_SAFE_INTEGER=9007199254740991,baseEach=createBaseEach(baseForOwn),baseFor=createBaseFor(),getLength=baseProperty("length");module.exports=baseEach;

},{"lodash.keys":171}],148:[function(require,module,exports){
function baseFilter(e,a){var r=[];return baseEach(e,function(e,s,t){a(e,s,t)&&r.push(e)}),r}var baseEach=require("lodash._baseeach");module.exports=baseFilter;

},{"lodash._baseeach":147}],149:[function(require,module,exports){
function createBaseFor(r){return function(e,a,o){for(var t=-1,n=Object(e),c=o(e),s=c.length;s--;){var u=c[r?s:++t];if(!1===a(n[u],u,n))break}return e}}var baseFor=createBaseFor();module.exports=baseFor;

},{}],150:[function(require,module,exports){
function isObjectLike(r){return!!r&&"object"==typeof r}function arraySome(r,e){for(var a=-1,t=r.length;++a<t;)if(e(r[a],a,r))return!0;return!1}function baseIsEqual(r,e,a,t,o,n){return r===e||(null==r||null==e||!isObject(r)&&!isObjectLike(e)?r!==r&&e!==e:baseIsEqualDeep(r,e,baseIsEqual,a,t,o,n))}function baseIsEqualDeep(r,e,a,t,o,n,u){var c=isArray(r),s=isArray(e),i=arrayTag,g=arrayTag;c||(i=objToString.call(r),i==argsTag?i=objectTag:i!=objectTag&&(c=isTypedArray(r))),s||(g=objToString.call(e),g==argsTag?g=objectTag:g!=objectTag&&(s=isTypedArray(e)));var b=i==objectTag,l=g==objectTag,f=i==g;if(f&&!c&&!b)return equalByTag(r,e,i);if(!o){var y=b&&hasOwnProperty.call(r,"__wrapped__"),T=l&&hasOwnProperty.call(e,"__wrapped__");if(y||T)return a(y?r.value():r,T?e.value():e,t,o,n,u)}if(!f)return!1;n||(n=[]),u||(u=[]);for(var j=n.length;j--;)if(n[j]==r)return u[j]==e;n.push(r),u.push(e);var p=(c?equalArrays:equalObjects)(r,e,a,t,o,n,u);return n.pop(),u.pop(),p}function equalArrays(r,e,a,t,o,n,u){var c=-1,s=r.length,i=e.length;if(s!=i&&!(o&&i>s))return!1;for(;++c<s;){var g=r[c],b=e[c],l=t?t(o?b:g,o?g:b,c):void 0;if(void 0!==l){if(l)continue;return!1}if(o){if(!arraySome(e,function(r){return g===r||a(g,r,t,o,n,u)}))return!1}else if(g!==b&&!a(g,b,t,o,n,u))return!1}return!0}function equalByTag(r,e,a){switch(a){case boolTag:case dateTag:return+r==+e;case errorTag:return r.name==e.name&&r.message==e.message;case numberTag:return r!=+r?e!=+e:r==+e;case regexpTag:case stringTag:return r==e+""}return!1}function equalObjects(r,e,a,t,o,n,u){var c=keys(r),s=c.length;if(s!=keys(e).length&&!o)return!1;for(var i=s;i--;){var g=c[i];if(!(o?g in e:hasOwnProperty.call(e,g)))return!1}for(var b=o;++i<s;){g=c[i];var l=r[g],f=e[g],y=t?t(o?f:l,o?l:f,g):void 0;if(!(void 0===y?a(l,f,t,o,n,u):y))return!1;b||(b="constructor"==g)}if(!b){var T=r.constructor,j=e.constructor;if(T!=j&&"constructor"in r&&"constructor"in e&&!("function"==typeof T&&T instanceof T&&"function"==typeof j&&j instanceof j))return!1}return!0}function isObject(r){var e=typeof r;return!!r&&("object"==e||"function"==e)}var isArray=require("lodash.isarray"),isTypedArray=require("lodash.istypedarray"),keys=require("lodash.keys"),argsTag="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",stringTag="[object String]",objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,objToString=objectProto.toString;module.exports=baseIsEqual;

},{"lodash.isarray":166,"lodash.istypedarray":170,"lodash.keys":171}],151:[function(require,module,exports){
function baseReduce(e,u,n,c,o){return o(e,function(e,o,t){n=c?(c=!1,e):u(n,e,o,t)}),n}module.exports=baseReduce;

},{}],152:[function(require,module,exports){
function baseSortBy(r,e){var o=r.length;for(r.sort(e);o--;)r[o]=r[o].value;return r}module.exports=baseSortBy;

},{}],153:[function(require,module,exports){
function baseToString(n){return null==n?"":n+""}module.exports=baseToString;

},{}],154:[function(require,module,exports){
function baseValues(e,r){for(var a=-1,s=r.length,u=Array(s);++a<s;)u[a]=e[r[a]];return u}module.exports=baseValues;

},{}],155:[function(require,module,exports){
function bindCallback(n,t,r){if("function"!=typeof n)return identity;if(void 0===t)return n;switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,c){return n.call(t,r,e,u,c)};case 5:return function(r,e,u,c,i){return n.call(t,r,e,u,c,i)}}return function(){return n.apply(t,arguments)}}function identity(n){return n}module.exports=bindCallback;

},{}],156:[function(require,module,exports){
function createAssigner(e){return restParam(function(r,a){var i=-1,t=null==r?0:a.length,l=t>2?a[t-2]:void 0,n=t>2?a[2]:void 0,o=t>1?a[t-1]:void 0;for("function"==typeof l?(l=bindCallback(l,o,5),t-=2):(l="function"==typeof o?o:void 0,t-=l?1:0),n&&isIterateeCall(a[0],a[1],n)&&(l=t<3?void 0:l,t=1);++i<t;){var s=a[i];s&&e(r,s,l)}return r})}var bindCallback=require("lodash._bindcallback"),isIterateeCall=require("lodash._isiterateecall"),restParam=require("lodash.restparam");module.exports=createAssigner;

},{"lodash._bindcallback":155,"lodash._isiterateecall":158,"lodash.restparam":177}],157:[function(require,module,exports){
function isObjectLike(t){return!!t&&"object"==typeof t}function getNative(t,o){var e=null==t?void 0:t[o];return isNative(e)?e:void 0}function isFunction(t){return isObject(t)&&objToString.call(t)==funcTag}function isObject(t){var o=typeof t;return!!t&&("object"==o||"function"==o)}function isNative(t){return null!=t&&(isFunction(t)?reIsNative.test(fnToString.call(t)):isObjectLike(t)&&reIsHostCtor.test(t))}var funcTag="[object Function]",reIsHostCtor=/^\[object .+?Constructor\]$/,objectProto=Object.prototype,fnToString=Function.prototype.toString,hasOwnProperty=objectProto.hasOwnProperty,objToString=objectProto.toString,reIsNative=RegExp("^"+fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");module.exports=getNative;

},{}],158:[function(require,module,exports){
function baseProperty(e){return function(t){return null==t?void 0:t[e]}}function isArrayLike(e){return null!=e&&isLength(getLength(e))}function isIndex(e,t){return e="number"==typeof e||reIsUint.test(e)?+e:-1,t=null==t?MAX_SAFE_INTEGER:t,e>-1&&e%1==0&&e<t}function isIterateeCall(e,t,n){if(!isObject(n))return!1;var r=typeof t;if("number"==r?isArrayLike(n)&&isIndex(t,n.length):"string"==r&&t in n){var i=n[t];return e===e?e===i:i!==i}return!1}function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function isObject(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}var reIsUint=/^\d+$/,MAX_SAFE_INTEGER=9007199254740991,getLength=baseProperty("length");module.exports=isIterateeCall;

},{}],159:[function(require,module,exports){
var reInterpolate=/<%=([\s\S]+?)%>/g;module.exports=reInterpolate;

},{}],160:[function(require,module,exports){
(function (global){(function (){
function checkGlobal(e){return e&&e.Object===Object?e:null}var objectTypes={function:!0,object:!0},freeExports=objectTypes[typeof exports]&&exports&&!exports.nodeType?exports:void 0,freeModule=objectTypes[typeof module]&&module&&!module.nodeType?module:void 0,freeGlobal=checkGlobal(freeExports&&freeModule&&"object"==typeof global&&global),freeSelf=checkGlobal(objectTypes[typeof self]&&self),freeWindow=checkGlobal(objectTypes[typeof window]&&window),thisGlobal=checkGlobal(objectTypes[typeof this]&&this),root=freeGlobal||freeWindow!==(thisGlobal&&thisGlobal.window)&&freeWindow||freeSelf||thisGlobal||Function("return this")();module.exports=root;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],161:[function(require,module,exports){
function assignWith(s,e,r){for(var i=-1,a=keys(e),n=a.length;++i<n;){var g=a[i],t=s[g],o=r(t,e[g],g,s,e);(o===o?o===t:t!==t)&&(void 0!==t||g in s)||(s[g]=o)}return s}var baseAssign=require("lodash._baseassign"),createAssigner=require("lodash._createassigner"),keys=require("lodash.keys"),assign=createAssigner(function(s,e,r){return r?assignWith(s,e,r):baseAssign(s,e)});module.exports=assign;

},{"lodash._baseassign":143,"lodash._createassigner":156,"lodash.keys":171}],162:[function(require,module,exports){
function escapeHtmlChar(t){return htmlEscapes[t]}function isObjectLike(t){return!!t&&"object"==typeof t}function isSymbol(t){return"symbol"==typeof t||isObjectLike(t)&&objectToString.call(t)==symbolTag}function toString(t){if("string"==typeof t)return t;if(null==t)return"";if(isSymbol(t))return Symbol?symbolToString.call(t):"";var o=t+"";return"0"==o&&1/t==-INFINITY?"-0":o}function escape(t){return t=toString(t),t&&reHasUnescapedHtml.test(t)?t.replace(reUnescapedHtml,escapeHtmlChar):t}var root=require("lodash._root"),INFINITY=1/0,symbolTag="[object Symbol]",reUnescapedHtml=/[&<>"'`]/g,reHasUnescapedHtml=RegExp(reUnescapedHtml.source),htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},objectProto=Object.prototype,objectToString=objectProto.toString,Symbol=root.Symbol,symbolProto=Symbol?Symbol.prototype:void 0,symbolToString=Symbol?symbolProto.toString:void 0;module.exports=escape;

},{"lodash._root":160}],163:[function(require,module,exports){
function filter(r,a,e){var l=isArray(r)?arrayFilter:baseFilter;return a=baseCallback(a,e,3),l(r,a)}var arrayFilter=require("lodash._arrayfilter"),baseCallback=require("lodash._basecallback"),baseFilter=require("lodash._basefilter"),isArray=require("lodash.isarray");module.exports=filter;

},{"lodash._arrayfilter":141,"lodash._basecallback":144,"lodash._basefilter":148,"lodash.isarray":166}],164:[function(require,module,exports){
function createForEach(a,r){return function(e,c,o){return"function"==typeof c&&void 0===o&&isArray(e)?a(e,c):r(e,bindCallback(c,o,3))}}var arrayEach=require("lodash._arrayeach"),baseEach=require("lodash._baseeach"),bindCallback=require("lodash._bindcallback"),isArray=require("lodash.isarray"),forEach=createForEach(arrayEach,baseEach);module.exports=forEach;

},{"lodash._arrayeach":140,"lodash._baseeach":147,"lodash._bindcallback":155,"lodash.isarray":166}],165:[function(require,module,exports){
function isArguments(t){return isArrayLikeObject(t)&&hasOwnProperty.call(t,"callee")&&(!propertyIsEnumerable.call(t,"callee")||objectToString.call(t)==argsTag)}function isArrayLike(t){return null!=t&&isLength(t.length)&&!isFunction(t)}function isArrayLikeObject(t){return isObjectLike(t)&&isArrayLike(t)}function isFunction(t){var e=isObject(t)?objectToString.call(t):"";return e==funcTag||e==genTag}function isLength(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=MAX_SAFE_INTEGER}function isObject(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function isObjectLike(t){return!!t&&"object"==typeof t}var MAX_SAFE_INTEGER=9007199254740991,argsTag="[object Arguments]",funcTag="[object Function]",genTag="[object GeneratorFunction]",objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,objectToString=objectProto.toString,propertyIsEnumerable=objectProto.propertyIsEnumerable;module.exports=isArguments;

},{}],166:[function(require,module,exports){
function isObjectLike(t){return!!t&&"object"==typeof t}function getNative(t,r){var e=null==t?void 0:t[r];return isNative(e)?e:void 0}function isLength(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=MAX_SAFE_INTEGER}function isFunction(t){return isObject(t)&&objToString.call(t)==funcTag}function isObject(t){var r=typeof t;return!!t&&("object"==r||"function"==r)}function isNative(t){return null!=t&&(isFunction(t)?reIsNative.test(fnToString.call(t)):isObjectLike(t)&&reIsHostCtor.test(t))}var arrayTag="[object Array]",funcTag="[object Function]",reIsHostCtor=/^\[object .+?Constructor\]$/,objectProto=Object.prototype,fnToString=Function.prototype.toString,hasOwnProperty=objectProto.hasOwnProperty,objToString=objectProto.toString,reIsNative=RegExp("^"+fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),nativeIsArray=getNative(Array,"isArray"),MAX_SAFE_INTEGER=9007199254740991,isArray=nativeIsArray||function(t){return isObjectLike(t)&&isLength(t.length)&&objToString.call(t)==arrayTag};module.exports=isArray;

},{}],167:[function(require,module,exports){
function isObjectLike(e){return!!e&&"object"==typeof e}function isElement(e){return!!e&&1===e.nodeType&&isObjectLike(e)&&!isPlainObject(e)}var isPlainObject=require("lodash.isplainobject");module.exports=isElement;

},{"lodash.isplainobject":169}],168:[function(require,module,exports){
function isObject(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}module.exports=isObject;

},{}],169:[function(require,module,exports){
function isObjectLike(o){return!!o&&"object"==typeof o}function baseForIn(o,e){return baseFor(o,e,keysIn)}function isPlainObject(o){var e;if(!isObjectLike(o)||objToString.call(o)!=objectTag||isArguments(o)||!hasOwnProperty.call(o,"constructor")&&"function"==typeof(e=o.constructor)&&!(e instanceof e))return!1;var t;return baseForIn(o,function(o,e){t=e}),void 0===t||hasOwnProperty.call(o,t)}var baseFor=require("lodash._basefor"),isArguments=require("lodash.isarguments"),keysIn=require("lodash.keysin"),objectTag="[object Object]",objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,objToString=objectProto.toString;module.exports=isPlainObject;

},{"lodash._basefor":149,"lodash.isarguments":165,"lodash.keysin":172}],170:[function(require,module,exports){
function isLength(a){return"number"==typeof a&&a>-1&&a%1==0&&a<=MAX_SAFE_INTEGER}function isObjectLike(a){return!!a&&"object"==typeof a}function isTypedArray(a){return isObjectLike(a)&&isLength(a.length)&&!!typedArrayTags[objectToString.call(a)]}var MAX_SAFE_INTEGER=9007199254740991,argsTag="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var objectProto=Object.prototype,objectToString=objectProto.toString;module.exports=isTypedArray;

},{}],171:[function(require,module,exports){
function baseProperty(e){return function(t){return null==t?void 0:t[e]}}function isArrayLike(e){return null!=e&&isLength(getLength(e))}function isIndex(e,t){return e="number"==typeof e||reIsUint.test(e)?+e:-1,t=null==t?MAX_SAFE_INTEGER:t,e>-1&&e%1==0&&e<t}function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function shimKeys(e){for(var t=keysIn(e),r=t.length,n=r&&e.length,s=!!n&&isLength(n)&&(isArray(e)||isArguments(e)),o=-1,i=[];++o<r;){var u=t[o];(s&&isIndex(u,n)||hasOwnProperty.call(e,u))&&i.push(u)}return i}function isObject(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function keysIn(e){if(null==e)return[];isObject(e)||(e=Object(e));var t=e.length;t=t&&isLength(t)&&(isArray(e)||isArguments(e))&&t||0;for(var r=e.constructor,n=-1,s="function"==typeof r&&r.prototype===e,o=Array(t),i=t>0;++n<t;)o[n]=n+"";for(var u in e)i&&isIndex(u,t)||"constructor"==u&&(s||!hasOwnProperty.call(e,u))||o.push(u);return o}var getNative=require("lodash._getnative"),isArguments=require("lodash.isarguments"),isArray=require("lodash.isarray"),reIsUint=/^\d+$/,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeKeys=getNative(Object,"keys"),MAX_SAFE_INTEGER=9007199254740991,getLength=baseProperty("length"),keys=nativeKeys?function(e){var t=null==e?void 0:e.constructor;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&isArrayLike(e)?shimKeys(e):isObject(e)?nativeKeys(e):[]}:shimKeys;module.exports=keys;

},{"lodash._getnative":157,"lodash.isarguments":165,"lodash.isarray":166}],172:[function(require,module,exports){
function isIndex(r,t){return r="number"==typeof r||reIsUint.test(r)?+r:-1,t=null==t?MAX_SAFE_INTEGER:t,r>-1&&r%1==0&&r<t}function isLength(r){return"number"==typeof r&&r>-1&&r%1==0&&r<=MAX_SAFE_INTEGER}function isObject(r){var t=typeof r;return!!r&&("object"==t||"function"==t)}function keysIn(r){if(null==r)return[];isObject(r)||(r=Object(r));var t=r.length;t=t&&isLength(t)&&(isArray(r)||isArguments(r))&&t||0;for(var e=r.constructor,n=-1,o="function"==typeof e&&e.prototype===r,s=Array(t),i=t>0;++n<t;)s[n]=n+"";for(var u in r)i&&isIndex(u,t)||"constructor"==u&&(o||!hasOwnProperty.call(r,u))||s.push(u);return s}var isArguments=require("lodash.isarguments"),isArray=require("lodash.isarray"),reIsUint=/^\d+$/,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,MAX_SAFE_INTEGER=9007199254740991;module.exports=keysIn;

},{"lodash.isarguments":165,"lodash.isarray":166}],173:[function(require,module,exports){
function baseMap(r,a){var e=-1,n=isArrayLike(r)?Array(r.length):[];return baseEach(r,function(r,t,s){n[++e]=a(r,t,s)}),n}function baseProperty(r){return function(a){return null==a?void 0:a[r]}}function isArrayLike(r){return null!=r&&isLength(getLength(r))}function isLength(r){return"number"==typeof r&&r>-1&&r%1==0&&r<=MAX_SAFE_INTEGER}function map(r,a,e){var n=isArray(r)?arrayMap:baseMap;return a=baseCallback(a,e,3),n(r,a)}var arrayMap=require("lodash._arraymap"),baseCallback=require("lodash._basecallback"),baseEach=require("lodash._baseeach"),isArray=require("lodash.isarray"),MAX_SAFE_INTEGER=9007199254740991,getLength=baseProperty("length");module.exports=map;

},{"lodash._arraymap":142,"lodash._basecallback":144,"lodash._baseeach":147,"lodash.isarray":166}],174:[function(require,module,exports){
function baseForOwn(e,a){return baseFor(e,a,keys)}function createObjectMapper(e){return function(a,r,s){var o={};return r=baseCallback(r,s,3),baseForOwn(a,function(a,s,b){var n=r(a,s,b);s=e?n:s,a=e?a:n,o[s]=a}),o}}var baseCallback=require("lodash._basecallback"),baseFor=require("lodash._basefor"),keys=require("lodash.keys"),mapValues=createObjectMapper();module.exports=mapValues;

},{"lodash._basecallback":144,"lodash._basefor":149,"lodash.keys":171}],175:[function(require,module,exports){
function toObject(e){return isObject(e)?e:Object(e)}function isObject(e){var r=typeof e;return!!e&&("object"==r||"function"==r)}function pairs(e){e=toObject(e);for(var r=-1,t=keys(e),n=t.length,o=Array(n);++r<n;){var c=t[r];o[r]=[c,e[c]]}return o}var keys=require("lodash.keys");module.exports=pairs;

},{"lodash.keys":171}],176:[function(require,module,exports){
function arrayReduce(e,a,r,c){var u=-1,s=e.length;for(c&&s&&(r=e[++u]);++u<s;)r=a(r,e[u],u,e);return r}function createReduce(e,a){return function(r,c,u,s){var d=arguments.length<3;return"function"==typeof c&&void 0===s&&isArray(r)?e(r,c,u,d):baseReduce(r,baseCallback(c,s,4),u,d,a)}}var baseCallback=require("lodash._basecallback"),baseEach=require("lodash._baseeach"),baseReduce=require("lodash._basereduce"),isArray=require("lodash.isarray"),reduce=createReduce(arrayReduce,baseEach);module.exports=reduce;

},{"lodash._basecallback":144,"lodash._baseeach":147,"lodash._basereduce":151,"lodash.isarray":166}],177:[function(require,module,exports){
function restParam(r,t){if("function"!=typeof r)throw new TypeError(FUNC_ERROR_TEXT);return t=nativeMax(void 0===t?r.length-1:+t||0,0),function(){for(var a=arguments,e=-1,n=nativeMax(a.length-t,0),i=Array(n);++e<n;)i[e]=a[t+e];switch(t){case 0:return r.call(this,i);case 1:return r.call(this,a[0],i);case 2:return r.call(this,a[0],a[1],i)}var c=Array(t+1);for(e=-1;++e<t;)c[e]=a[e];return c[t]=i,r.apply(this,c)}}var FUNC_ERROR_TEXT="Expected a function",nativeMax=Math.max;module.exports=restParam;

},{}],178:[function(require,module,exports){
function compareAscending(e,r){return baseCompareAscending(e.criteria,r.criteria)||e.index-r.index}function baseMap(e,r){var a=-1,n=isArrayLike(e)?Array(e.length):[];return baseEach(e,function(e,t,i){n[++a]=r(e,t,i)}),n}function baseProperty(e){return function(r){return null==r?void 0:r[e]}}function isArrayLike(e){return null!=e&&isLength(getLength(e))}function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function sortBy(e,r,a){if(null==e)return[];a&&isIterateeCall(e,r,a)&&(r=void 0);var n=-1;r=baseCallback(r,a,3);var t=baseMap(e,function(e,a,t){return{criteria:r(e,a,t),index:++n,value:e}});return baseSortBy(t,compareAscending)}var baseCallback=require("lodash._basecallback"),baseCompareAscending=require("lodash._basecompareascending"),baseEach=require("lodash._baseeach"),baseSortBy=require("lodash._basesortby"),isIterateeCall=require("lodash._isiterateecall"),MAX_SAFE_INTEGER=9007199254740991,getLength=baseProperty("length");module.exports=sortBy;

},{"lodash._basecallback":144,"lodash._basecompareascending":145,"lodash._baseeach":147,"lodash._basesortby":152,"lodash._isiterateecall":158}],179:[function(require,module,exports){
function escapeStringChar(e){return"\\"+stringEscapes[e]}function isObjectLike(e){return!!e&&"object"==typeof e}function assignOwnDefaults(e,r,t,n){return void 0!==e&&hasOwnProperty.call(n,t)?e:r}function assignWith(e,r,t){for(var n=-1,a=keys(r),s=a.length;++n<s;){var i=a[n],o=e[i],p=t(o,r[i],i,e,r);(p===p?p===o:o!==o)&&(void 0!==o||i in e)||(e[i]=p)}return e}function baseAssign(e,r){return null==r?e:baseCopy(r,keys(r),e)}function isError(e){return isObjectLike(e)&&"string"==typeof e.message&&objToString.call(e)==errorTag}function template(e,r,t){var n=templateSettings.imports._.templateSettings||templateSettings;t&&isIterateeCall(e,r,t)&&(r=t=void 0),e=baseToString(e),r=assignWith(baseAssign({},t||r),n,assignOwnDefaults);var a,s,i=assignWith(baseAssign({},r.imports),n.imports,assignOwnDefaults),o=keys(i),p=baseValues(i,o),l=0,u=r.interpolate||reNoMatch,c="__p += '",g=RegExp((r.escape||reNoMatch).source+"|"+u.source+"|"+(u===reInterpolate?reEsTemplate:reNoMatch).source+"|"+(r.evaluate||reNoMatch).source+"|$","g"),_="sourceURL"in r?"//# sourceURL="+r.sourceURL+"\n":"";e.replace(g,function(r,t,n,i,o,p){return n||(n=i),c+=e.slice(l,p).replace(reUnescapedString,escapeStringChar),t&&(a=!0,c+="' +\n__e("+t+") +\n'"),o&&(s=!0,c+="';\n"+o+";\n__p += '"),n&&(c+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),l=p+r.length,r}),c+="';\n";var b=r.variable;b||(c="with (obj) {\n"+c+"\n}\n"),c=(s?c.replace(reEmptyStringLeading,""):c).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;"),c="function("+(b||"obj")+") {\n"+(b?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+c+"return __p\n}";var h=attempt(function(){return Function(o,_+"return "+c).apply(void 0,p)});if(h.source=c,isError(h))throw h;return h}var baseCopy=require("lodash._basecopy"),baseToString=require("lodash._basetostring"),baseValues=require("lodash._basevalues"),isIterateeCall=require("lodash._isiterateecall"),reInterpolate=require("lodash._reinterpolate"),keys=require("lodash.keys"),restParam=require("lodash.restparam"),templateSettings=require("lodash.templatesettings"),errorTag="[object Error]",reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g,reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,reNoMatch=/($^)/,reUnescapedString=/['\n\r\u2028\u2029\\]/g,stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,objToString=objectProto.toString,attempt=restParam(function(e,r){try{return e.apply(void 0,r)}catch(e){return isError(e)?e:new Error(e)}});module.exports=template;

},{"lodash._basecopy":146,"lodash._basetostring":153,"lodash._basevalues":154,"lodash._isiterateecall":158,"lodash._reinterpolate":159,"lodash.keys":171,"lodash.restparam":177,"lodash.templatesettings":180}],180:[function(require,module,exports){
var escape=require("lodash.escape"),reInterpolate=require("lodash._reinterpolate"),reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,templateSettings={escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:{escape:escape}}};module.exports=templateSettings;

},{"lodash._reinterpolate":159,"lodash.escape":162}],181:[function(require,module,exports){
function render(e,r){return r=r||{},compile(e)(r)}function compile(e){for(var r,t=[],n=parse(e),o=0;o<n.length;++o)if(r=n[o],o%2==0)t.push('"'+r.replace(/"/g,'\\"')+'"');else switch(r[0]){case"/":r=r.slice(1),t.push(") + ");break;case"^":r=r.slice(1),assertProperty(r),t.push(' + section(obj, "'+r+'", true, ');break;case"#":r=r.slice(1),assertProperty(r),t.push(' + section(obj, "'+r+'", false, ');break;case"!":r=r.slice(1),assertProperty(r),t.push(" + obj."+r+" + ");break;default:assertProperty(r),t.push(" + escape(obj."+r+") + ")}return t="\n"+indent(escape.toString())+";\n\n"+indent(section.toString())+";\n\n  return "+t.join("").replace(/\n/g,"\\n"),new Function("obj",t)}function assertProperty(e){if(!e.match(/^[\w.]+$/))throw new Error('invalid property "'+e+'"')}function parse(e){return e.split(/\{\{|\}\}/)}function indent(e){return e.replace(/^/gm,"  ")}function section(e,r,t,n){var o=e[r];return"function"==typeof o?o.call(e,n):(t&&(o=!o),o?n:"")}function escape(e){return String(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}exports=module.exports=render,exports.compile=compile;

},{}],182:[function(require,module,exports){
function _delta(t,e){var n,a;return n=Date.now(),a=n-this.now,a=Math.min(a,MAX_DT),a=Math.max(a,MIN_DT),this.elapsed+=a,this.now=n,a}function _start(){this.now=Date.now()}function _reset(){this.now=0,this.elapsed=0}function _getValue(t){return this[t]}var MAX_DT=60,MIN_DT=1e3/60;module.exports=function(){var t={now:0,elapsed:0};return{start:_start.bind(t),reset:_reset.bind(t),now:_getValue.bind(t,"now"),elapsed:_getValue.bind(t,"elapsed"),delta:_delta.bind(t)}};

},{}],183:[function(require,module,exports){
function _startFn(t,e,r){return function(){r.started||(r.clockStarted||e.start(),t(),r.started=!0)}}function _stopFn(t){return function(){Raf.cancel(t.rafHandle),t.started=!1}}function _loopFn(t,e,r,n){var a={dt:0,unitDt:0,now:0,elapsed:0};return function o(){n.rafHandle=Raf.invoke(o),a.dt=e.delta(),a.unitDt=a.dt/16.66666667,a.now=e.now(),a.elapsed=e.elapsed(),r(a),t.emit("update",a),t.emit("updatedone",a),t.emit("draw",a),t.emit("drawdone",a)}}var Raf=require("./raf")(),EventEmitter=require("events").EventEmitter,CreateClock=require("./clock"),passThrough=function(t){return t};module.exports=function(t){var e,r;"object"==typeof t&&(e=t.emitter,r=t.customizeEvent),e=e||new EventEmitter,r=r||passThrough;var n=CreateClock(),a={clockStarted:!1,started:!1,rafHandle:null};return{start:_startFn(_loopFn(e,n,r,a),n,a),stop:_stopFn(a),reset:n.reset,emitter:e}};

},{"./clock":182,"./raf":184,"events":4}],184:[function(require,module,exports){
function _getNativeRAF(){for(var n=window.requestAnimationFrame,e=window.cancelAnimationFrame,i=["ms","moz","webkit","o"],o=0;!n&&o<i.length;++o)n=window[i[o]+"RequestAnimationFrame"],e=window[i[o]+"CancelAnimationFrame"]||window[i[o]+"CancelRequestAnimationFrame"];return{invoke:n.bind(window),cancel:e.bind(window)}}function _invokeFn(){var n=0;return function(e,i){var o=(new Date).getTime(),t=Math.max(0,16-(o-n)),a=window.setTimeout(function(){e(o+t)},t);return n=o+t,a}}function _cancel(n){clearTimeout(n)}module.exports=function(){var n=_getNativeRAF();return n.invoke=n.invoke?n.invoke:_invokeFn(),n.cancel=n.cancel?n.cancel:_cancel(),{invoke:function(e){return n.invoke(e)},cancel:function(e){n.cancel(e)}}};

},{}],185:[function(require,module,exports){
var EventEmitter=require("events").EventEmitter,IsObject=require("lodash.isobject"),Each=require("lodash.foreach"),Extend=require("lodash.assign"),load=function(e,t,n,r){return function(s){var i=this.slug,a=e[s],o=this.manifest;if(!IsObject(a))return!1;this.slug&&r.emit("unload",{slug:i,manifest:o});var u=n(a,s);return parseManifest(t,u),parseManifest(a,u),this.manifest=a,this.slug=s,r.emit("load",{slug:s,globalManifest:t,manifest:a,graph:u}),u}},parseManifest=function(e,t){return Each(e.components,function(e,n){var r;IsObject(e)?(r=IsObject(e.properties)?e.properties:{},IsObject(e.function)?t[n]=e.function(t,r):IsObject(e.construct)?t[n]=new e.construct(t,r):t[n]=e):t[n]=e}),t},createBlankObject=function(){return{}};module.exports=function(e,t){var n=Extend({globalManifest:{},getGraph:createBlankObject,emitter:new EventEmitter},t),r=Object.preventExtensions({slug:null,manifest:null});return{load:load(e,n.globalManifest,n.getGraph,n.emitter).bind(r),emitter:n.emitter}};

},{"events":4,"lodash.assign":161,"lodash.foreach":164,"lodash.isobject":168}],186:[function(require,module,exports){
var Map=require("lodash.map"),colors={hexToArray:function(r){var o=colors.hexToString(r);return[parseInt(o[1]+o[2],16),parseInt(o[3]+o[4],16),parseInt(o[5]+o[6],16)]},arrayToHex:function(r){var o=Map(r,function(r){var o=parseInt(r,10).toString(16);return o.length>1?o:"0"+o}).join("");return parseInt(o,16)},lightness:function(r,o){if("number"!=typeof r)throw new Error("hexColor must be in the form of 0x54AFFF");if(r<0||r>16777215)throw new Error("hexColor is out of range");var n=colors.hexToArray(r),e=255;o<0&&(o*=-1,e=0);var t=Map(n,function(r){return r*(1-o)+e*o});return colors.arrayToHex(t)},mix:function(r,o,n){var e=colors.hexToArray(r),t=colors.hexToArray(o),a=Map(e,function(r,o){return r*(1-n)+t[o]*n});return colors.arrayToHex(a)},hexToString:function(r){for(var o=parseInt(r,10).toString(16);o.length<6;)o="0"+o;return"#"+o}};module.exports=colors;

},{"lodash.map":173}],187:[function(require,module,exports){
(function (Buffer){(function (){
var insertCss=require("insert-css"),ClassList=require("class-list"),EventEmitter=require("events").EventEmitter,colors=require("./colors"),Pairs=require("lodash.pairs"),Filter=require("lodash.filter"),SortBy=require("lodash.sortby"),ForEach=require("lodash.foreach"),Template=require("lodash.template"),MapValues=require("lodash.mapvalues"),Reduce=require("lodash.reduce"),IsElement=require("lodash.iselement"),Extend=require("lodash.assign"),_menuTemplate=null,_cssTemplate=null,_levelTemplate=null,sortAndFilterManifests=function(C){var g=Pairs(C),b=Filter(g,function(C){return!1!==C[1].visible});return SortBy(b,function(C){return C[1].order})},handlers=function(){var C=ClassList(document.body),g=!1,b=null,l=!1,t=function(C){C&&C.preventDefault(),g?I():e()},I=function(){C.remove("poem-menu-open"),b.emit("close"),g=!1},e=function(){C.add("poem-menu-open"),b.emit("open"),g=!0},o=function(C){b.emit("load",{slug:this.getAttribute("data-slug")}),I()};return function(C,g,W){b=g,l=C.preventDefault,W.getElementsByClassName("poem-menu-burger")[0].addEventListener("click",t,!1);var A=W.getElementsByClassName("poem-menu-levels")[0].getElementsByTagName("a");return ForEach(A,function(C){C.addEventListener("click",o,!1)}),W.getElementsByClassName("poem-menu-blocker")[0].addEventListener("click",I,!1),window.addEventListener("keydown",function(g){g.keyCode===C.toggleKey&&t(g)}),{close:I,open:e}}}(),loadTemplatesOnce=function(){var C=!0;return function(){C&&(C=!1,_menuTemplate=Template(Buffer("PGRpdiBjbGFzcz0ncG9lbS1tZW51Jz4KCQoJPGEgY2xhc3M9InBvZW0tbWVudS1idXJnZXIiIGhyZWY9IiNtZW51IiB0aXRsZT0nSGl0IEVTQyBrZXkgdG8gb3Blbi9jbG9zZSc+CgkJPGRpdiBjbGFzcz0icG9lbS1tZW51LWJ1cmdlci1iYXJzIj48L2Rpdj4KCTwvYT4KCQoJPGRpdiBjbGFzcz0ncG9lbS1tZW51LXRvcCc+PC9kaXY+CgkKCTxkaXYgY2xhc3M9J3BvZW0tbWVudS1taWRkbGUnPgoJCTxkaXYgY2xhc3M9J3BvZW0tbWVudS1sZXZlbHMtdG9wJz48L2Rpdj4KCQk8ZGl2IGNsYXNzPSdwb2VtLW1lbnUtbGV2ZWxzJz4KCQkJPCU9IGxldmVscyAlPgoJCTwvZGl2PgoJCTxkaXYgY2xhc3M9J3BvZW0tbWVudS1sZXZlbHMtYm90dG9tJz48L2Rpdj4KCTwvZGl2PgoJCQoJPGRpdiBjbGFzcz0ncG9lbS1tZW51LWJvdHRvbSc+PC9kaXY+CgkKPC9kaXY+CjxkaXYgY2xhc3M9J3BvZW0tbWVudS1ibG9ja2VyJz48L2Rpdj4=","base64")),_levelTemplate=Template(Buffer("PGEgaHJlZj0nIy88JS0gc2x1ZyAlPicgZGF0YS1zbHVnPSc8JS0gc2x1ZyAlPicgY2xhc3M9J3BvZW0tbWVudS1sZXZlbCc+Cgk8aDIgY2xhc3M9J3BvZW0tbWVudS1sZXZlbC1uYW1lJz48JS0gbWFuaWZlc3QubmFtZSAlPjwvaDE+Cgk8ZGl2IGNsYXNzPSdwb2VtLW1lbnUtbGV2ZWwtZGVzY3JpcHRpb24nPjwlLSBtYW5pZmVzdC5kZXNjcmlwdGlvbiAlPjwvZGl2Pgo8L2E+","base64")),_cssTemplate=Template(Buffer("","base64")))}}(),runCssTemplates=function(C){var g=C.primaryColor>C.menuColor?1:-1,b=_cssTemplate(MapValues({hamburger:C.hamburgerColor,primaryActive:C.primaryColor,text:C.textColor,menu:C.menuColor,textActive:colors.lightness(C.textColor,.1*g),menuDark:colors.lightness(C.menuColor,-.2*g),menuLight:colors.lightness(C.menuColor,.2*g),primary:colors.mix(C.primaryColor,C.menuColor,.2),level:colors.mix(C.primaryColor,C.menuColor,.9),levelActive:colors.mix(C.primaryColor,C.menuColor,.6)},colors.hexToString));insertCss(b)},runHtmlTemplates=function(C,g){function b(C,g){IsElement(g)?C.appendChild(g):C.innerHTML=g}var l=Reduce(C,function(C,g){return C+_levelTemplate({slug:g[0],manifest:g[1]})},""),t=_menuTemplate({levels:l}),I=document.createElement("div");return I.innerHTML=t,b(I.getElementsByClassName("poem-menu-top")[0],g.top),b(I.getElementsByClassName("poem-menu-levels-top")[0],g.beforeLevels),b(I.getElementsByClassName("poem-menu-levels-bottom")[0],g.afterLevels),b(I.getElementsByClassName("poem-menu-bottom")[0],g.bottom),document.body.insertBefore(I,document.body.firstChild),I};module.exports=function(C,g){loadTemplatesOnce();var b=Extend({hamburgerColor:16777215,primaryColor:5550079,textColor:10471137,menuColor:2567732,top:"Poem",beforeLevels:"",afterLevels:"",bottom:"",preventDefaultLevelLinks:!0,toggleKey:27},g),l=new EventEmitter,t=sortAndFilterManifests(C);runCssTemplates(b);var I=runHtmlTemplates(t,b),e=handlers(b,l,I);return{emitter:l,close:e.close,open:e.open}};

}).call(this)}).call(this,require("buffer").Buffer)

},{"./colors":186,"buffer":3,"class-list":96,"events":4,"insert-css":137,"lodash.assign":161,"lodash.filter":163,"lodash.foreach":164,"lodash.iselement":167,"lodash.mapvalues":174,"lodash.pairs":175,"lodash.reduce":176,"lodash.sortby":178,"lodash.template":179}],188:[function(require,module,exports){
var localforage=require("localforage"),EventEmitter=require("events").EventEmitter,muteUI=require("./ui"),extend=require("extend"),dispatchChanged=function(e,t){e.emit("change",t),!0===t?e.emit("mute"):e.emit("unmute")},updateFromLocalStorage=function(e,t){localforage.getItem("poem-mute",function(t,u){e.muted();t||!1!==u&&!0!==u?e.muted(!1):e.muted(u)}.bind(this))},keyboardShortcut=function(e,t,u){!1!==u.keyCode&&window.addEventListener("keydown",function(e){e.keyCode===u.keyCode&&t()})},getSetMuted=function(e,t){return function(u){return!0!==u&&!1!==u||u!==e.muted&&(e.muted=u,localforage.setItem("poem-mute",e.muted),dispatchChanged(t,e.muted)),e.muted}},mute=function(e){var t=extend({muted:!1,keyCode:83}),u={muted:t.muted},n=new EventEmitter,o=getSetMuted(u,n),d=function(){o(!o())};keyboardShortcut(u,d,t);var r={muted:o,toggle:d,emitter:n,el:null};return updateFromLocalStorage(r,n),r.el=muteUI(r),r};module.exports=mute;

},{"./ui":190,"events":4,"extend":189,"localforage":139}],189:[function(require,module,exports){
var hasOwn=Object.prototype.hasOwnProperty,toStr=Object.prototype.toString,defineProperty=Object.defineProperty,gOPD=Object.getOwnPropertyDescriptor,isArray=function(r){return"function"==typeof Array.isArray?Array.isArray(r):"[object Array]"===toStr.call(r)},isPlainObject=function(r){"use strict";if(!r||"[object Object]"!==toStr.call(r))return!1;var t=hasOwn.call(r,"constructor"),e=r.constructor&&r.constructor.prototype&&hasOwn.call(r.constructor.prototype,"isPrototypeOf");if(r.constructor&&!t&&!e)return!1;var o;for(o in r);return void 0===o||hasOwn.call(r,o)},setProperty=function(r,t){defineProperty&&"__proto__"===t.name?defineProperty(r,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):r[t.name]=t.newValue},getProperty=function(r,t){if("__proto__"===t){if(!hasOwn.call(r,t))return;if(gOPD)return gOPD(r,t).value}return r[t]};module.exports=function r(){"use strict";var t,e,o,n,a,i,c=arguments[0],u=1,l=arguments.length,p=!1;for("boolean"==typeof c&&(p=c,c=arguments[1]||{},u=2),(null==c||"object"!=typeof c&&"function"!=typeof c)&&(c={});u<l;++u)if(null!=(t=arguments[u]))for(e in t)o=getProperty(c,e),n=getProperty(t,e),c!==n&&(p&&n&&(isPlainObject(n)||(a=isArray(n)))?(a?(a=!1,i=o&&isArray(o)?o:[]):i=o&&isPlainObject(o)?o:{},setProperty(c,{name:e,newValue:r(p,i,n)})):void 0!==n&&setProperty(c,{name:e,newValue:n}));return c};

},{}],190:[function(require,module,exports){
(function (Buffer){(function (){
function createElement(L,M){var j=document.createElement("div");return j.innerHTML=L,j.getElementsByClassName(M)[0]}var ClassList=require("class-list"),insertCss=require("insert-css"),_html=Buffer("PGEgaHJlZj0nI211dGUnIGlkPSdwb2VtLW11dGUnIGNsYXNzPSdwb2VtLW11dGUnIHRpdGxlPSdIaXQgUyBrZXkgdG8gbXV0ZSc+Cgk8c3ZnIGNsYXNzPSdwb2VtLW11dGUtc3ZnJyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJCSB2aWV3Qm94PSIwIDAgNjQwIDQxNC40IiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCA2NDAgNDE0LjQiIHhtbDpzcGFjZT0icHJlc2VydmUiPgoJPHBhdGggY2xhc3M9J3BvZW0tbXV0ZS1zcGVha2VyJwoJCWQ9Ik0yOTQuNCwzNzlsLTExMi41LTc4LjljLTMuOC0yLjctOC4zLTQuMS0xMy00LjFINzMuNkM2MS4xLDI5Niw1MSwyODUuOSw1MSwyNzMuNFYxNDIuNmMwLTEyLjUsMTAuMS0yMi42LDIyLjYtMjIuNmg5Ni4yCgkJYzQuNywwLDkuMi0xLjQsMTMuMS00LjFsMTExLjUtNzguN2MxNS0xMC42LDM1LjcsMC4xLDM1LjcsMTguNXYzMDQuOEMzMzAsMzc4LjgsMzA5LjQsMzg5LjUsMjk0LjQsMzc5eiIvPgoJPHBhdGggY2xhc3M9J3BvZW0tbXV0ZS14JwoJCWQ9Ik01NjUuMywyNjkuM2wtNTkuMS01OS4xbDU5LjEtNTkuMWM3LjEtNy4xLDcuMS0xOC43LDAtMjUuOGMtNy4xLTcuMS0xOC43LTcuMS0yNS44LDBsLTU5LjEsNTkuMWwtNTkuMS01OS4xCgkJYy03LjEtNy4xLTE4LjctNy4xLTI1LjgsMGwwLDBjLTcuMSw3LjEtNy4xLDE4LjcsMCwyNS44bDU5LjEsNTkuMWwtNTkuMSw1OS4xYy03LjEsNy4xLTcuMSwxOC43LDAsMjUuOGM3LjEsNy4xLDE4LjcsNy4xLDI1LjgsMAoJCWw1OS4xLTU5LjFsNTkuMSw1OS4xYzcuMSw3LjEsMTguNyw3LjEsMjUuOCwwdjBDNTcyLjQsMjg3LjksNTcyLjQsMjc2LjQsNTY1LjMsMjY5LjN6Ii8+Cgk8Zz4KCQk8Zz4KCQkJPHBhdGggY2xhc3M9J3BvZW0tbXV0ZS13YXZlJwoJCQkJZD0iTTM5NS4yLDMxNC4yYy02LjMsMC0xMi40LTMuNy0xNS4xLTkuOGMtMi44LTYuNS0xLjItMTMuNywzLjUtMTguNGMwLjUtMC42LDEtMS4yLDEuNi0xLjhjMi4yLTIuMiw0LjMtMy42LDYuMS00LjcKCQkJCWMxLTEuMSwyLTIuMiwzLTMuM2MxLjctMS44LDMuNC0zLjcsNS4zLTUuN2MxNi42LTE5LjksMjQuNC00Ni43LDIxLjYtNzMuN2MtMi44LTI2LjktMTYtNTEuMy0zNi4yLTY2LjljLTcuMi01LjYtOC41LTE1LjktMy0yMy4xCgkJCQljNS42LTcuMiwxNS45LTguNSwyMy4xLTNjMjcuMywyMS4xLDQ1LjEsNTMuNyw0OC44LDg5LjZjMy44LDM2LjEtNyw3Mi4yLTI5LjYsOTlsLTAuNCwwLjVsLTAuNSwwLjVjLTEuNiwxLjYtMy4xLDMuMi00LjcsNQoJCQkJYy0xLjgsMi0zLjcsNC4xLTUuOSw2LjNsLTEuOSwxLjlsLTIuNCwxLjJjMCwwLDAsMC0wLjEsMGMtMS40LDEuNy0zLjUsMy44LTYuOSw1LjJDMzk5LjcsMzEzLjgsMzk3LjUsMzE0LjIsMzk1LjIsMzE0LjJ6Ii8+CgkJPC9nPgoJCTxnPgoJCQk8cGF0aCBjbGFzcz0ncG9lbS1tdXRlLXdhdmUnCgkJCQlkPSJNNDM4LjYsMzU2LjJjLTYuMywwLTEyLjQtMy43LTE1LjEtOS44Yy0yLjktNi42LTEuMS0xNC4xLDMuOS0xOC44YzAuNS0wLjcsMS4yLTEuNiwyLjEtMi40YzMtMyw1LjktNC44LDguMy02LjIKCQkJCWMxLjgtMS45LDMuNi0zLjgsNS40LTUuOWMyLjQtMi43LDQuOS01LjUsNy44LTguNGMyNS43LTMwLjcsMzcuOS03Mi4xLDMzLjUtMTEzLjhjLTQuNC00MS41LTI0LjgtNzkuMS01NS45LTEwMy4yCgkJCQljLTcuMi01LjYtOC41LTE1LjktMy0yMy4xYzUuNi03LjIsMTUuOS04LjUsMjMuMS0zYzM4LjIsMjkuNiw2My4yLDc1LjQsNjguNiwxMjUuOGM1LjQsNTAuOC05LjgsMTAxLjUtNDEuNiwxMzkuMWwtMC40LDAuNQoJCQkJbC0wLjUsMC41Yy0yLjQsMi40LTQuNyw1LTcuMSw3LjZjLTIuNiwyLjktNS4yLDUuOC04LjMsOC45bC0xLjksMS45bC0yLjQsMS4yYy0wLjgsMC40LTEuNCwwLjctMS43LDAuOWMtMS4zLDEuOS0zLjgsNC44LTguMSw2LjYKCQkJCUM0NDMsMzU1LjcsNDQwLjgsMzU2LjIsNDM4LjYsMzU2LjJ6Ii8+CgkJPC9nPgoJCTxnPgoJCQk8cGF0aCBjbGFzcz0ncG9lbS1tdXRlLXdhdmUnCgkJCQlkPSJNNDgzLjYsMzk1LjZjLTYuMywwLTEyLjQtMy43LTE1LjEtOS44Yy0zLTYuNy0xLjEtMTQuNCw0LjItMTljMC42LTAuOSwxLjQtMS45LDIuNS0yLjljMy43LTMuNyw3LjMtNS45LDEwLjMtNy41CgkJCQljMi42LTIuNyw1LTUuNCw3LjYtOC4zYzMuMi0zLjUsNi40LTcuMSwxMC4xLTEwLjhjMzQuMy00MC44LDUwLjYtOTYsNDQuOC0xNTEuNmMtNS44LTU1LjItMzMtMTA1LjItNzQuNS0xMzcuMwoJCQkJYy03LjItNS42LTguNS0xNS45LTMtMjMuMWM1LjYtNy4yLDE1LjktOC41LDIzLjEtM2M0OC42LDM3LjYsODAuMyw5NS45LDg3LjEsMTYwYzYuOCw2NC43LTEyLjQsMTI5LjEtNTIuOCwxNzYuOWwtMC40LDAuNQoJCQkJbC0wLjUsMC41Yy0zLjMsMy4zLTYuMiw2LjYtOS40LDEwLjFjLTMuMywzLjctNi43LDcuNS0xMC42LDExLjNsLTEuOSwxLjlsLTIuNCwxLjJjLTEuOCwwLjktMi44LDEuNC0zLjYsMgoJCQkJYy0xLjMsMi0zLjksNS41LTguOSw3LjdDNDg4LjEsMzk1LjIsNDg1LjgsMzk1LjYsNDgzLjYsMzk1LjZ6Ii8+CgkJPC9nPgoJPC9nPgoJPC9zdmc+CjwvYT4=","base64"),_css=Buffer("LnBvZW0tbXV0ZS1zdmcgewogICAgZmlsbDogI2ZmZjsKCW9wYWNpdHk6MC44Owp9Ci5wb2VtLW11dGUtbXV0ZWQgLnBvZW0tbXV0ZS13YXZlIHsKICAgIGRpc3BsYXk6IG5vbmU7Cn0KLnBvZW0tbXV0ZS11bm11dGVkIC5wb2VtLW11dGUteCB7CiAgICBkaXNwbGF5OiBub25lOwp9Ci5wb2VtLW11dGUteCB7CiAgICBmaWxsOiByZWQ7Cn0KLnBvZW0tbXV0ZS1zdmc6aG92ZXIgewogICAgb3BhY2l0eToxOwp9","base64"),_cssInserted=!1;module.exports=function(L){var M=createElement(_html,"poem-mute"),j=ClassList(M);_cssInserted||(insertCss(_css),_cssInserted=!0);var u=function(){L.muted()?(j.remove("poem-mute-unmuted"),j.add("poem-mute-muted")):(j.remove("poem-mute-muted"),j.add("poem-mute-unmuted"))};return L.emitter.on("change",u),u(),M.addEventListener("click",function(M){L.toggle(),u(),M.preventDefault(),M.stopImmediatePropagation()},!0),M};

}).call(this)}).call(this,require("buffer").Buffer)

},{"buffer":3,"class-list":96,"insert-css":137}],191:[function(require,module,exports){
!function(i){function t(i,t,n,e,s){this._listener=t,this._isOnce=n,this.context=e,this._signal=i,this._priority=s||0}function n(i,t){if("function"!=typeof i)throw new Error("listener is a required param of {fn}() and should be a Function.".replace("{fn}",t))}function e(){this._bindings=[],this._prevParams=null;var i=this;this.dispatch=function(){e.prototype.dispatch.apply(i,arguments)}}t.prototype={active:!0,params:null,execute:function(i){var t,n;return this.active&&this._listener&&(n=this.params?this.params.concat(i):i,t=this._listener.apply(this.context,n),this._isOnce&&this.detach()),t},detach:function(){return this.isBound()?this._signal.remove(this._listener,this.context):null},isBound:function(){return!!this._signal&&!!this._listener},isOnce:function(){return this._isOnce},getListener:function(){return this._listener},getSignal:function(){return this._signal},_destroy:function(){delete this._signal,delete this._listener,delete this.context},toString:function(){return"[SignalBinding isOnce:"+this._isOnce+", isBound:"+this.isBound()+", active:"+this.active+"]"}},e.prototype={VERSION:"1.0.0",memorize:!1,_shouldPropagate:!0,active:!0,_registerListener:function(i,n,e,s){var r,o=this._indexOfListener(i,e);if(-1!==o){if(r=this._bindings[o],r.isOnce()!==n)throw new Error("You cannot add"+(n?"":"Once")+"() then add"+(n?"Once":"")+"() the same listener without removing the relationship first.")}else r=new t(this,i,n,e,s),this._addBinding(r);return this.memorize&&this._prevParams&&r.execute(this._prevParams),r},_addBinding:function(i){var t=this._bindings.length;do{--t}while(this._bindings[t]&&i._priority<=this._bindings[t]._priority);this._bindings.splice(t+1,0,i)},_indexOfListener:function(i,t){for(var n,e=this._bindings.length;e--;)if(n=this._bindings[e],n._listener===i&&n.context===t)return e;return-1},has:function(i,t){return-1!==this._indexOfListener(i,t)},add:function(i,t,e){return n(i,"add"),this._registerListener(i,!1,t,e)},addOnce:function(i,t,e){return n(i,"addOnce"),this._registerListener(i,!0,t,e)},remove:function(i,t){n(i,"remove");var e=this._indexOfListener(i,t);return-1!==e&&(this._bindings[e]._destroy(),this._bindings.splice(e,1)),i},removeAll:function(){for(var i=this._bindings.length;i--;)this._bindings[i]._destroy();this._bindings.length=0},getNumListeners:function(){return this._bindings.length},halt:function(){this._shouldPropagate=!1},dispatch:function(i){if(this.active){var t,n=Array.prototype.slice.call(arguments),e=this._bindings.length;if(this.memorize&&(this._prevParams=n),e){t=this._bindings.slice(),this._shouldPropagate=!0;do{e--}while(t[e]&&this._shouldPropagate&&!1!==t[e].execute(n))}}},forget:function(){this._prevParams=null},dispose:function(){this.removeAll(),delete this._bindings,delete this._prevParams},toString:function(){return"[Signal active:"+this.active+" numListeners:"+this.getNumListeners()+"]"}};var s=e;s.Signal=e,"function"==typeof define&&define.amd?define(function(){return s}):"undefined"!=typeof module&&module.exports?module.exports=s:i.signals=s}(this);

},{}],192:[function(require,module,exports){
function noop(n){if(n)throw n}function badge(n,t){inserted||(insert(".npm-scb-wrap {\n  font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 200;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 999;\n}\n\n.npm-scb-wrap a {\n  text-decoration: none;\n  color: #000;\n}\n.npm-scb-white\n.npm-scb-wrap a {\n  color: #fff;\n}\n\n.npm-scb-inner {\n  position: absolute;\n  top: -120px; left: 0;\n  padding: 8px;\n  width: 100%;\n  height: 150px;\n  z-index: 2;\n  -webkit-transition: width 0.5s cubic-bezier(1, 0, 0, 1), top 0.5s;\n     -moz-transition: width 0.5s cubic-bezier(1, 0, 0, 1), top 0.5s;\n      -ms-transition: width 0.5s cubic-bezier(1, 0, 0, 1), top 0.5s;\n       -o-transition: width 0.5s cubic-bezier(1, 0, 0, 1), top 0.5s;\n          transition: width 0.5s cubic-bezier(1, 0, 0, 1), top 0.5s;\n}\n.npm-scb-wrap:hover\n.npm-scb-inner {\n  top: 0;\n}\n\n.npm-scb-artwork {\n  position: absolute;\n  top: 16px; left: 16px;\n  width: 104px; height: 104px;\n  box-shadow: 0 0 8px -3px #000;\n  outline: 1px solid rgba(0,0,0,0.1);\n  z-index: 2;\n}\n.npm-scb-white\n.npm-scb-artwork {\n  outline: 1px solid rgba(255,255,255,0.1);\n  box-shadow: 0 0 10px -2px rgba(255,255,255,0.9);\n}\n\n.npm-scb-info {\n  position: absolute;\n  top: 16px;\n  left: 120px;\n  width: 300px;\n  z-index: 1;\n}\n\n.npm-scb-info > a {\n  display: block;\n}\n\n.npm-scb-now-playing {\n  font-size: 12px;\n  line-height: 12px;\n  position: absolute;\n  width: 500px;\n  z-index: 1;\n  padding: 15px 0;\n  top: 0; left: 138px;\n  opacity: 1;\n  -webkit-transition: opacity 0.25s;\n     -moz-transition: opacity 0.25s;\n      -ms-transition: opacity 0.25s;\n       -o-transition: opacity 0.25s;\n          transition: opacity 0.25s;\n}\n\n.npm-scb-wrap:hover\n.npm-scb-now-playing {\n  opacity: 0;\n}\n\n.npm-scb-white\n.npm-scb-now-playing {\n  color: #fff;\n}\n.npm-scb-now-playing > a {\n  font-weight: bold;\n}\n\n.npm-scb-info > a > p {\n  margin: 0;\n  padding-bottom: 0.25em;\n  line-height: 1.35em;\n  margin-left: 1em;\n  font-size: 1em;\n}\n\n.npm-scb-title {\n  font-weight: bold;\n}\n\n.npm-scb-icon {\n  position: absolute;\n  top: 120px;\n  padding-top: 0.75em;\n  left: 16px;\n}\n"),inserted=!0),template||(template=minstache.compile('<div class="npm-scb-wrap">\n  <div class="npm-scb-inner">\n    <a target="_blank" href="{{urls.song}}">\n      <img class="npm-scb-icon" src="{{icon}}">\n      <img class="npm-scb-artwork" src="{{artwork}}">\n    </a>\n    <div class="npm-scb-info">\n      <a target="_blank" href="{{urls.song}}">\n        <p class="npm-scb-title">{{title}}</p>\n      </a>\n      <a target="_blank" href="{{urls.artist}}">\n        <p class="npm-scb-artist">{{artist}}</p>\n      </a>\n    </div>\n  </div>\n  <div class="npm-scb-now-playing">\n    Now Playing:\n    <a href="{{urls.song}}">{{title}}</a>\n    by\n    <a href="{{urls.artist}}">{{artist}}</a>\n  </div>\n</div>\n')),!gwfadded&&n.getFonts&&(fonts.add({"Open Sans":[300,600]}),gwfadded=!0),n=n||{},t=t||noop;var i=n.el||document.createElement("div"),e="dark"in n&&!n.dark?"white":"black",s=n.client_id,o=n.song;return resolve(s,o,function(n,o){if(n)return t(n);if("track"!==o.kind)throw new Error("soundcloud-badge only supports individual tracks at the moment");i.classList["black"===e?"remove":"add"]("npm-scb-white"),i.innerHTML=template({artwork:o.artwork_url||o.user.avatar_url,artist:o.user.username,title:o.title,icon:icons[e],urls:{song:o.permalink_url,artist:o.user.permalink_url}}),document.body.appendChild(i),t(null,o.stream_url+"?client_id="+s,o,i)}),i}var resolve=require("soundcloud-resolve"),fonts=require("google-fonts"),minstache=require("minstache"),insert=require("insert-css"),fs=require("fs"),icons={black:"http://developers.soundcloud.com/assets/logo_black.png",white:"http://developers.soundcloud.com/assets/logo_white.png"};module.exports=badge;var inserted=!1,gwfadded=!1,template=null;

},{"fs":1,"google-fonts":134,"insert-css":193,"minstache":181,"soundcloud-resolve":194}],193:[function(require,module,exports){
var inserted=[];module.exports=function(e){if(!(inserted.indexOf(e)>=0)){inserted.push(e);var d=document.createElement("style"),t=document.createTextNode(e);d.appendChild(t),document.head.childNodes.length?document.head.insertBefore(d,document.head.childNodes[0]):document.head.appendChild(d)}};

},{}],194:[function(require,module,exports){
function resolve(r,e,o){var s="http://api.soundcloud.com/resolve.json?"+qs.stringify({url:e,client_id:r});xhr({uri:s,method:"GET"},function(r,e,s){if(r)return o(r);try{s=JSON.parse(s)}catch(r){return o(r)}return s.errors?o(new Error(s.errors[0].error_message)):o(null,s)})}var qs=require("querystring"),xhr=require("xhr");module.exports=resolve;

},{"querystring":9,"xhr":196}],195:[function(require,module,exports){
function offset(e,t){var n=e.clientX||0,r=e.clientY||0,u=bounds(t);return[n-u.left,r-u.top]}function getTargetTouch(e,t){return Array.prototype.slice.call(e).filter(function(e){return e.target===t})[0]||e[0]}function getTouch(e,t){for(var n=0;n<e.length;n++)if(e[n].identifier===t)return e[n];return null}function listeners(e,t){return function(n){t?e.addEventListener(n.type,n.listener,{passive:!1}):e.removeEventListener(n.type,n.listener,{passive:!1})}}function normalize(e){return e.replace(/^(touch|mouse)/,"").replace(/up$/,"end").replace(/down$/,"start")}function bounds(e){return e===window||e===document||e===document.body?ROOT:e.getBoundingClientRect()}var Emitter=require("events/"),allEvents=["touchstart","touchmove","touchend","touchcancel","mousedown","mousemove","mouseup"],ROOT={left:0,top:0};module.exports=function(e,t){function n(e,t){var n;return u&&/^touch(end|cancel)/.test(t)?(n=getTouch(e.changedTouches,u.identifier||0))&&(u=null):!u&&/^touchstart/.test(t)?u=n=getTargetTouch(e.changedTouches,r.target):u&&(n=getTouch(e.changedTouches,u.identifier||0)),n}t=t||{},e=e||window;var r=new Emitter;r.target=t.target||e;var u=null,o=t.filtered,i=allEvents;"string"==typeof t.type&&(i=allEvents.filter(function(e){return 0===e.indexOf(t.type)}));var c=i.map(function(e){var u=normalize(e);return{type:e,listener:function(i){var c=i;if(/^touch/.test(e)&&(/^touchend$/.test(e)&&!1!==t.preventSimulated&&i.preventDefault(),c=o?n(i,e):getTargetTouch(i.changedTouches,r.target)),c){var a=offset(c,r.target);r.emit(u,i,a)}}}});return r.enable=function(){return c.forEach(listeners(e,!0)),r},r.disable=function(){return u=null,c.forEach(listeners(e,!1)),r},r.enable(),r};

},{"events/":132}],196:[function(require,module,exports){
function createXHR(e,t){function o(){4===s.readyState&&n()}function n(){var e=null,o=s.statusCode=s.status,n=s.body=s.response||s.responseText||s.responseXML;if(0===o||o>=400&&o<600){var r=s.responseText||messages[String(s.status).charAt(0)];e=new Error(r),e.statusCode=s.status}if(c)try{n=s.body=JSON.parse(n)}catch(e){}t(e,s,n)}function r(e){t(e,s)}"string"==typeof e&&(e={uri:e}),e=e||{},t=once(t);var s;s=e.cors?new XDR:new XHR;var a=s.url=e.uri,i=s.method=e.method||"GET",u=e.body||e.data,d=s.headers=e.headers||{},c=!1;return"json"in e&&(c=!0,d["Content-Type"]="application/json",u=JSON.stringify(e.json)),s.onreadystatechange=o,s.onload=n,s.onerror=r,s.onprogress=function(){},s.ontimeout=noop,s.open(i,a),e.cors&&(s.withCredentials=!0),s.timeout="timeout"in e?e.timeout:5e3,s.setRequestHeader&&Object.keys(d).forEach(function(e){s.setRequestHeader(e,d[e])}),s.send(u),s}function noop(){}var window=require("global/window"),once=require("once"),messages={0:"Internal XMLHttpRequest Error",4:"4xx Client Error",5:"5xx Server Error"},XHR=window.XMLHttpRequest||noop,XDR="withCredentials"in new XHR?window.XMLHttpRequest:window.XDomainRequest;module.exports=createXHR;

},{"global/window":133,"once":197}],197:[function(require,module,exports){
function once(n){var o=!1;return function(){if(!o)return o=!0,n.apply(this,arguments)}}module.exports=once,once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{}]},{},[44])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
